# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.045368352869377446, (-14.061999999999998, -7.587, -27.034000000000006)), ('A', ' 190 ', 'HIS', 0.04115034377350429, (-27.869, 4.9959999999999996, -11.737)), ('B', '  66 ', 'PRO', 0.08099068359007036, (-1.483, 14.128, -16.963)), ('C', '  24 ', 'SER', 0.0011303300000000001, (-15.529999999999998, 17.415999999999997, -66.687)), ('C', '  66 ', 'PRO', 0.038312309409518325, (-35.907, 28.075999999999993, -38.181))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0009705973436504745, (15.572999999999997, -0.404, -2.255)), ('A', '  38 ', 'ASP', 0.2076000350697583, (11.072999999999997, 2.01, 3.27)), ('A', '  70 ', 'ARG', 0.03905063165115638, (-19.223999999999993, -6.586, -38.738)), ('A', ' 191 ', 'LEU', 0.001805285074828533, (-24.97, 2.5979999999999994, -12.251)), ('B', '  31 ', 'LEU', 0.0, (-13.671, -7.012999999999999, 5.32)), ('B', '  43 ', 'THR', 0.050187206977854164, (-30.388999999999996, -15.131999999999993, -0.7190000000000001)), ('B', ' 189 ', 'GLU', 0.2833690925277986, (12.583999999999998, -3.751000000000001, -15.193)), ('B', ' 208 ', 'ASN', 0.12791307902342902, (-6.465, 3.251999999999997, -35.175)), ('C', '  31 ', 'LEU', 0.011996327523721697, (-19.276, 15.116999999999994, -63.29100000000001)), ('C', '  71 ', 'THR', 0.16679101141731625, (-45.57999999999998, 34.390999999999984, -26.552)), ('C', ' 168 ', 'VAL', 0.26011990368796895, (-33.358000000000004, 36.86699999999999, -50.528000000000006)), ('D', '  43 ', 'THR', 0.02447880688123405, (-25.034, 39.84699999999999, -65.321)), ('D', '  72 ', 'LEU', 0.01659620726757446, (-55.359999999999985, -2.233000000000001, -33.798)), ('D', ' 196 ', 'ARG', 0.0, (-36.210999999999984, 14.292999999999992, -47.31900000000002)), ('D', ' 196 ', 'ARG', 0.0, (-36.210999999999984, 14.292999999999992, -47.31900000000002))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2812253025213295, (-22.755, -7.758000000000001, -13.178000000000004))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -1.03, (-36.095, 15.715, -49.938)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -1.03, (-36.095, 15.715, -49.938)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.933, (-34.987, 15.731, -50.417)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.933, (-34.987, 15.731, -50.417)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.856, (-35.915, 15.737, -50.408)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.856, (-35.915, 15.737, -50.408)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.836, (-35.007, 18.591, -33.444)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.817, (-6.176, -19.052, -22.836)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.812, (-49.455, -4.22, -51.292)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.784, (-7.612, 4.33, -25.261)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.742, (-21.646, 25.5, -36.358)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.686, (-42.454, 16.713, -41.036)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.673, (-35.503, 14.787, -49.648)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.673, (-35.503, 14.787, -49.648)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.641, (-51.207, -6.415, -44.105)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.636, (7.802, 0.394, -15.11)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.552, (-5.745, 10.774, -22.874)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.531, (-36.191, 19.242, -33.458)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.528, (-6.653, -1.21, -10.451)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.521, (-47.833, 19.706, -49.754)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.515, (-43.14, 17.271, -32.098)), (' C 116  GLU  O  ', ' C 168  VAL HG11', -0.508, (-32.824, 36.305, -46.222)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.507, (-39.045, 21.114, -37.462)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.499, (-46.581, 11.718, -43.921)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.486, (-49.658, 8.165, -61.815)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.483, (-42.974, 13.984, -43.21)), (' D 208  ASN  OD1', ' D 415  HOH  O  ', -0.481, (-46.449, 14.725, -30.292)), (' C  38  ASP  HB2', ' D 167  PHE  CE2', -0.477, (-26.566, -4.87, -58.624)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.463, (-32.027, 14.636, -51.63)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.463, (-32.027, 14.636, -51.63)), (' B  18  ILE HD12', ' B  35  THR HG22', -0.461, (-29.378, -11.116, 1.356)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.455, (-40.69, 18.997, -40.736)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.449, (-48.707, 27.788, -35.282)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.445, (-10.749, -4.441, -12.759)), (' B  80  VAL  HB ', ' B 168  VAL HG13', -0.441, (5.02, 8.223, -8.664)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.43, (5.225, 2.724, -10.159)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.423, (2.754, 23.593, -26.042)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.421, (-20.169, -4.714, -35.628)), (' A 104  THR HG22', ' A 107  ALA  CB ', -0.413, (-6.241, -21.042, -22.128)), (' B 179  LEU  CD2', ' B 205  LYS  HE2', -0.406, (-0.654, -1.935, -28.062)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.406, (10.656, -1.762, -14.665)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.405, (-5.966, -19.822, -22.302)), (' C 134  PRO  HB2', ' D  84  ARG  HG3', -0.405, (-28.341, 7.549, -52.803)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.404, (-11.341, 19.719, -6.833)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.403, (-51.182, 18.769, -45.878))]
gui = coot_molprobity_todo_list_gui(data=data)
