# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.029339500376775154, (-14.006, -7.664999999999999, -27.082)), ('B', '  66 ', 'PRO', 0.04673881745620238, (-1.4840000000000004, 14.065999999999999, -17.012)), ('B', ' 161 ', 'LYS', 0.09898718767362236, (6.397, 17.528, -2.599999999999999)), ('C', '  24 ', 'SER', 0.02400316005385802, (-15.713999999999995, 17.126, -66.626)), ('C', '  66 ', 'PRO', 0.04456797488777723, (-35.86000000000001, 27.99399999999999, -38.17))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.932999999999997, 3.7030000000000003, -33.821)), ('D', ' 208 ', 'ASN', None, (-45.86000000000001, 18.310000000000002, -32.643))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0017544831544495435, (15.625000000000002, -0.32299999999999973, -2.23)), ('A', '  27 ', 'LYS', 0.022985123023666492, (-13.413000000000002, -18.233, 1.896)), ('A', '  27 ', 'LYS', 0.022985123023666492, (-13.413000000000002, -18.233, 1.896)), ('A', '  38 ', 'ASP', 0.1297550744173682, (11.072999999999997, 1.9479999999999995, 3.3409999999999997)), ('A', '  43 ', 'THR', 0.05847714492119849, (10.446000000000003, -0.4730000000000001, 8.917)), ('A', '  70 ', 'ARG', 0.020564527968098205, (-19.21, -6.823999999999996, -38.723)), ('A', ' 191 ', 'LEU', 0.003189251642722863, (-25.024000000000004, 2.435, -12.424)), ('B', '  31 ', 'LEU', 0.0, (-13.774000000000001, -7.051999999999997, 5.15)), ('B', '  43 ', 'THR', 0.02447880688123405, (-30.471000000000004, -15.178, -0.87)), ('B', ' 205 ', 'LYS', 0.0, (-3.5159999999999987, 1.849000000000002, -30.267)), ('C', '  31 ', 'LEU', 0.0, (-19.406999999999996, 14.896999999999998, -63.314)), ('C', '  53 ', 'THR', 0.23730181448292278, (-15.880000000000003, 22.769, -52.58)), ('C', '  53 ', 'THR', 0.23730181448292278, (-15.880000000000003, 22.769, -52.58)), ('C', '  53 ', 'THR', 0.20498987336915975, (-15.895000000000001, 22.907, -52.678)), ('C', '  53 ', 'THR', 0.20498987336915975, (-15.895000000000001, 22.907, -52.678)), ('C', ' 164 ', 'ASP', 0.004768512572598504, (-22.94, 40.206999999999994, -52.887999999999984)), ('D', '  23 ', 'ILE', 0.28862597265024015, (-20.584, 21.92, -71.062)), ('D', '  31 ', 'LEU', 0.014701053414698878, (-23.273, 20.047000000000004, -66.993)), ('D', '  31 ', 'LEU', 0.014657714005854687, (-23.271999999999988, 20.047000000000004, -66.993)), ('D', '  43 ', 'THR', 0.021758937509730458, (-25.000999999999998, 39.70099999999999, -65.547)), ('D', '  45 ', 'THR', 0.008159601566148922, (-23.096, 32.939, -64.217)), ('D', '  70 ', 'ARG', 0.009112776106363943, (-53.528, -2.2939999999999974, -39.967999999999996)), ('D', ' 164 ', 'ASP', 0.014728648779011958, (-32.342, -5.723999999999997, -63.72399999999998)), ('D', ' 164 ', 'ASP', 0.016380402531158023, (-32.342, -5.723999999999997, -63.72399999999998))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.26927463726136147, (10.252999999999997, 2.9979999999999993, 4.131)), ('B', '  82 ', 'GLN', ' ', 0.2791032215156559, (5.150000000000001, 4.027, -5.728))]
data['probe'] = [(' A 104  THR HG23', ' A 107  ALA  H  ', -0.824, (-6.101, -19.322, -22.876)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.795, (-43.214, 17.278, -32.379)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.771, (-35.189, 18.399, -33.34)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.722, (-51.276, -6.496, -44.258)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.719, (-49.611, -4.157, -51.382)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.703, (-20.804, 25.356, -36.394)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.691, (-7.286, 4.254, -25.115)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.664, (-35.988, 19.022, -33.802)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.641, (-34.772, 12.36, -50.112)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.637, (8.433, 0.63, -14.579)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.608, (-34.576, 12.032, -49.856)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.6, (-42.535, 16.426, -40.954)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.593, (-10.959, 19.433, -7.051)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.591, (-47.581, 19.414, -50.149)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.582, (-14.457, 11.269, -24.411)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.581, (-50.055, 7.964, -62.43)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.575, (-26.609, -0.296, -37.712)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.574, (-26.269, 31.896, -47.163)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.568, (-20.326, -4.534, -35.866)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.561, (-26.243, 32.924, -48.414)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.544, (2.4, 23.56, -26.246)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.531, (-27.923, 42.775, -65.98)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.526, (9.328, -7.086, -12.108)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.526, (-5.046, -4.22, -29.44)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.521, (-53.848, -4.096, -36.154)), (' A 167 DPHE  CE1', ' B  39 DPRO  HD2', -0.52, (-29.258, -14.035, -9.937)), (' A 167 CPHE  CE1', ' B  39 CPRO  HD2', -0.52, (-29.258, -14.035, -9.937)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.508, (-32.452, 14.302, -51.361)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.504, (-32.172, 20.308, -50.108)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.503, (-43.375, 13.913, -42.786)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.492, (-10.472, -4.334, -13.554)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.489, (-32.137, 14.621, -51.658)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.48, (-4.355, -13.565, -7.482)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.479, (-48.418, 27.821, -35.233)), (' C  55 CLYS  CB ', ' C  57 CGLN  HG3', -0.476, (-13.564, 20.491, -46.274)), (' C  55 DLYS  CB ', ' C  57 DGLN  HG3', -0.476, (-13.564, 20.491, -46.274)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.466, (-39.614, 21.111, -37.655)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.464, (2.646, 23.618, -26.309)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.455, (10.206, 18.099, -8.867)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.454, (-26.816, 5.237, -43.139)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.451, (-20.827, -5.647, -52.454)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.443, (-5.936, -19.991, -22.342)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.433, (-6.458, 6.711, -22.441)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.433, (-22.113, -4.648, -41.279)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.432, (-55.275, -3.587, -44.581)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.429, (7.286, 1.829, -16.818)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.423, (-46.429, 11.415, -43.506)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.419, (-43.385, 28.995, -53.021)), (' A 167 DPHE  CE1', ' B  39 DPRO  CD ', -0.412, (-29.456, -13.619, -9.671)), (' A 167 CPHE  CE1', ' B  39 CPRO  CD ', -0.412, (-29.456, -13.619, -9.671)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.408, (-50.715, 13.928, -46.647)), (' A  65  ILE HD12', ' B 202  LEU HD13', -0.407, (-7.063, -3.716, -24.017)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.404, (-40.604, 18.791, -40.651)), (' A 104  THR HG22', ' A 107  ALA  CB ', -0.403, (-6.274, -21.184, -21.851))]
gui = coot_molprobity_todo_list_gui(data=data)
