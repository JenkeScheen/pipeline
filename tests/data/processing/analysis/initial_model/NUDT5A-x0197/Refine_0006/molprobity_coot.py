# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.029332470631893332, (-14.005, -7.665999999999997, -27.07999999999999)), ('B', '  66 ', 'PRO', 0.046143105615352516, (-1.483999999999999, 14.066000000000003, -17.014)), ('C', '  24 ', 'SER', 0.02359616811857152, (-15.712, 17.141, -66.61699999999999)), ('C', '  66 ', 'PRO', 0.044269062808608026, (-35.858000000000004, 27.994, -38.168))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.9319999999999995, 3.688999999999999, -33.825)), ('D', ' 208 ', 'ASN', None, (-45.870000000000005, 18.295999999999992, -32.651))]
data['rota'] = [('A', '  14 ', 'LYS', 0.001384551176970336, (15.622999999999996, -0.3049999999999998, -2.226)), ('A', '  27 ', 'LYS', 0.23277350206323613, (-13.380999999999998, -18.251, 1.8969999999999998)), ('A', '  27 ', 'LYS', 0.23277350206323613, (-13.380999999999998, -18.251, 1.8969999999999998)), ('A', '  38 ', 'ASP', 0.13347814757108709, (11.074, 1.9469999999999998, 3.3429999999999995)), ('A', '  43 ', 'THR', 0.0565853838008628, (10.450000000000001, -0.47600000000000064, 8.92)), ('A', '  70 ', 'ARG', 0.021549732731531244, (-19.21, -6.826999999999998, -38.721)), ('A', ' 191 ', 'LEU', 0.0030952595785941014, (-25.025, 2.439, -12.428999999999997)), ('B', '  31 ', 'LEU', 0.0, (-13.771000000000003, -7.055, 5.149)), ('B', '  38 ', 'ASP', 0.12046819616738237, (-30.251, -12.754, -6.368)), ('B', '  43 ', 'THR', 0.022729886385898523, (-30.474, -15.177, -0.8789999999999998)), ('C', '  29 ', 'VAL', 0.25484851904150213, (-19.27199999999999, 20.98699999999999, -59.768999999999984)), ('C', '  31 ', 'LEU', 0.0, (-19.404000000000003, 14.900999999999998, -63.309)), ('C', '  53 ', 'THR', 0.1690874786796037, (-15.901999999999997, 22.908, -52.675)), ('C', '  53 ', 'THR', 0.1690874786796037, (-15.901999999999997, 22.908, -52.675)), ('C', ' 164 ', 'ASP', 0.004810287833998628, (-22.962000000000003, 40.256999999999984, -52.895)), ('D', '  23 ', 'ILE', 0.2417212269152446, (-20.575999999999993, 21.90999999999999, -71.069)), ('D', '  31 ', 'LEU', 0.019596787290299213, (-23.281999999999996, 20.043999999999997, -66.993)), ('D', '  31 ', 'LEU', 0.01960385030883738, (-23.279999999999994, 20.043, -66.994)), ('D', '  43 ', 'THR', 0.021758937509730458, (-24.997000000000007, 39.69699999999999, -65.55)), ('D', '  45 ', 'THR', 0.008159601566148922, (-23.091000000000005, 32.94299999999999, -64.207)), ('D', '  70 ', 'ARG', 0.002363234711991133, (-53.530000000000015, -2.296, -39.966)), ('D', ' 164 ', 'ASP', 0.020450268327432932, (-32.38799999999999, -5.8299999999999965, -63.721999999999994)), ('D', ' 164 ', 'ASP', 0.022747028647477827, (-32.38799999999999, -5.8299999999999965, -63.721999999999994))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.2696291947888303, (10.256999999999996, 2.9979999999999993, 4.131)), ('B', '  82 ', 'GLN', ' ', 0.27957240969046854, (5.163, 4.023999999999998, -5.718999999999999))]
data['probe'] = [(' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.958, (-43.126, 17.232, -32.543)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.826, (-5.584, -19.611, -22.592)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.77, (-35.196, 18.392, -33.337)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.713, (-51.292, -6.505, -44.263)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.706, (-49.611, -4.147, -51.38)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.689, (-20.803, 25.356, -36.395)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.687, (-7.289, 4.254, -25.117)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.669, (-36.074, 18.75, -33.579)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.637, (-34.775, 12.36, -50.11)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.61, (-34.589, 12.028, -49.855)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.602, (8.42, 0.638, -14.608)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.594, (-26.611, -0.293, -37.738)), (' C  55 CLYS  CB ', ' C  57 CGLN  HG3', -0.591, (-13.762, 20.526, -46.377)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.591, (-42.536, 16.421, -40.956)), (' C  55 DLYS  CB ', ' C  57 DGLN  HG3', -0.591, (-13.762, 20.526, -46.377)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.59, (-26.247, 32.926, -48.411)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.589, (-10.969, 19.431, -7.059)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.582, (-50.062, 7.963, -62.431)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.582, (-47.583, 19.405, -50.141)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.577, (-14.502, 11.871, -24.606)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.567, (-26.268, 31.897, -47.159)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.566, (-20.317, -4.541, -35.864)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.54, (2.408, 23.578, -26.245)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.539, (9.34, -7.078, -12.104)), (' A 167 DPHE  CE1', ' B  39 DPRO  HD2', -0.539, (-29.766, -13.945, -9.774)), (' A 167 CPHE  CE1', ' B  39 CPRO  HD2', -0.539, (-29.766, -13.945, -9.774)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.532, (-5.051, -4.223, -29.445)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.525, (-27.922, 42.785, -65.99)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.51, (-53.853, -4.099, -36.156)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.508, (-32.454, 14.298, -51.361)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.504, (-43.369, 13.913, -42.787)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.501, (-10.475, -4.344, -13.556)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.499, (-32.175, 20.294, -50.12)), (' D 164 CASP  O  ', ' E   2 CLIG  C  ', -0.498, (-31.406, -2.303, -63.229)), (' D 164 DASP  O  ', ' E   2 DLIG  C  ', -0.496, (-31.407, -2.305, -63.231)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.485, (-32.147, 14.642, -51.655)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.475, (-48.413, 27.823, -35.235)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.474, (-4.425, -13.816, -7.495)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.473, (-39.619, 21.115, -37.656)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.468, (10.204, 18.09, -8.863)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.462, (-26.457, 5.381, -43.392)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.46, (-20.821, -5.646, -52.451)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.453, (2.653, 23.64, -26.308)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.444, (-5.931, -19.995, -22.356)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.439, (-22.11, -4.653, -41.275)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.43, (-6.46, 6.709, -22.441)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.415, (-55.282, -3.585, -44.576)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.414, (7.268, 1.849, -16.829)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.413, (-43.38, 28.997, -53.028)), (' A  65  ILE HD12', ' B 202  LEU HD13', -0.41, (-7.057, -3.723, -24.023)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.407, (-50.739, 13.931, -46.643)), (' A 167 DPHE  CE1', ' B  39 DPRO  CD ', -0.406, (-29.615, -13.732, -9.765)), (' A 167 CPHE  CE1', ' B  39 CPRO  CD ', -0.406, (-29.615, -13.732, -9.765)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.405, (-40.608, 18.792, -40.646)), (' D  49  VAL  O  ', ' D 137  SER  HA ', -0.404, (-29.09, 20.495, -62.339)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.403, (-46.434, 11.431, -43.523)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.401, (-10.668, 13.838, -22.158))]
gui = coot_molprobity_todo_list_gui(data=data)
