# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.031402195552462896, (-14.012999999999998, -7.663999999999997, -27.086999999999996)), ('B', '  66 ', 'PRO', 0.049409806464004474, (-1.4840000000000009, 14.054999999999998, -16.999)), ('B', ' 161 ', 'LYS', 0.07986399122195634, (6.355, 17.557, -2.6289999999999996)), ('C', '  24 ', 'SER', 0.033224300302040884, (-15.750999999999996, 17.066000000000006, -66.657)), ('C', '  66 ', 'PRO', 0.045298328169865454, (-35.86300000000001, 28.004, -38.17)), ('D', ' 190 ', 'HIS', 0.045594923572923975, (-22.271, 2.2750000000000012, -42.611999999999995))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.941999999999997, 3.7090000000000014, -33.839)), ('D', '  53 ', 'THR', None, (-33.462, 12.869000000000002, -69.274))]
data['rota'] = [('A', '  14 ', 'LYS', 0.04741180007664391, (15.639000000000005, -0.3739999999999999, -2.237)), ('A', '  38 ', 'ASP', 0.13599063288264443, (11.074, 1.959, 3.328)), ('A', '  43 ', 'THR', 0.06582746034161102, (10.423, -0.4650000000000001, 8.925)), ('A', '  70 ', 'ARG', 0.029445063935096005, (-19.207, -6.818999999999998, -38.73)), ('A', ' 191 ', 'LEU', 0.00022093558729155448, (-25.009, 2.4499999999999997, -12.413999999999996)), ('B', '  31 ', 'LEU', 0.00018303050595129517, (-13.771, -7.042999999999999, 5.147)), ('B', '  38 ', 'ASP', 0.10911212070145337, (-30.26100000000001, -12.757999999999996, -6.3629999999999995)), ('B', '  43 ', 'THR', 0.027025613774061624, (-30.468999999999994, -15.173999999999994, -0.8559999999999999)), ('B', ' 189 ', 'GLU', 0.23873004698001546, (12.438, -3.6899999999999986, -15.320999999999998)), ('B', ' 205 ', 'LYS', 0.06653631333645725, (-3.5179999999999993, 1.8450000000000015, -30.264999999999993)), ('B', ' 208 ', 'ASN', 0.2918620507748329, (-6.507999999999998, 2.9779999999999998, -35.056)), ('C', '  31 ', 'LEU', 0.0, (-19.426, 14.890000000000006, -63.329)), ('C', '  45 ', 'THR', 0.2018387977414699, (-21.507999999999992, 1.7260000000000044, -64.204)), ('C', '  53 ', 'THR', 0.11140258704060593, (-15.913, 22.766999999999996, -52.677)), ('C', ' 164 ', 'ASP', 0.021183793465658192, (-22.839, 40.05699999999999, -52.87799999999999)), ('D', '  31 ', 'LEU', 0.0006514150165026581, (-23.299, 20.075999999999997, -67.004)), ('D', '  31 ', 'LEU', 0.0006514150165026581, (-23.299, 20.075999999999997, -67.004)), ('D', '  43 ', 'THR', 0.021758937509730458, (-25.02699999999999, 39.70099999999999, -65.58)), ('D', '  45 ', 'THR', 0.009853085312942446, (-23.138000000000005, 32.957, -64.245)), ('D', '  70 ', 'ARG', 0.23701553629510969, (-53.50500000000001, -2.285999999999997, -39.952999999999996)), ('D', '  72 ', 'LEU', 0.1183346442742345, (-55.394000000000005, -2.241, -33.891))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.2641001970114917, (10.237, 3.000999999999999, 4.117)), ('A', '  82 ', 'GLN', ' ', 0.25204268106507466, (-22.82400000000001, -7.9579999999999975, -13.251999999999997)), ('B', '  82 ', 'GLN', ' ', 0.27959902621702737, (5.115, 4.014999999999999, -5.7429999999999986)), ('C', ' 190 ', 'HIS', ' ', 0.2604287852598245, (-44.19499999999999, 30.141999999999985, -61.914))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.87, (-35.545, 15.87, -50.376)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.87, (-35.545, 15.87, -50.376)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.815, (-5.594, -19.61, -22.569)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.777, (-35.169, 18.406, -33.341)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.775, (-34.188, 12.095, -49.749)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.775, (-34.188, 12.095, -49.749)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.773, (-35.774, 15.007, -49.714)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.773, (-35.774, 15.007, -49.714)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.753, (-49.632, -4.168, -51.393)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.737, (-20.945, 25.159, -36.654)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.724, (-51.242, -6.488, -44.22)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.717, (-7.298, 4.245, -25.119)), (' A 167  PHE  CE1', ' B  39  PRO  HD2', -0.698, (-29.957, -14.477, -9.568)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.684, (8.486, 0.427, -14.769)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.669, (-24.487, 1.98, -43.107)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.622, (-20.543, -4.463, -35.799)), (' D 208  ASN  OD1', ' D 415  HOH  O  ', -0.622, (-46.283, 14.529, -30.43)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.616, (-42.531, 16.437, -40.95)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.609, (-26.562, -0.375, -37.665)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.607, (-47.591, 19.411, -50.155)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.606, (-36.091, 18.733, -33.564)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.593, (-10.927, 19.439, -7.033)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.582, (-14.388, 11.25, -24.363)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.563, (-50.033, 7.963, -62.428)), (' A 167  PHE  CE1', ' B  39  PRO  CD ', -0.541, (-29.794, -13.726, -10.045)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.539, (-53.953, -4.329, -36.415)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.539, (-32.217, 20.451, -50.271)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.513, (2.631, 23.446, -26.097)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.506, (-32.454, 14.317, -51.366)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.503, (-4.812, -4.024, -29.445)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.501, (-43.36, 13.907, -42.781)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.499, (9.56, -7.063, -11.835)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.493, (-32.302, 14.837, -51.688)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.489, (-33.329, -11.845, -11.763)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.483, (-4.444, -13.767, -7.474)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.482, (-46.25, 11.391, -43.695)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.481, (-36.365, 15.574, -50.297)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.481, (-36.365, 15.574, -50.297)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.48, (-48.437, 27.833, -35.25)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.475, (-26.738, 4.998, -43.156)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.473, (-28.03, 42.757, -65.746)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.473, (6.972, 1.655, -16.504)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.464, (-55.405, -3.811, -44.586)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.463, (2.625, 23.588, -26.347)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.458, (-10.557, -4.108, -13.525)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.44, (-39.318, 21.119, -37.234)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.44, (-5.941, -19.994, -22.333)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.433, (-6.469, 6.689, -22.434)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.429, (-6.174, 10.589, -22.595)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.416, (-49.606, -1.667, -39.564)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.415, (-54.713, -2.698, -45.092)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.411, (-26.428, 32.003, -47.005)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.408, (-4.467, -0.231, -11.316)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.406, (-35.616, 14.798, -49.723)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.406, (-35.616, 14.798, -49.723))]
gui = coot_molprobity_todo_list_gui(data=data)
