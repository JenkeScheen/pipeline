# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.02945217723059, (-13.995999999999999, -7.670999999999996, -27.088)), ('B', '  66 ', 'PRO', 0.04077272666109016, (-1.4890000000000017, 14.070999999999998, -17.022)), ('C', '  24 ', 'SER', 0.02362621469083749, (-15.764999999999997, 17.048000000000002, -66.676)), ('C', '  24 ', 'SER', 0.024920761343936157, (-15.765, 17.047000000000004, -66.675)), ('C', '  66 ', 'PRO', 0.03890413367953566, (-35.855000000000004, 27.975999999999996, -38.174))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.955999999999998, 3.7010000000000014, -33.847))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.637000000000004, -0.3239999999999998, -2.25)), ('A', '  27 ', 'LYS', 0.2736643569256656, (-13.382, -18.247999999999994, 1.9029999999999996)), ('A', '  27 ', 'LYS', 0.2736643569256656, (-13.382, -18.247999999999994, 1.9029999999999996)), ('A', '  38 ', 'ASP', 0.14135471001755354, (11.077000000000004, 1.9559999999999995, 3.328)), ('A', '  43 ', 'THR', 0.02991853980347514, (10.457999999999998, -0.5150000000000003, 8.891)), ('A', '  70 ', 'ARG', 0.03413119000102643, (-19.215999999999998, -6.825999999999996, -38.716)), ('A', ' 191 ', 'LEU', 0.0006632985402748778, (-25.076000000000008, 2.539999999999999, -12.529)), ('A', ' 191 ', 'LEU', 0.0006632985402748778, (-25.076000000000008, 2.539999999999999, -12.529)), ('A', ' 191 ', 'LEU', 0.00293870561603147, (-25.034000000000006, 2.376, -12.3)), ('A', ' 191 ', 'LEU', 0.00293870561603147, (-25.034000000000006, 2.376, -12.3)), ('B', '  31 ', 'LEU', 0.0, (-13.774, -7.049, 5.156999999999999)), ('B', '  38 ', 'ASP', 0.15447325981538193, (-30.258, -12.756999999999996, -6.368999999999998)), ('B', '  43 ', 'THR', 0.02179072928411226, (-30.465, -15.169999999999996, -0.89)), ('C', '  29 ', 'VAL', 0.23131599283222581, (-19.270000000000003, 21.012999999999998, -59.755)), ('C', '  31 ', 'LEU', 0.0, (-19.415, 14.907999999999998, -63.29699999999999)), ('C', '  53 ', 'THR', 0.10710616113172812, (-15.906999999999996, 22.914, -52.682)), ('C', '  53 ', 'THR', 0.10710616113172812, (-15.906999999999996, 22.914, -52.682)), ('C', ' 164 ', 'ASP', 0.007889916201389447, (-22.972, 40.27699999999999, -52.937999999999995)), ('D', '  23 ', 'ILE', 0.2270604687053099, (-20.568, 21.915, -71.082)), ('D', '  31 ', 'LEU', 0.030450951738948098, (-23.244999999999994, 20.104, -66.981)), ('D', '  31 ', 'LEU', 0.030353921870191872, (-23.244, 20.103, -66.982)), ('D', '  43 ', 'THR', 0.0258387386566028, (-25.028000000000006, 39.67199999999998, -65.542)), ('D', '  45 ', 'THR', 0.008159601566148922, (-23.097999999999992, 32.942, -64.194)), ('D', '  70 ', 'ARG', 0.0016994587420716646, (-53.502, -2.3069999999999995, -39.95)), ('D', '  72 ', 'LEU', 0.14787620314405425, (-55.39299999999999, -2.246999999999998, -33.886)), ('D', ' 149 ', 'ASN', 0.272383240341649, (-54.013000000000005, -1.5399999999999983, -46.321)), ('D', ' 164 ', 'ASP', 0.09516784229403907, (-32.377, -5.801999999999993, -63.719)), ('D', ' 164 ', 'ASP', 0.10069614472676469, (-32.377, -5.801999999999993, -63.719))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.26455172648251246, (10.261000000000001, 3.0069999999999997, 4.12)), ('B', '  38 ', 'ASP', ' ', 0.25342635774988026, (-29.449, -14.081999999999997, -6.5)), ('B', '  82 ', 'GLN', ' ', 0.27943073271080343, (5.180000000000001, 4.031, -5.696))]
data['probe'] = [(' A 104  THR HG23', ' A 107  ALA  H  ', -0.844, (-6.111, -19.321, -22.872)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.792, (-35.357, 18.158, -33.316)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.789, (-43.192, 17.212, -32.356)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.789, (-43.192, 17.212, -32.356)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.702, (-51.305, -6.514, -44.253)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.688, (-7.303, 4.246, -25.109)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.686, (-20.803, 25.34, -36.394)), (' C  55 CLYS  CB ', ' C  57 CGLN  HG3', -0.686, (-13.801, 20.512, -46.261)), (' C  55 DLYS  CB ', ' C  57 DGLN  HG3', -0.686, (-13.801, 20.512, -46.261)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.656, (-36.077, 18.765, -33.57)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.64, (-34.751, 12.377, -50.093)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.632, (-26.556, -0.326, -37.779)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.627, (-20.496, -4.47, -35.797)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.619, (-42.55, 16.447, -40.952)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.613, (-34.32, 12.137, -49.823)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.595, (8.414, 0.613, -14.616)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.59, (-26.244, 32.944, -48.42)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.583, (-47.633, 19.408, -50.168)), (' A 167 DPHE  CE1', ' B  39 DPRO  HD2', -0.565, (-29.435, -14.045, -10.1)), (' A 167 CPHE  CE1', ' B  39 CPRO  HD2', -0.565, (-29.435, -14.045, -10.1)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.562, (9.363, -7.086, -12.109)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.559, (-49.874, 8.142, -62.424)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.555, (-5.067, -4.215, -29.441)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.551, (-11.003, 19.472, -7.077)), (' D 120  LYS  H  ', ' D 155 BASN HD21', -0.55, (-50.05, -3.738, -51.329)), (' D 120  LYS  H  ', ' D 155 AASN HD21', -0.538, (-49.668, -3.574, -51.695)), (' D 120  LYS  H  ', ' D 155 CASN HD21', -0.538, (-49.667, -3.575, -51.696)), (' D 120  LYS  H  ', ' D 155 DASN HD21', -0.538, (-49.667, -3.575, -51.696)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.515, (-28.001, 42.75, -66.002)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.512, (-20.908, -5.635, -52.698)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.512, (2.376, 23.581, -26.272)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.509, (-14.534, 11.888, -24.617)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.503, (10.228, 17.878, -9.04)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.496, (-32.206, 20.266, -50.128)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.493, (-43.379, 13.909, -42.784)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.482, (-10.549, -4.118, -13.525)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.479, (-39.299, 21.092, -37.24)), (' A 180  GLN  HG3', ' A 468  HOH  O  ', -0.477, (-18.099, 10.439, -26.996)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.477, (-32.445, 14.296, -51.373)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.476, (-26.612, 5.389, -43.518)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.475, (-48.696, 27.863, -35.337)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.474, (-4.437, -13.838, -7.517)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.461, (-32.136, 14.632, -51.637)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.458, (-5.925, -19.989, -22.357)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.448, (-22.337, -4.497, -40.919)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.444, (-55.278, -3.58, -44.557)), (' A 191 BLEU  C  ', ' A 191 BLEU  CD2', -0.437, (-23.774, 2.936, -14.05)), (' A 191 ALEU  C  ', ' A 191 ALEU  CD2', -0.437, (-23.774, 2.936, -14.05)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.427, (-6.473, 6.699, -22.433)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.424, (-6.166, 10.586, -22.593)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.424, (-53.96, -4.32, -36.166)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.423, (-54.746, -2.947, -45.098)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.421, (6.986, 1.912, -16.477)), (' B 165  GLY  HA2', ' B 167  PHE  CZ ', -0.419, (7.853, 7.234, 3.532)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.419, (-8.949, 1.683, -24.805)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.413, (-19.916, -6.746, -34.156)), (' A 104  THR HG22', ' A 107  ALA  CB ', -0.412, (-6.278, -21.174, -21.862)), (' D  49  VAL  O  ', ' D 137  SER  HA ', -0.412, (-29.086, 20.506, -62.341)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.412, (-50.774, 13.937, -46.626)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.407, (-25.752, 31.995, -47.135)), (' A  65  ILE HD12', ' B 202  LEU HD13', -0.406, (-7.053, -3.713, -24.017)), (' A 191 ALEU  C  ', ' A 191 ALEU HD22', -0.402, (-23.915, 3.261, -13.616)), (' A 191 BLEU  C  ', ' A 191 BLEU HD22', -0.402, (-23.915, 3.261, -13.616)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.401, (-56.769, -4.116, -43.831)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.401, (2.604, 23.647, -26.339))]
gui = coot_molprobity_todo_list_gui(data=data)
