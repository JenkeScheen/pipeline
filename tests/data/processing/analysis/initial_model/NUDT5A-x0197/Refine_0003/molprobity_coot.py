# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03127624774126429, (-14.011999999999997, -7.662999999999997, -27.088)), ('B', '  66 ', 'PRO', 0.0489630728249182, (-1.4840000000000013, 14.054999999999994, -17.000999999999998)), ('B', ' 161 ', 'LYS', 0.0744253657999923, (6.351, 17.558999999999994, -2.6299999999999994)), ('C', '  24 ', 'SER', 0.03363089466644628, (-15.751000000000001, 17.064, -66.66)), ('C', '  66 ', 'PRO', 0.04539234959531905, (-35.862000000000016, 28.005, -38.17)), ('D', ' 190 ', 'HIS', 0.04357331266591767, (-22.27199999999999, 2.2730000000000006, -42.611999999999995))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.941, 3.708000000000001, -33.837)), ('D', '  53 ', 'THR', None, (-33.46, 12.879, -69.274))]
data['rota'] = [('A', '  14 ', 'LYS', 0.03773331487667098, (15.641000000000002, -0.3749999999999999, -2.234)), ('A', '  38 ', 'ASP', 0.13905840420417687, (11.074, 1.959999999999999, 3.328)), ('A', '  43 ', 'THR', 0.05972245314673074, (10.423, -0.4640000000000002, 8.928)), ('A', '  70 ', 'ARG', 0.02981533116897979, (-19.208, -6.817999999999998, -38.728)), ('A', ' 191 ', 'LEU', 0.00014895734116414507, (-25.012, 2.449, -12.416)), ('B', '  31 ', 'LEU', 0.0001484110419935841, (-13.773, -7.042999999999999, 5.147)), ('B', '  38 ', 'ASP', 0.09705568666772289, (-30.264000000000014, -12.757999999999996, -6.3629999999999995)), ('B', '  43 ', 'THR', 0.026859470711758045, (-30.47, -15.175999999999995, -0.857)), ('B', ' 189 ', 'GLU', 0.24743603135839837, (12.437000000000003, -3.685999999999998, -15.320999999999998)), ('B', ' 205 ', 'LYS', 0.06891056434142227, (-3.518999999999999, 1.844000000000002, -30.264999999999993)), ('C', '  31 ', 'LEU', 0.0, (-19.424, 14.887, -63.32799999999999)), ('C', '  45 ', 'THR', 0.2127954636833151, (-21.506999999999998, 1.7270000000000003, -64.205)), ('C', '  53 ', 'THR', 0.11231081007903032, (-15.914000000000001, 22.76899999999999, -52.67999999999999)), ('C', ' 164 ', 'ASP', 0.019282747309846755, (-22.832999999999995, 40.05399999999999, -52.881)), ('D', '  31 ', 'LEU', 0.0007298733929556303, (-23.302, 20.077, -67.005)), ('D', '  31 ', 'LEU', 0.0007298733929556303, (-23.302, 20.077, -67.005)), ('D', '  43 ', 'THR', 0.021758937509730458, (-25.031, 39.702, -65.579)), ('D', '  45 ', 'THR', 0.01430364745757836, (-23.138000000000012, 32.95599999999999, -64.24)), ('D', '  70 ', 'ARG', 0.224485771239231, (-53.50700000000001, -2.2839999999999967, -39.952999999999996)), ('D', '  72 ', 'LEU', 0.12952095996581112, (-55.392999999999994, -2.2399999999999993, -33.89))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.2640575335468195, (10.238, 3.004, 4.115)), ('A', '  82 ', 'GLN', ' ', 0.2507294299016172, (-22.827, -7.959999999999997, -13.251999999999997)), ('B', '  82 ', 'GLN', ' ', 0.280106339134787, (5.116999999999998, 4.016, -5.740999999999999)), ('C', ' 190 ', 'HIS', ' ', 0.26257695020264854, (-44.19500000000001, 30.13199999999999, -61.913))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.88, (-36.089, 15.255, -50.051)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.88, (-36.089, 15.255, -50.051)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.821, (-6.102, -19.326, -22.875)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.781, (-35.171, 18.408, -33.341)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.777, (-35.769, 15.0, -49.703)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.777, (-35.769, 15.0, -49.703)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.772, (-34.191, 12.096, -49.749)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.772, (-34.191, 12.096, -49.749)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.757, (-49.634, -4.17, -51.392)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.735, (-20.946, 25.159, -36.655)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.718, (-51.245, -6.485, -44.221)), (' A 167  PHE  CE1', ' B  39  PRO  HD2', -0.714, (-29.929, -14.221, -9.563)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.714, (-7.297, 4.248, -25.12)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.7, (8.49, 0.425, -14.766)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.67, (-24.495, 1.989, -43.105)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.622, (-20.223, -4.52, -36.043)), (' D 208  ASN  OD1', ' D 415  HOH  O  ', -0.622, (-46.277, 14.528, -30.428)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.621, (-26.559, -0.375, -37.672)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.619, (-42.532, 16.44, -40.948)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.61, (-47.593, 19.414, -50.158)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.605, (-36.092, 18.734, -33.565)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.591, (-10.934, 19.432, -7.035)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.583, (-14.393, 11.252, -24.368)), (' A 167  PHE  CE1', ' B  39  PRO  CD ', -0.56, (-29.824, -13.718, -10.05)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.554, (-49.86, 8.154, -62.418)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.54, (-53.954, -4.328, -36.416)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.539, (-32.218, 20.449, -50.273)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.518, (2.631, 23.443, -26.104)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.505, (-32.454, 14.315, -51.367)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.502, (-43.361, 13.908, -42.779)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.5, (-4.812, -4.025, -29.446)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.497, (9.559, -7.058, -11.832)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.493, (-36.361, 15.568, -50.284)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.493, (-36.361, 15.568, -50.284)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.493, (-32.298, 14.83, -51.686)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.491, (-33.334, -11.851, -11.763)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.485, (-46.251, 11.389, -43.695)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.481, (-48.437, 27.836, -35.253)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.481, (-4.445, -13.767, -7.473)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.475, (6.975, 1.654, -16.5)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.474, (-26.735, 5.0, -43.156)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.473, (-55.408, -3.806, -44.584)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.471, (2.625, 23.58, -26.354)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.468, (-28.032, 42.751, -65.744)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.459, (-10.558, -4.11, -13.524)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.444, (-39.317, 21.12, -37.233)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.441, (-5.94, -19.994, -22.336)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.434, (-6.468, 6.692, -22.435)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.43, (-6.177, 10.587, -22.596)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.428, (-54.738, -2.947, -45.103)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.411, (-49.608, -1.671, -39.559)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.409, (-4.466, -0.233, -11.317)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.406, (-35.611, 14.791, -49.712)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.406, (-35.611, 14.791, -49.712)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.404, (-26.428, 32.0, -47.007)), (' B 179  LEU  CD2', ' B 205  LYS  HE2', -0.404, (-1.135, -1.834, -28.399))]
gui = coot_molprobity_todo_list_gui(data=data)
