# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.029987276231086914, (-13.994999999999997, -7.673999999999998, -27.090999999999994)), ('B', '  66 ', 'PRO', 0.037994816098116065, (-1.4900000000000002, 14.056999999999999, -17.029)), ('C', '  66 ', 'PRO', 0.03764896673999771, (-35.85000000000001, 27.972, -38.172))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.642000000000003, -0.34899999999999987, -2.268)), ('A', '  38 ', 'ASP', 0.15050392458047657, (11.059999999999999, 1.9669999999999996, 3.3409999999999997)), ('A', '  43 ', 'THR', 0.021863041473437896, (10.459, -0.5379999999999998, 8.865)), ('A', '  70 ', 'ARG', 0.05759395827394904, (-19.236000000000004, -6.8279999999999985, -38.703)), ('A', ' 191 ', 'LEU', 0.0005892498909903555, (-25.067000000000004, 2.4819999999999998, -12.642)), ('A', ' 191 ', 'LEU', 0.0005892498909903555, (-25.067000000000004, 2.4819999999999998, -12.642)), ('A', ' 191 ', 'LEU', 0.0027429230446542364, (-25.024, 2.3430000000000004, -12.310999999999996)), ('A', ' 191 ', 'LEU', 0.0027429230446542364, (-25.024, 2.3430000000000004, -12.310999999999996)), ('B', '  31 ', 'LEU', 0.0, (-13.766999999999998, -7.037000000000001, 5.163)), ('B', '  38 ', 'ASP', 0.17692956739048554, (-30.271, -12.754, -6.377)), ('B', '  43 ', 'THR', 0.021758937509730458, (-30.464999999999996, -15.175999999999997, -0.8889999999999998)), ('B', ' 208 ', 'ASN', 0.1022633118577855, (-9.530999999999999, 4.472, -35.615)), ('B', ' 208 ', 'ASN', 0.1022633118577855, (-9.530999999999999, 4.472, -35.615)), ('C', '  29 ', 'VAL', 0.24194765441343352, (-19.262999999999995, 21.011000000000003, -59.75999999999999)), ('C', '  31 ', 'LEU', 0.0, (-19.411, 14.902000000000003, -63.31099999999999)), ('C', '  53 ', 'THR', 0.11867897532781928, (-15.897000000000002, 22.868999999999993, -52.68099999999999)), ('C', '  53 ', 'THR', 0.11867897532781928, (-15.897000000000002, 22.868999999999993, -52.68099999999999)), ('C', ' 164 ', 'ASP', 0.03278372511203212, (-22.952000000000005, 40.293, -52.942)), ('D', '  23 ', 'ILE', 0.2984397140782602, (-20.574999999999996, 21.93099999999999, -71.049)), ('D', '  31 ', 'LEU', 0.032844047567864215, (-23.271000000000008, 20.1, -66.982)), ('D', '  31 ', 'LEU', 0.03290803461552841, (-23.271, 20.098999999999997, -66.982)), ('D', '  43 ', 'THR', 0.026982787966818415, (-25.03000000000001, 39.658000000000015, -65.529)), ('D', '  45 ', 'THR', 0.009308082069082037, (-23.113, 32.959, -64.184)), ('D', '  70 ', 'ARG', 0.0666752460560928, (-53.502999999999986, -2.3139999999999996, -39.963)), ('D', '  72 ', 'LEU', 0.031210078905650623, (-55.407, -2.256999999999999, -33.889)), ('D', ' 149 ', 'ASN', 0.26861747222675025, (-54.01, -1.5419999999999998, -46.299)), ('D', ' 208 ', 'ASN', 0.0027433440107136084, (-48.30999999999999, 19.851999999999993, -32.31)), ('D', ' 208 ', 'ASN', 0.0027433440107136084, (-48.30999999999999, 19.851999999999993, -32.31))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.2676700904287619, (10.247000000000002, 3.0229999999999997, 4.132)), ('A', '  82 ', 'GLN', ' ', 0.2545597305684526, (-22.835, -7.985999999999999, -13.224)), ('B', '  82 ', 'GLN', ' ', 0.282016093745921, (5.162000000000001, 4.022, -5.700999999999999))]
data['probe'] = [(' C  55 CLYS  CB ', ' C  57 CGLN  HG3', -0.965, (-14.053, 20.562, -46.274)), (' C  55 DLYS  CB ', ' C  57 DGLN  HG3', -0.965, (-14.053, 20.562, -46.274)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.849, (-5.437, -19.103, -22.568)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.801, (-35.38, 18.169, -33.273)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.75, (-51.319, -6.531, -44.226)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.717, (-49.638, -4.159, -51.381)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.691, (-20.799, 25.336, -36.387)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.674, (-36.062, 18.779, -33.571)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.666, (-7.288, 4.256, -25.115)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.664, (-26.483, -0.346, -37.806)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.656, (-26.202, 32.963, -48.4)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.651, (-34.751, 12.378, -50.084)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.643, (-20.139, -4.555, -35.995)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.643, (-34.327, 12.104, -49.81)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.626, (7.912, 0.454, -14.937)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.603, (-42.543, 16.433, -40.963)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.578, (-47.64, 19.417, -50.177)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.571, (-10.965, 19.487, -7.055)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.561, (9.372, -7.084, -12.094)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.552, (-49.573, 7.83, -62.177)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.546, (-5.053, -4.216, -29.441)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.545, (-18.545, -8.822, -42.762)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.538, (-28.017, 42.712, -65.981)), (' A 180  GLN  HG3', ' A 468  HOH  O  ', -0.532, (-18.272, 10.431, -27.388)), (' A 167 DPHE  CE1', ' B  39  PRO  HD2', -0.521, (-29.467, -14.224, -10.11)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.516, (-20.869, -5.608, -52.674)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.516, (2.589, 23.431, -26.116)), (' A 167 CPHE  CE1', ' B  39  PRO  HD2', -0.513, (-30.038, -14.316, -9.787)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.499, (-43.369, 13.905, -42.789)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.495, (-48.688, 27.856, -35.345)), (' D  70  ARG  HD2', ' D 404  HOH  O  ', -0.491, (-49.529, -1.568, -39.813)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.486, (-26.603, 5.391, -43.514)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.48, (10.141, 18.341, -9.216)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.479, (-10.553, -4.144, -13.513)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.475, (-39.62, 21.105, -37.664)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.472, (-4.425, -13.838, -7.519)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.472, (-32.195, 20.259, -50.163)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.472, (-5.719, -19.816, -22.6)), (' D 207  ALA  O  ', ' D 208 BASN  HB2', -0.471, (-47.121, 17.867, -32.142)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.467, (-14.512, 11.876, -24.613)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.464, (-25.742, 32.006, -47.133)), (' D 207  ALA  O  ', ' D 208 AASN  HB2', -0.457, (-46.627, 17.931, -32.129)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.456, (-32.271, 14.417, -51.225)), (' B 165  GLY  HA2', ' B 167  PHE  CZ ', -0.452, (7.852, 7.054, 3.535)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.446, (-22.34, -4.498, -40.915)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.444, (-53.95, -4.325, -36.16)), (' D 208 AASN  HA ', ' D 208 AASN HD22', -0.442, (-49.922, 19.776, -32.943)), (' D 208 BASN  HA ', ' D 208 BASN HD22', -0.442, (-49.922, 19.776, -32.943)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.437, (-6.588, 6.478, -22.782)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.436, (-32.143, 14.629, -51.627)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.434, (2.562, 23.555, -26.372)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.432, (-19.925, -6.807, -34.125)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.429, (-33.525, -11.796, -11.498)), (' A 104  THR HG22', ' A 107  ALA  CB ', -0.428, (-6.23, -21.149, -22.104)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.426, (-54.739, -2.954, -45.089)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.424, (-55.27, -3.579, -44.521)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.424, (-8.953, 1.679, -24.803)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.424, (-6.167, 10.583, -22.585)), (' D  49  VAL  O  ', ' D 137  SER  HA ', -0.423, (-29.089, 20.503, -62.357)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.421, (-50.679, 13.714, -46.242)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.41, (-56.774, -4.101, -43.813)), (' C  58  THR  CB ', ' C 142  HIS  NE2', -0.41, (-21.367, 17.355, -40.919)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.409, (-43.399, 28.941, -53.029)), (' D  38  ASP  HB2', ' D  39  PRO  CD ', -0.402, (-29.833, 40.096, -58.76))]
gui = coot_molprobity_todo_list_gui(data=data)
