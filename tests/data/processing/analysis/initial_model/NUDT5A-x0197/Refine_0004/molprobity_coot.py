# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03016783346089519, (-14.012999999999998, -7.667999999999997, -27.083999999999993)), ('B', '  66 ', 'PRO', 0.04677576625267726, (-1.4890000000000008, 14.062999999999999, -17.008)), ('B', ' 161 ', 'LYS', 0.08712851192282824, (6.372999999999998, 17.534, -2.6189999999999998)), ('C', '  24 ', 'SER', 0.028151253120497502, (-15.747, 17.103, -66.64)), ('C', '  66 ', 'PRO', 0.045410937021547824, (-35.857, 28.00099999999999, -38.171)), ('D', ' 190 ', 'HIS', 0.0006772848544101353, (-22.317999999999998, 2.2140000000000004, -42.580999999999996))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.927, 3.721000000000001, -33.824))]
data['rota'] = [('A', '  14 ', 'LYS', 0.013461348394594626, (15.637000000000004, -0.3409999999999998, -2.244)), ('A', '  38 ', 'ASP', 0.1212356823008499, (11.077000000000004, 1.9529999999999994, 3.328)), ('A', '  43 ', 'THR', 0.05883007844746572, (10.438999999999998, -0.45800000000000085, 8.921)), ('A', '  70 ', 'ARG', 0.022971324234650176, (-19.207, -6.8249999999999975, -38.728)), ('A', ' 191 ', 'LEU', 0.0016118156859336688, (-25.019999999999996, 2.4369999999999994, -12.417)), ('B', '  31 ', 'LEU', 0.0, (-13.765, -7.0509999999999975, 5.156)), ('B', '  38 ', 'ASP', 0.11378548744116893, (-30.264000000000003, -12.750999999999994, -6.3629999999999995)), ('B', '  43 ', 'THR', 0.0258387386566028, (-30.472000000000016, -15.175000000000002, -0.8659999999999999)), ('B', ' 205 ', 'LYS', 6.027309829382729e-05, (-3.5159999999999987, 1.849000000000002, -30.264999999999993)), ('B', ' 208 ', 'ASN', 0.2478352510686664, (-6.455999999999996, 2.9859999999999998, -35.028)), ('C', '  31 ', 'LEU', 0.0, (-19.417999999999996, 14.890000000000006, -63.31199999999999)), ('C', '  53 ', 'THR', 0.1293653649126273, (-15.911999999999997, 22.802, -52.667)), ('C', ' 164 ', 'ASP', 0.005425710953001485, (-22.90100000000001, 40.139, -52.898)), ('D', '  31 ', 'LEU', 0.004867484796752611, (-23.301, 20.052999999999997, -66.997)), ('D', '  31 ', 'LEU', 0.004906913279011109, (-23.300000000000004, 20.052999999999997, -66.997)), ('D', '  43 ', 'THR', 0.01981963505873108, (-25.011, 39.7, -65.567)), ('D', '  45 ', 'THR', 0.009673217976788544, (-23.123999999999995, 32.941, -64.236)), ('D', '  70 ', 'ARG', 0.09468180184959622, (-53.51900000000001, -2.2949999999999973, -39.962)), ('D', '  72 ', 'LEU', 0.20919376665008635, (-55.391999999999996, -2.2409999999999988, -33.887))]
data['cbeta'] = [('A', '  38 ', 'ASP', ' ', 0.2679158210248705, (10.249000000000002, 3.003, 4.116)), ('A', '  82 ', 'GLN', ' ', 0.2523339295635963, (-22.819000000000003, -7.9629999999999965, -13.243)), ('B', '  82 ', 'GLN', ' ', 0.27817413499834565, (5.14, 4.025000000000001, -5.740999999999999))]
data['probe'] = [(' A 104  THR HG23', ' A 107  ALA  H  ', -0.816, (-5.6, -19.608, -22.566)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.761, (-35.173, 18.404, -33.331)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.733, (-49.616, -4.159, -51.381)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.716, (-20.956, 25.157, -36.649)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.716, (-51.257, -6.48, -44.25)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.702, (-7.285, 4.254, -25.135)), (' A 167  PHE  CE1', ' B  39  PRO  HD2', -0.693, (-29.355, -14.023, -10.095)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.667, (-34.773, 12.349, -50.112)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.646, (8.44, 0.617, -14.548)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.645, (-26.611, -0.304, -37.68)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.642, (-36.092, 18.744, -33.557)), (' D 189  GLU  O  ', ' D 191  LEU  HG ', -0.64, (-25.291, 2.749, -42.096)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.632, (-34.334, 12.087, -49.842)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.62, (-10.914, 19.45, -7.035)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.611, (-42.537, 16.433, -40.944)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.601, (-47.598, 19.427, -50.172)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.599, (-14.453, 11.261, -24.396)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.592, (-20.305, -4.536, -35.844)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.571, (-50.057, 7.953, -62.425)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.564, (-24.462, 2.343, -42.87)), (' D 208  ASN  OD1', ' D 415  HOH  O  ', -0.557, (-46.074, 14.642, -30.209)), (' D 189  GLU  O  ', ' D 191  LEU  N  ', -0.555, (-24.78, 2.811, -42.734)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.545, (2.628, 23.437, -26.083)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.539, (-33.248, -11.797, -11.795)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.536, (-53.958, -4.332, -36.414)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.522, (-28.138, 42.879, -65.968)), (' A 167  PHE  CE1', ' B  39  PRO  CD ', -0.522, (-29.73, -13.614, -10.084)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.517, (-4.841, -4.035, -29.44)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.516, (-32.045, 20.616, -50.295)), (' C 112  GLU  OE2', ' C 401  HOH  O  ', -0.508, (-26.267, 31.89, -47.17)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.504, (-32.448, 14.309, -51.364)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.498, (-43.373, 13.916, -42.788)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.496, (9.614, -7.04, -11.842)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.487, (-4.428, -13.788, -7.483)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.484, (-32.266, 14.81, -51.654)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.482, (2.451, 23.676, -26.558)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.481, (-48.42, 27.812, -35.22)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.479, (-10.538, -4.081, -13.533)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.456, (-46.423, 11.389, -43.482)), (' B  92  ILE HD13', ' B 185  LEU HD13', -0.456, (6.996, 1.624, -16.504)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.453, (-55.266, -3.588, -44.598)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.45, (-26.809, 5.245, -43.142)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.447, (-39.321, 21.106, -37.232)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.437, (-5.947, -19.992, -22.33)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.433, (10.225, 18.114, -8.867)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.43, (-43.516, 17.359, -31.498)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.428, (-6.458, 6.699, -22.448)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.42, (-20.838, -5.644, -52.464)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.417, (-22.111, -4.643, -41.282)), (' A  65  ILE HD12', ' B 202  LEU HD13', -0.403, (-7.055, -3.737, -23.994)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.403, (-9.113, -1.696, -27.839)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.403, (-6.162, 10.579, -22.604)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.402, (-4.457, -0.23, -11.312))]
gui = coot_molprobity_todo_list_gui(data=data)
