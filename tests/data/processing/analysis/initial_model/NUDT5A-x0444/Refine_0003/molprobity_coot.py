# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.037891038990164244, (-14.282999999999998, -7.736, -27.087)), ('C', '  66 ', 'PRO', 0.03590640012645833, (-36.181, 27.83899999999999, -38.115))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.01568435398894968, (15.380000000000003, -0.5520000000000003, -2.288)), ('A', '  33 ', 'LYS', 0.030215605008205887, (-0.7829999999999993, -6.915000000000001, 7.871)), ('A', '  33 ', 'LYS', 0.030215605008205887, (-0.7829999999999993, -6.915000000000001, 7.871)), ('A', '  43 ', 'THR', 0.023436190043678296, (10.276, -0.5859999999999999, 8.823)), ('A', '  70 ', 'ARG', 0.027985735350081913, (-19.53, -6.927000000000001, -38.734)), ('A', ' 191 ', 'LEU', 0.0, (-25.077999999999992, 2.569, -12.392)), ('B', '  31 ', 'LEU', 0.0, (-13.901, -7.052, 5.147)), ('B', '  38 ', 'ASP', 0.11315995530230454, (-30.48, -12.641, -6.400000000000001)), ('B', '  43 ', 'THR', 0.01495926990173757, (-30.765999999999995, -14.949000000000002, -0.847)), ('B', ' 205 ', 'LYS', 0.04907133970175271, (-3.5460000000000007, 1.7439999999999998, -30.265000000000004)), ('B', ' 208 ', 'ASN', 0.0, (-6.645, 2.9989999999999988, -35.156)), ('C', '  22 ', 'LEU', 0.07440119165472489, (-13.906, 11.887, -64.165)), ('C', '  31 ', 'LEU', 0.015752343314834254, (-19.812000000000005, 14.579999999999997, -63.444)), ('C', '  45 ', 'THR', 0.1307200273873096, (-22.008, 1.5410000000000004, -64.193)), ('C', ' 164 ', 'ASP', 0.07540755790540228, (-23.134000000000007, 39.929, -53.00999999999999)), ('C', ' 189 ', 'GLU', 0.21434338803736205, (-47.35, 32.292, -58.587)), ('D', '  43 ', 'THR', 0.028812864524262696, (-25.290999999999997, 39.226000000000006, -65.566)), ('D', '  45 ', 'THR', 0.1441032245022664, (-23.413000000000007, 32.55400000000001, -64.213)), ('D', '  72 ', 'LEU', 0.0, (-55.94799999999999, -2.406000000000001, -33.876)), ('D', ' 196 ', 'ARG', 0.0, (-36.665, 13.925999999999995, -47.251)), ('D', ' 196 ', 'ARG', 0.0, (-36.665, 13.925999999999995, -47.251)), ('D', ' 208 ', 'ASN', 0.0, (-46.477, 18.456, -31.061))]
data['cbeta'] = [('B', '  38 ', 'ASP', ' ', 0.25868528020550197, (-29.689000000000004, -13.965, -6.516))]
data['probe'] = [(' D 196 BARG  CG ', ' D 196 BARG HH21', -1.286, (-36.545, 15.222, -50.367)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -1.286, (-36.545, 15.222, -50.367)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -1.09, (-35.661, 15.66, -50.175)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -1.09, (-35.661, 15.66, -50.175)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.844, (8.211, 0.031, -14.879)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.808, (-35.292, 18.342, -33.375)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.805, (-21.84, 25.285, -36.583)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.804, (-36.484, 14.203, -49.361)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.804, (-36.484, 14.203, -49.361)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.708, (-5.774, -19.486, -22.495)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.69, (-7.508, 4.102, -25.189)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.656, (-50.119, -3.804, -51.665)), (' D 196 DARG  N  ', ' D 196 DARG  NH2', -0.621, (-34.759, 14.179, -48.266)), (' D 196 BARG  N  ', ' D 196 BARG  NH2', -0.621, (-34.759, 14.179, -48.266)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.619, (-10.953, 19.431, -7.22)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.592, (-31.95, 20.446, -50.534)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.591, (-55.212, -8.669, -50.351)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -0.585, (-36.757, 15.885, -49.78)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.585, (-36.757, 15.885, -49.78)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.581, (-19.089, -8.718, -42.558)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.576, (-47.807, 19.449, -50.172)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.569, (-36.247, 18.9, -33.73)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.562, (-42.949, 15.852, -41.176)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.554, (-34.73, 12.036, -49.622)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.554, (-34.73, 12.036, -49.622)), (' B  92  ILE  CD1', ' B 191  LEU HD13', -0.543, (7.046, 0.005, -14.787)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.532, (-14.649, 11.276, -24.156)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.525, (-5.008, -4.119, -29.404)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.524, (-54.413, -4.381, -36.411)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.521, (-50.107, 7.814, -61.937)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.521, (-43.3, 28.691, -53.178)), (' A 206  HIS  O  ', ' B 175  LYS  NZ ', -0.516, (-4.842, 12.033, -27.891)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.51, (-9.257, -1.797, -28.08)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.505, (-10.745, -4.548, -13.473)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.501, (-39.652, 21.043, -37.234)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.484, (-51.156, 13.549, -46.717)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.475, (-5.674, 10.511, -22.765)), (' C 136  LEU  O  ', ' C 136  LEU HD13', -0.473, (-26.404, 13.272, -59.463)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.467, (-6.02, -19.942, -22.514)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.467, (-4.661, -13.907, -7.491)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.462, (-9.076, 1.403, -25.069)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.462, (-10.343, 13.408, -22.288)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.459, (-32.894, 14.15, -51.296)), (' D 196 BARG  H  ', ' D 196 BARG  NH2', -0.455, (-34.752, 13.981, -48.448)), (' D 196 DARG  H  ', ' D 196 DARG  NH2', -0.455, (-34.752, 13.981, -48.448)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.454, (10.261, 17.737, -8.889)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.452, (-43.306, 13.528, -43.07)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.451, (-32.665, 14.368, -51.624)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.447, (2.688, 23.401, -25.965)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.443, (-35.453, 12.728, -53.115)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.441, (-35.206, 13.116, -53.146)), (' D 196 BARG  CB ', ' D 196 BARG  NH2', -0.437, (-36.253, 14.09, -48.871)), (' D 196 DARG  CB ', ' D 196 DARG  NH2', -0.437, (-36.253, 14.09, -48.871)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.437, (-40.811, 18.685, -40.561)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.432, (-23.456, 3.039, -13.526)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.431, (-22.417, -4.709, -41.247)), (' C 131  CYS  SG ', ' D 194  ASP  HA ', -0.428, (-30.932, 10.424, -48.006)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.427, (-41.578, 7.159, -50.347)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.411, (-5.42, -7.542, -27.565)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.404, (-34.165, 21.947, -50.717)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.401, (-16.841, 12.142, -6.564))]
gui = coot_molprobity_todo_list_gui(data=data)
