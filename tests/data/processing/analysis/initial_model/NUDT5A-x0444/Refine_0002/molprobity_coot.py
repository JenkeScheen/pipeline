# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03723297991280159, (-14.283999999999995, -7.737000000000001, -27.087)), ('C', '  66 ', 'PRO', 0.0359172853924322, (-36.18500000000002, 27.837999999999997, -38.117))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.021006025019744634, (15.384, -0.5550000000000003, -2.289)), ('A', '  43 ', 'THR', 0.024643428483985767, (10.267, -0.583, 8.824)), ('A', '  70 ', 'ARG', 0.035205801087463275, (-19.533, -6.924000000000002, -38.734)), ('A', ' 191 ', 'LEU', 0.0, (-25.076, 2.5630000000000006, -12.387)), ('B', '  31 ', 'LEU', 0.0, (-13.901999999999994, -7.053000000000001, 5.15)), ('B', '  38 ', 'ASP', 0.11376328957246787, (-30.475000000000005, -12.648000000000003, -6.397)), ('B', '  43 ', 'THR', 0.016869530514296315, (-30.761, -14.948, -0.846)), ('B', ' 205 ', 'LYS', 0.050204539359502184, (-3.549000000000003, 1.7429999999999986, -30.267)), ('B', ' 208 ', 'ASN', 0.0, (-6.66, 2.963999999999997, -35.142)), ('C', '  22 ', 'LEU', 0.16205370814565231, (-13.917000000000005, 11.882000000000001, -64.163)), ('C', '  31 ', 'LEU', 0.018671772527852508, (-19.81200000000001, 14.581999999999999, -63.446)), ('C', '  45 ', 'THR', 0.14645482798716342, (-22.00700000000001, 1.5449999999999982, -64.186)), ('C', ' 164 ', 'ASP', 0.12171238516002499, (-23.135000000000005, 39.909, -53.023)), ('C', ' 189 ', 'GLU', 0.1705328161044687, (-47.357, 32.293000000000006, -58.58800000000001)), ('D', '  43 ', 'THR', 0.028781857595434706, (-25.29600000000001, 39.22500000000001, -65.575)), ('D', '  45 ', 'THR', 0.14887316534538467, (-23.412000000000006, 32.561, -64.216)), ('D', '  72 ', 'LEU', 9.797539893899728e-05, (-55.94799999999999, -2.403000000000002, -33.874)), ('D', ' 196 ', 'ARG', 0.0, (-36.663, 13.926999999999998, -47.254)), ('D', ' 196 ', 'ARG', 0.0, (-36.663, 13.926999999999998, -47.254)), ('D', ' 208 ', 'ASN', 0.0, (-46.452, 18.481000000000005, -31.068))]
data['cbeta'] = [('B', '  38 ', 'ASP', ' ', 0.2561759055027003, (-29.687999999999995, -13.974, -6.507))]
data['probe'] = [(' D 196 BARG  CG ', ' D 196 BARG HH21', -1.081, (-36.583, 15.291, -50.439)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -1.081, (-36.583, 15.291, -50.439)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.961, (-35.791, 15.653, -50.373)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.961, (-35.791, 15.653, -50.373)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.848, (8.348, 0.251, -14.856)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.812, (-21.09, 25.31, -36.505)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.812, (-35.293, 18.349, -33.372)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -0.805, (-36.935, 15.51, -49.516)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.805, (-36.935, 15.51, -49.516)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.78, (-36.173, 14.145, -49.563)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.78, (-36.173, 14.145, -49.563)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.714, (-5.777, -19.482, -22.479)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.688, (-7.508, 4.104, -25.185)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.652, (-50.123, -3.81, -51.663)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.631, (-11.441, 19.493, -7.043)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.6, (-31.948, 20.449, -50.541)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.589, (-55.214, -8.665, -50.348)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.572, (-47.825, 19.458, -50.177)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.571, (-36.247, 18.903, -33.727)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.561, (-42.948, 15.848, -41.175)), (' B  92  ILE  CD1', ' B 191  LEU HD13', -0.543, (7.064, -0.0, -14.799)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.54, (-34.694, 12.058, -49.628)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.54, (-34.694, 12.058, -49.628)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.536, (-18.852, -8.797, -42.576)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.53, (-54.407, -4.382, -36.408)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.525, (-50.104, 7.799, -61.947)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.521, (-5.003, -4.116, -29.404)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.517, (-14.618, 11.265, -24.132)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.511, (-9.261, -1.795, -28.079)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.506, (-10.741, -4.538, -13.476)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.499, (-39.652, 21.044, -37.233)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.499, (-43.442, 28.908, -53.173)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.498, (-32.757, 13.932, -51.307)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.483, (-32.742, 14.504, -51.654)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.477, (-50.868, 13.688, -46.294)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.476, (-5.676, 10.509, -22.765)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.473, (-4.662, -13.909, -7.492)), (' C 136  LEU  O  ', ' C 136  LEU HD13', -0.473, (-26.403, 13.269, -59.46)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.47, (-6.023, -19.938, -22.498)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.461, (-9.077, 1.404, -25.068)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.458, (10.26, 17.727, -8.891)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.457, (-10.35, 13.408, -22.291)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.453, (-43.308, 13.527, -43.072)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.453, (-35.46, 12.731, -53.11)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.452, (-35.201, 13.129, -53.132)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.443, (2.698, 23.399, -25.965)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.441, (-23.499, 3.102, -13.531)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.435, (-40.81, 18.682, -40.565)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.434, (-22.405, -4.712, -41.253)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.428, (-41.581, 7.159, -50.349)), (' C 131  CYS  SG ', ' D 194  ASP  HA ', -0.426, (-30.494, 10.555, -48.214)), (' C  22  LEU  O  ', ' C  22  LEU HD13', -0.421, (-13.109, 13.671, -65.937)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.413, (-5.422, -7.545, -27.568)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.41, (-16.84, 12.144, -6.562)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.409, (-46.755, 11.429, -43.471)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.407, (-34.165, 21.954, -50.712)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.405, (-20.572, -4.954, -35.57)), (' D 110  LEU  HG ', ' D 123  ILE HD11', -0.402, (-50.766, 5.525, -56.409)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.401, (-26.948, -0.51, -37.261))]
gui = coot_molprobity_todo_list_gui(data=data)
