# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.039434576675764145, (-14.289000000000001, -7.743000000000003, -27.086)), ('C', '  66 ', 'PRO', 0.038544257762562, (-36.188, 27.837000000000003, -38.123)), ('D', ' 190 ', 'HIS', 0.002633449205699301, (-22.738999999999997, 2.073999999999999, -42.537000000000006))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.048787332358686854, (15.378, -0.572, -2.309)), ('A', '  43 ', 'THR', 0.027835358127784482, (10.250000000000002, -0.5859999999999992, 8.835)), ('A', '  70 ', 'ARG', 0.037335246078002246, (-19.551000000000002, -6.9170000000000025, -38.727)), ('A', ' 191 ', 'LEU', 0.0005599090216036791, (-25.066, 2.5719999999999996, -12.367)), ('B', '  31 ', 'LEU', 0.0, (-13.904, -7.057000000000001, 5.155999999999999)), ('B', '  38 ', 'ASP', 0.07455224349439385, (-30.468, -12.656000000000002, -6.386)), ('B', '  43 ', 'THR', 0.02447880688123405, (-30.758, -14.959, -0.844)), ('B', ' 205 ', 'LYS', 0.05461857943319081, (-3.555, 1.7379999999999995, -30.261)), ('B', ' 208 ', 'ASN', 0.005094974325926486, (-6.679000000000001, 2.9320000000000004, -35.13)), ('C', '  31 ', 'LEU', 0.030599965344865424, (-19.802, 14.592000000000002, -63.434)), ('C', '  45 ', 'THR', 0.21352271528797886, (-21.996000000000002, 1.5569999999999968, -64.181)), ('C', ' 164 ', 'ASP', 0.24324362372967348, (-23.127000000000006, 39.85300000000001, -53.061)), ('C', ' 189 ', 'GLU', 0.22166600530585773, (-47.358, 32.304, -58.574)), ('D', '  43 ', 'THR', 0.028558605117723346, (-25.308000000000007, 39.234, -65.59)), ('D', '  45 ', 'THR', 0.17111452885984374, (-23.40700000000001, 32.564, -64.228)), ('D', '  72 ', 'LEU', 0.0008097677896187844, (-55.946999999999996, -2.4080000000000013, -33.864)), ('D', ' 196 ', 'ARG', 0.10604063972808993, (-36.661, 13.922000000000004, -47.268)), ('D', ' 196 ', 'ARG', 0.10604063972808993, (-36.661, 13.922000000000004, -47.268)), ('D', ' 208 ', 'ASN', 0.10393935551932766, (-46.361999999999995, 18.529000000000007, -31.136))]
data['cbeta'] = []
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.972, (-35.904, 15.95, -50.131)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.972, (-35.904, 15.95, -50.131)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.828, (8.355, 0.26, -14.83)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.82, (-21.088, 25.309, -36.487)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.801, (-35.273, 18.349, -33.363)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.795, (-35.623, 15.714, -49.908)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.795, (-35.623, 15.714, -49.908)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.711, (-5.777, -19.485, -22.467)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.675, (-7.507, 4.107, -25.17)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.662, (-50.346, -3.765, -51.666)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.653, (-11.446, 19.249, -7.063)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.603, (-31.945, 20.465, -50.544)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.585, (-36.05, 14.583, -49.75)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.585, (-36.05, 14.583, -49.75)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.57, (-47.827, 19.471, -50.168)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.561, (-36.258, 18.903, -33.717)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.554, (-42.952, 15.85, -41.169)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.537, (-35.168, 12.401, -49.919)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.535, (-34.631, 12.084, -49.621)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.534, (-55.194, -8.663, -50.37)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.515, (-50.105, 7.81, -61.95)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.512, (-4.988, -4.115, -29.404)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.511, (-32.894, 14.136, -51.291)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.504, (-32.808, 14.374, -51.707)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.503, (-9.102, -1.585, -27.818)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.498, (-39.653, 21.042, -37.233)), (' B  92  ILE  CD1', ' B 191  LEU HD13', -0.487, (7.031, 0.106, -14.57)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.487, (-5.662, 10.536, -22.76)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.482, (-14.526, 11.822, -24.22)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.482, (-4.661, -13.906, -7.492)), (' C 136  LEU  O  ', ' C 136  LEU HD13', -0.475, (-26.398, 13.246, -59.452)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.47, (-6.023, -19.941, -22.486)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.468, (-9.313, 1.478, -25.063)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.463, (-23.677, 3.259, -13.987)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.462, (-35.174, 13.145, -53.109)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.462, (-35.457, 12.743, -53.104)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.46, (-54.387, -4.389, -36.394)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.459, (-50.89, 13.686, -46.294)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.459, (-43.307, 13.528, -43.081)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.455, (-36.697, 15.419, -50.33)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.455, (-36.697, 15.419, -50.33)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.449, (-46.756, 11.204, -43.686)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.447, (-10.793, -4.282, -13.405)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.446, (-43.645, 28.64, -53.086)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.441, (-41.594, 7.139, -50.336)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.441, (-10.354, 13.421, -22.29)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.438, (10.093, 18.06, -9.223)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.436, (2.469, 23.323, -25.978)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.435, (-5.43, -7.551, -27.573)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.432, (-40.808, 18.681, -40.563)), (' C 131  CYS  SG ', ' D 194  ASP  HA ', -0.43, (-30.638, 10.557, -48.421)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.429, (-6.429, -0.96, -10.625)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.427, (-20.557, -4.822, -35.709)), (' C  22  LEU  O  ', ' C  22  LEU HD13', -0.427, (-13.155, 13.847, -65.945)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.425, (-27.059, -0.538, -37.629)), (' D 110  LEU  HG ', ' D 123  ILE HD11', -0.425, (-50.949, 5.583, -56.638)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.417, (-22.393, -4.719, -41.256)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.411, (-34.169, 21.95, -50.713))]
gui = coot_molprobity_todo_list_gui(data=data)
