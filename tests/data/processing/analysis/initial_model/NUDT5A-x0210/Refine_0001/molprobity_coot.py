# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03468902831264741, (-13.632, -7.798, -27.135)), ('B', '  66 ', 'PRO', 0.0766561989849443, (-1.4509999999999996, 14.138, -16.992)), ('C', '  66 ', 'PRO', 0.03566707123694646, (-35.395, 27.971, -38.242)), ('D', ' 190 ', 'HIS', 0.047259909326013975, (-21.697999999999993, 2.3409999999999993, -42.616))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.002156630743591163, (15.774, -0.347, -2.298)), ('A', '  43 ', 'THR', 0.05939240625563215, (10.483999999999998, -0.4039999999999997, 9.003)), ('A', '  70 ', 'ARG', 0.10081873787343362, (-18.654999999999998, -6.888, -38.791)), ('A', ' 191 ', 'LEU', 0.007709058405908632, (-24.782, 2.2939999999999996, -12.673000000000002)), ('B', '  31 ', 'LEU', 0.0, (-13.526999999999996, -7.028999999999999, 5.19)), ('B', '  43 ', 'THR', 0.03506722324794997, (-30.107000000000003, -15.305, -0.84)), ('B', ' 189 ', 'GLU', 0.10063792425816, (12.588999999999999, -3.7299999999999995, -15.124)), ('B', ' 208 ', 'ASN', 0.08627248589973711, (-6.166, 2.9540000000000006, -35.175)), ('C', '  31 ', 'LEU', 0.0, (-18.836999999999996, 15.168999999999993, -63.404)), ('C', '  43 ', 'THR', 0.2862677950837579, (-18.860999999999997, -4.898999999999998, -62.829)), ('C', ' 136 ', 'LEU', 0.044058153312516134, (-26.897, 11.645, -58.81)), ('C', ' 164 ', 'ASP', 0.05714855247796985, (-22.467, 40.318, -53.014)), ('D', '  43 ', 'THR', 0.03337012553945474, (-24.665999999999997, 39.700999999999986, -65.758)), ('D', '  45 ', 'THR', 0.17212986634529456, (-22.711, 32.966, -64.311)), ('D', '  72 ', 'LEU', 0.0015035974072016094, (-54.46499999999998, -2.2070000000000007, -33.964)), ('D', '  92 ', 'ILE', 0.1350868882858118, (-31.478999999999996, 4.740000000000002, -46.775))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.27952410804117306, (-22.574999999999996, -8.17, -13.348)), ('C', ' 190 ', 'HIS', ' ', 0.2722518352461521, (-43.866, 29.985, -61.919))]
data['probe'] = [(' B  47  GLU  O  ', ' E   2 DLIG  HC8', -1.052, (-15.954, -10.446, -2.427)), (' B  47  GLU  O  ', ' E   2 CLIG  HC8', -1.033, (-16.459, -10.059, -1.947)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.843, (-34.778, 18.069, -33.405)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -0.827, (-35.439, 15.261, -50.151)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.827, (-35.439, 15.261, -50.151)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.783, (-35.209, 15.022, -50.021)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.783, (-35.209, 15.022, -50.021)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.735, (8.686, 0.662, -14.68)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.711, (-42.118, 16.578, -41.032)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.711, (-21.101, 25.29, -36.667)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.707, (-49.107, -4.345, -51.632)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.703, (-5.047, -19.284, -22.55)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.694, (-31.698, 20.483, -50.678)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.68, (-23.715, 2.0, -43.196)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.679, (-48.918, 7.722, -62.325)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.669, (-33.641, 12.207, -49.816)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.669, (-33.641, 12.207, -49.816)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.668, (-18.249, -9.385, -42.575)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.623, (-54.167, -3.6, -44.957)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.581, (-7.172, 4.129, -25.058)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.575, (-11.583, 19.279, -7.27)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.575, (-35.491, 18.777, -33.717)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.565, (-42.484, 13.767, -43.322)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.563, (-47.059, 19.353, -50.167)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.555, (-38.992, 21.01, -37.855)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.543, (-33.147, 21.777, -51.3)), (' A  22  LEU HD11', ' A  25 AGLU  HB2', -0.518, (-6.131, -14.832, 6.099)), (' A  22  LEU HD11', ' A  25 BGLU  HB2', -0.518, (-6.131, -14.832, 6.099)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.516, (-19.857, -4.689, -36.018)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.514, (-53.812, -3.007, -45.713)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.51, (-26.451, 5.099, -43.406)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.504, (-54.519, -3.67, -44.817)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.497, (-6.324, 6.838, -22.521)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.497, (-16.503, 12.044, -7.162)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.48, (-31.835, 14.397, -51.441)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.479, (-14.335, 11.577, -24.984)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.477, (-5.661, 10.566, -22.857)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.476, (-31.498, 14.676, -51.712)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.475, (-19.692, -7.23, -34.193)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.472, (-21.723, -4.607, -41.541)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.455, (-45.717, 11.477, -43.78)), (' B  71  THR  O  ', ' B  73  HIS  HD2', -0.454, (9.36, 20.734, -27.529)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.448, (-27.57, 43.062, -66.076)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.448, (-34.618, 12.962, -53.17)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.444, (-8.872, 1.565, -25.028)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.442, (-10.584, 13.683, -22.263)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.442, (-34.506, 13.411, -53.255)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.441, (-35.711, 15.574, -50.384)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.441, (-35.711, 15.574, -50.384)), (' A 204  LEU  HG ', ' B 203  ALA  HB1', -0.44, (-9.688, 3.637, -26.756)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.437, (-50.74, 18.279, -46.011)), (' D  18  ILE HD11', ' D  37  MET  HB2', -0.436, (-29.336, 38.9, -67.139)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.435, (-6.214, -1.052, -10.214)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.433, (-8.674, -1.591, -27.77)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.427, (-49.063, -1.581, -39.948)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.425, (-10.603, -4.254, -13.275)), (' D 188  GLU  HG3', ' D 189  GLU  HG3', -0.422, (-26.082, -0.675, -37.679)), (' C 104  THR HG23', ' C 107  ALA  N  ', -0.421, (-21.225, 25.598, -35.964)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.419, (-42.263, 27.616, -56.3)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.418, (5.456, 2.808, -10.162)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.415, (-49.988, 13.784, -46.397)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.414, (-54.276, -8.398, -50.222)), (' C 196  ARG  NE ', ' D 412  HOH  O  ', -0.412, (-32.917, 18.568, -50.492)), (' A 167  PHE  CD2', ' B  39  PRO  HG2', -0.412, (-29.639, -14.044, -12.069)), (' D  38  ASP  OD2', ' D  42  LYS  HB3', -0.407, (-25.55, 41.854, -61.059)), (' D  61  GLY  O  ', ' D 141  ILE  HA ', -0.407, (-39.957, 13.802, -59.263))]
gui = coot_molprobity_todo_list_gui(data=data)
