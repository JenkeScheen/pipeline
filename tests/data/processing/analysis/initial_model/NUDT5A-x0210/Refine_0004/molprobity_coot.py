# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.034130976544985966, (-13.631, -7.799, -27.135)), ('B', '  66 ', 'PRO', 0.07764125156826555, (-1.4439999999999995, 14.144000000000002, -16.986)), ('C', '  66 ', 'PRO', 0.0330646554299096, (-35.388999999999996, 27.962999999999987, -38.246)), ('D', ' 190 ', 'HIS', 0.006568319817593286, (-21.695999999999998, 2.2969999999999997, -42.611))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.761000000000001, -0.328, -2.298)), ('A', '  43 ', 'THR', 0.03647309114553461, (10.496999999999996, -0.4109999999999996, 9.005)), ('A', '  70 ', 'ARG', 0.07419216285837786, (-18.649, -6.892, -38.783)), ('A', ' 191 ', 'LEU', 0.008357150749807295, (-24.793, 2.287, -12.69)), ('B', '  31 ', 'LEU', 0.00015387607732474603, (-13.518, -7.019000000000001, 5.2)), ('B', '  43 ', 'THR', 0.02991853980347514, (-30.107, -15.315999999999995, -0.842)), ('B', '  54 ', 'ARG', 0.2682678663080225, (-14.436, 7.3660000000000005, 2.583)), ('B', ' 189 ', 'GLU', 0.09334061716747297, (12.585999999999995, -3.683, -15.118)), ('B', ' 208 ', 'ASN', 0.0, (-6.137999999999998, 2.976000000000001, -35.21)), ('C', '  31 ', 'LEU', 0.0, (-18.825999999999997, 15.177, -63.40500000000001)), ('C', '  43 ', 'THR', 0.24730191312128327, (-18.904999999999994, -4.917000000000001, -62.845)), ('C', '  53 ', 'THR', 0.28308118800541476, (-15.514999999999993, 22.868, -52.668000000000006)), ('C', ' 136 ', 'LEU', 0.03798982398587293, (-26.894999999999996, 11.641999999999994, -58.804)), ('C', ' 164 ', 'ASP', 0.10112120571637492, (-22.493, 40.375, -53.022)), ('D', '  43 ', 'THR', 0.03119961573562534, (-24.616, 39.692, -65.735)), ('D', '  45 ', 'THR', 0.04962465495778705, (-22.732000000000003, 32.974, -64.313)), ('D', '  72 ', 'LEU', 0.0036363131499515485, (-54.458000000000006, -2.21, -33.968)), ('D', '  92 ', 'ILE', 0.1317782543366657, (-31.479999999999997, 4.732999999999999, -46.774)), ('D', ' 196 ', 'ARG', 0.0, (-35.772999999999996, 14.020000000000003, -47.392)), ('D', ' 196 ', 'ARG', 0.0, (-35.772999999999996, 14.020000000000003, -47.392))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2676066074374073, (-22.579999999999995, -8.183999999999997, -13.355)), ('C', ' 190 ', 'HIS', ' ', 0.25677171581605734, (-43.925999999999995, 29.962999999999994, -61.92900000000001)), ('D', ' 188 ', 'GLU', ' ', 0.2559775949979094, (-25.003999999999994, 0.5549999999999979, -35.233))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -1.148, (-35.793, 15.601, -50.16)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -1.148, (-35.793, 15.601, -50.16)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.944, (-34.872, 15.534, -50.64)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.944, (-34.872, 15.534, -50.64)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.836, (-34.763, 18.083, -33.392)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.732, (-35.705, 15.48, -50.411)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.732, (-35.705, 15.48, -50.411)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.714, (-42.132, 16.585, -41.019)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.714, (-21.101, 25.296, -36.652)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.71, (-49.229, -3.805, -51.966)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.698, (-5.055, -19.293, -22.542)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.697, (8.561, 0.669, -14.486)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.695, (-48.913, 7.708, -62.339)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.674, (-23.794, 2.02, -43.147)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.674, (-33.646, 12.185, -49.821)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.674, (-33.646, 12.185, -49.821)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.67, (-18.025, -9.48, -42.574)), (' A  54 DARG  NH2', ' F   8 DHOH  O  ', -0.668, (1.703, -11.571, -6.156)), (' A  54 CARG  NH2', ' F   8 CHOH  O  ', -0.668, (1.703, -11.571, -6.156)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.667, (-35.066, 14.55, -49.663)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.667, (-35.066, 14.55, -49.663)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.656, (-31.793, 20.078, -50.44)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.626, (-54.558, -3.432, -44.616)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.59, (-47.057, 19.393, -50.182)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.588, (-7.522, 4.684, -24.961)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.58, (-11.588, 19.239, -7.258)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.58, (-35.486, 18.776, -33.725)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.574, (-33.147, 21.777, -51.304)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.552, (-42.484, 13.775, -43.311)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.551, (-38.991, 21.008, -37.861)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.544, (-20.006, -4.586, -35.851)), (' A  22  LEU HD11', ' A  25 AGLU  HB2', -0.514, (-6.083, -14.824, 6.064)), (' A  22  LEU HD11', ' A  25 BGLU  HB2', -0.514, (-6.083, -14.824, 6.064)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.507, (-53.821, -2.985, -45.701)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.503, (-26.443, 5.096, -43.398)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.501, (-31.698, 14.181, -51.449)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.499, (-54.521, -3.652, -44.816)), (' D 189  GLU  O  ', ' D 191  LEU  N  ', -0.487, (-24.269, 2.417, -42.498)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.486, (-16.534, 12.041, -7.162)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.486, (-31.639, 14.709, -51.788)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.484, (-6.33, 6.817, -22.526)), (' B  71  THR  O  ', ' B  73  HIS  HD2', -0.477, (9.374, 20.727, -27.528)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.469, (-21.732, -4.621, -41.535)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.467, (-19.962, -6.884, -34.534)), (' B  55  LYS  CB ', ' B  57  GLN  N  ', -0.461, (-16.814, 11.713, 1.563)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.459, (-5.765, 10.328, -22.871)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.452, (-8.875, 1.564, -25.023)), (' D  38  ASP  OD2', ' D  42  LYS  HB3', -0.446, (-25.893, 41.453, -60.907)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.443, (-10.596, 13.675, -22.279)), (' D  18  ILE HD11', ' D  37  MET  HB2', -0.442, (-29.004, 38.776, -67.415)), (' C 196  ARG  NE ', ' D 412  HOH  O  ', -0.44, (-32.927, 18.555, -50.496)), (' A 204  LEU  HG ', ' B 203  ALA  HB1', -0.438, (-9.239, 3.57, -26.758)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.435, (5.442, 2.804, -10.162)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.435, (-54.306, -8.364, -50.245)), (' A 167  PHE  CD2', ' B  39  PRO  HG2', -0.435, (-29.673, -13.961, -12.062)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.434, (-8.675, -1.6, -27.778)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.434, (-45.865, 11.489, -43.587)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.433, (-42.597, 27.662, -55.984)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.433, (-34.619, 12.957, -53.176)), (' D 119  TYR  CE1', ' D 158  PRO  HG3', -0.432, (-45.489, -5.923, -48.296)), (' A 167  PHE  CZ ', ' B  39  PRO  HD2', -0.429, (-29.43, -14.67, -9.887)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.428, (-56.102, -3.71, -44.095)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.426, (-10.59, -4.242, -13.267)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.426, (-6.224, -1.06, -10.221)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.426, (-34.301, 13.244, -53.268)), (' C 104  THR HG23', ' C 107  ALA  N  ', -0.425, (-21.225, 25.604, -35.949)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.425, (-48.83, -1.667, -39.914)), (' D 174  PRO  HB2', ' D 176  ASN  OD1', -0.42, (-42.79, 3.179, -34.423)), (' D  61  GLY  O  ', ' D 141  ILE  HA ', -0.413, (-39.969, 13.804, -59.253)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.409, (-14.488, 11.495, -24.565))]
gui = coot_molprobity_todo_list_gui(data=data)
