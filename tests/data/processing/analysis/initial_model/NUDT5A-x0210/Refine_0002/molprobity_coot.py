# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03433019231498809, (-13.633, -7.802, -27.136)), ('B', '  66 ', 'PRO', 0.07503178723967029, (-1.4510000000000005, 14.141, -16.992)), ('C', '  66 ', 'PRO', 0.035173551955192645, (-35.395, 27.97, -38.241))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.00021126103431513328, (15.78, -0.3470000000000001, -2.291)), ('A', '  43 ', 'THR', 0.058581854610253906, (10.484000000000002, -0.4099999999999997, 9.009)), ('A', '  70 ', 'ARG', 0.11370788681989603, (-18.654, -6.8900000000000015, -38.789)), ('A', ' 191 ', 'LEU', 0.007053824897945229, (-24.788999999999994, 2.305999999999999, -12.673000000000002)), ('B', '  31 ', 'LEU', 0.0, (-13.528999999999996, -7.021000000000001, 5.189)), ('B', '  43 ', 'THR', 0.03467710779691524, (-30.103999999999992, -15.307, -0.835)), ('B', ' 189 ', 'GLU', 0.0607345708947472, (12.579000000000002, -3.732, -15.112)), ('B', ' 208 ', 'ASN', 0.0695022548408498, (-6.154999999999998, 2.928, -35.171)), ('C', '  31 ', 'LEU', 0.0, (-18.83599999999999, 15.168999999999999, -63.402)), ('C', ' 136 ', 'LEU', 0.03885003601315724, (-26.893, 11.637999999999998, -58.81700000000001)), ('C', ' 164 ', 'ASP', 0.05528527039980673, (-22.479, 40.33, -53.021)), ('D', '  43 ', 'THR', 0.031176895879341183, (-24.635999999999992, 39.68599999999999, -65.755)), ('D', '  45 ', 'THR', 0.11121567445068588, (-22.720999999999997, 32.964, -64.325)), ('D', '  72 ', 'LEU', 0.0038803171223966404, (-54.46, -2.211, -33.962)), ('D', '  92 ', 'ILE', 0.13602916500192838, (-31.480999999999995, 4.735999999999997, -46.774)), ('D', ' 196 ', 'ARG', 0.23641802091926364, (-35.772, 14.008, -47.408)), ('D', ' 196 ', 'ARG', 0.23641802091926364, (-35.772, 14.008, -47.408))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2761840870318688, (-22.582, -8.174, -13.347000000000001)), ('C', ' 190 ', 'HIS', ' ', 0.2670020595734861, (-43.872, 30.006000000000007, -61.93800000000001)), ('D', ' 188 ', 'GLU', ' ', 0.2602982827323272, (-25.016, 0.5650000000000004, -35.238))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.896, (-35.713, 15.539, -50.298)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.896, (-35.713, 15.539, -50.298)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.847, (-34.781, 18.08, -33.402)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.806, (-34.601, 15.785, -50.022)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.806, (-34.601, 15.785, -50.022)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.74, (8.698, 0.691, -14.67)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.727, (-21.091, 25.309, -36.667)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.715, (-49.111, -4.332, -51.623)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.704, (-42.118, 16.578, -41.034)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.701, (-5.051, -19.288, -22.546)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.693, (-48.913, 7.704, -62.325)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.683, (-23.702, 1.979, -43.205)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.681, (-33.647, 12.187, -49.814)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.681, (-33.647, 12.187, -49.814)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.678, (-18.006, -9.474, -42.571)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.677, (-31.692, 20.487, -50.672)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.611, (-54.56, -3.447, -44.617)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.61, (-35.585, 15.312, -50.308)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.61, (-35.585, 15.312, -50.308)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.585, (-47.053, 19.371, -50.175)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.583, (-11.582, 19.27, -7.263)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.579, (-35.491, 18.773, -33.721)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.577, (-7.528, 4.692, -24.958)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.566, (-42.481, 13.767, -43.323)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.558, (-38.994, 21.014, -37.853)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.551, (-33.147, 21.774, -51.304)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.533, (-19.854, -4.671, -36.018)), (' A  22  LEU HD11', ' A  25 AGLU  HB2', -0.53, (-6.128, -14.816, 6.078)), (' A  22  LEU HD11', ' A  25 BGLU  HB2', -0.53, (-6.128, -14.816, 6.078)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.512, (-53.827, -2.997, -45.719)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.511, (-26.449, 5.1, -43.396)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.495, (-6.324, 6.844, -22.521)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.49, (-19.449, -6.926, -34.339)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.49, (-31.833, 14.397, -51.438)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.486, (-54.523, -3.667, -44.817)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.485, (-16.517, 12.046, -7.16)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.484, (-14.343, 11.593, -24.995)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.483, (-31.634, 14.852, -51.724)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.479, (-5.657, 10.567, -22.859)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.472, (-21.723, -4.618, -41.539)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.458, (-45.719, 11.474, -43.777)), (' B  71  THR  O  ', ' B  73  HIS  HD2', -0.456, (9.363, 20.735, -27.529)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.446, (-8.873, 1.568, -25.028)), (' A 204  LEU  HG ', ' B 203  ALA  HB1', -0.444, (-9.236, 3.579, -26.767)), (' D  18  ILE HD11', ' D  37  MET  HB2', -0.442, (-29.346, 38.87, -67.12)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.442, (-34.624, 12.959, -53.174)), (' C 104  THR HG23', ' C 107  ALA  N  ', -0.437, (-21.215, 25.617, -35.964)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.437, (-6.223, -1.066, -10.231)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.436, (-10.585, 13.677, -22.276)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.435, (-34.512, 13.4, -53.26)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.429, (-50.489, 18.518, -46.288)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.428, (-8.791, -1.819, -27.787)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.427, (-27.655, 43.037, -65.807)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.422, (5.45, 2.811, -10.158)), (' C 196  ARG  NE ', ' D 412  HOH  O  ', -0.421, (-32.92, 18.57, -50.491)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.42, (-10.609, -4.265, -13.259)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.42, (-48.812, -1.669, -39.946)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.412, (-42.284, 27.648, -56.298)), (' D  61  GLY  O  ', ' D 141  ILE  HA ', -0.41, (-39.957, 13.803, -59.265)), (' D  38  ASP  HB2', ' D  39  PRO  CD ', -0.402, (-29.075, 39.87, -58.91)), (' B  23  ILE HD11', ' B  33  LYS  HB2', -0.402, (-17.667, -11.933, 5.645))]
gui = coot_molprobity_todo_list_gui(data=data)
