# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.034808162013514186, (-13.631, -7.802, -27.137000000000004)), ('B', '  66 ', 'PRO', 0.07748408745596619, (-1.448, 14.141999999999994, -16.991)), ('C', '  66 ', 'PRO', 0.03455691126033913, (-35.396000000000015, 27.969, -38.239))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.002030045045400139, (15.774999999999993, -0.33900000000000013, -2.288)), ('A', '  43 ', 'THR', 0.0587777586561494, (10.487, -0.4099999999999999, 9.001)), ('A', '  70 ', 'ARG', 0.10991779028477004, (-18.659, -6.895000000000001, -38.79)), ('A', ' 191 ', 'LEU', 0.006656382361418054, (-24.786000000000005, 2.3000000000000003, -12.675)), ('B', '  31 ', 'LEU', 0.0, (-13.528999999999996, -7.0189999999999975, 5.192)), ('B', '  43 ', 'THR', 0.03408381780494878, (-30.107, -15.310999999999998, -0.841)), ('B', ' 189 ', 'GLU', 0.07072797492667383, (12.584, -3.729, -15.114)), ('B', ' 208 ', 'ASN', 0.10962119816651242, (-6.1709999999999985, 2.9459999999999997, -35.175)), ('C', '  31 ', 'LEU', 0.0, (-18.837, 15.172, -63.407)), ('C', '  43 ', 'THR', 0.2983648854061887, (-18.872999999999998, -4.905000000000002, -62.83400000000001)), ('C', ' 136 ', 'LEU', 0.04438737595474366, (-26.89299999999999, 11.642, -58.814)), ('C', ' 164 ', 'ASP', 0.09540377889651996, (-22.467, 40.314, -53.02)), ('D', '  43 ', 'THR', 0.035164059585424484, (-24.657000000000004, 39.692999999999984, -65.745)), ('D', '  45 ', 'THR', 0.14260666358757595, (-22.716, 32.96, -64.319)), ('D', '  72 ', 'LEU', 0.0038761048717576396, (-54.459999999999994, -2.209999999999999, -33.966)), ('D', '  92 ', 'ILE', 0.1289178194602193, (-31.478, 4.7379999999999995, -46.773))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.27545717685192306, (-22.58, -8.172999999999998, -13.347000000000001)), ('C', ' 190 ', 'HIS', ' ', 0.2727015594131705, (-43.892, 29.977, -61.93)), ('D', ' 188 ', 'GLU', ' ', 0.25787104286385343, (-25.013999999999996, 0.5609999999999982, -35.24))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.848, (-35.724, 15.559, -50.369)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.848, (-35.724, 15.559, -50.369)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.835, (-34.769, 18.077, -33.403)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.793, (-35.222, 15.007, -50.01)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.793, (-35.222, 15.007, -50.01)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.734, (8.689, 0.68, -14.674)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.717, (-21.096, 25.305, -36.663)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.714, (-49.103, -4.348, -51.627)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.705, (-42.085, 15.992, -41.437)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.702, (-5.048, -19.287, -22.554)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.681, (-33.648, 12.192, -49.811)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.681, (-33.648, 12.192, -49.811)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.679, (-48.913, 7.727, -62.317)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.676, (-31.696, 20.483, -50.68)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.674, (-23.906, 2.007, -43.219)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.673, (-18.011, -9.473, -42.57)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.618, (-54.556, -3.445, -44.616)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.585, (-47.044, 19.36, -50.171)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.585, (-11.583, 19.272, -7.266)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.582, (-35.491, 18.774, -33.718)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.575, (-7.537, 4.682, -24.956)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.571, (-43.058, 13.759, -42.836)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.556, (-33.146, 21.778, -51.303)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.553, (-38.992, 21.011, -37.854)), (' A  22  LEU HD11', ' A  25 AGLU  HB2', -0.533, (-6.124, -14.828, 6.096)), (' A  22  LEU HD11', ' A  25 BGLU  HB2', -0.533, (-6.124, -14.828, 6.096)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.521, (-19.95, -4.695, -35.782)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.514, (-26.452, 5.099, -43.401)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.511, (-53.817, -3.002, -45.717)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.496, (-54.519, -3.665, -44.816)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.495, (-6.324, 6.835, -22.524)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.493, (-16.507, 12.048, -7.161)), (' A  68  LEU  HG ', ' A  70  ARG  HD2', -0.482, (-19.7, -7.181, -34.181)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.482, (-14.352, 11.591, -24.987)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.482, (-31.835, 14.398, -51.44)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.476, (-31.508, 14.664, -51.721)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.474, (-21.724, -4.61, -41.542)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.47, (-5.664, 10.565, -22.86)), (' B  71  THR  O  ', ' B  73  HIS  HD2', -0.468, (9.366, 20.733, -27.526)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.467, (-27.817, 43.161, -66.012)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.467, (-45.713, 11.471, -43.776)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.457, (-8.871, 1.568, -25.027)), (' A 204  LEU  HG ', ' B 203  ALA  HB1', -0.443, (-9.689, 3.629, -26.759)), (' D  18  ILE HD11', ' D  37  MET  HB2', -0.442, (-29.35, 38.88, -67.121)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.441, (-42.26, 27.616, -56.322)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.44, (-34.623, 12.965, -53.169)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.438, (-10.592, 13.676, -22.277)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.433, (-34.509, 13.401, -53.257)), (' C 104  THR HG23', ' C 107  ALA  N  ', -0.429, (-21.22, 25.613, -35.96)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.428, (-50.728, 18.285, -46.022)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.428, (-8.791, -1.823, -27.783)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.426, (-6.212, -1.044, -10.215)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.424, (5.448, 2.807, -10.157)), (' D  70  ARG  HD3', ' D 404  HOH  O  ', -0.422, (-48.804, -1.67, -39.941)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.42, (-10.603, -4.254, -13.265)), (' A 167  PHE  CD2', ' B  39  PRO  HG2', -0.42, (-29.61, -14.003, -12.076)), (' D  38  ASP  HB2', ' D  39  PRO  CD ', -0.413, (-29.066, 39.873, -58.915)), (' C 196  ARG  NE ', ' D 412  HOH  O  ', -0.412, (-32.92, 18.566, -50.493)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.411, (-54.286, -8.378, -50.224)), (' D  38  ASP  OD2', ' D  42  LYS  HB3', -0.409, (-25.55, 41.85, -61.057)), (' D  61  GLY  O  ', ' D 141  ILE  HA ', -0.409, (-39.958, 13.807, -59.263)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.403, (-49.988, 13.795, -46.405)), (' B  23  ILE HD11', ' B  33  LYS  HB2', -0.402, (-17.671, -11.937, 5.648))]
gui = coot_molprobity_todo_list_gui(data=data)
