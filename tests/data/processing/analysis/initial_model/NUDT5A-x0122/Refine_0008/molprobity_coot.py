# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.046300239313783, (-14.087999999999997, -7.743000000000001, -27.049999999999997)), ('A', ' 189 ', 'GLU', 0.04019386356510892, (-29.943000000000005, 5.092999999999999, -14.359)), ('A', ' 189 ', 'GLU', 0.04019386356510892, (-29.943000000000005, 5.092999999999999, -14.359)), ('A', ' 190 ', 'HIS', 0.044067227436050904, (-27.808, 5.010999999999998, -12.299)), ('A', ' 190 ', 'HIS', 0.044067227436050904, (-27.808, 5.010999999999998, -12.299)), ('A', ' 190 ', 'HIS', 0.020126124188807243, (-27.530999999999995, 5.094, -11.374)), ('A', ' 190 ', 'HIS', 0.020126124188807243, (-27.530999999999995, 5.094, -11.374)), ('B', '  66 ', 'PRO', 0.06405608029136453, (-1.3830000000000013, 13.992999999999999, -17.123)), ('C', '  53 ', 'THR', 0.04164901255736999, (-12.99, 18.276000000000003, -52.876)), ('C', '  53 ', 'THR', 0.04160567554709382, (-12.989, 18.277, -52.876)), ('C', '  66 ', 'PRO', 0.04036721104989577, (-35.854, 27.822000000000003, -38.248))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.032, 3.5649999999999995, -33.978)), ('D', ' 208 ', 'ASN', None, (-45.681, 18.322, -32.835)), ('D', ' 208 ', 'ASN', None, (-45.681, 18.322, -32.835))]
data['rota'] = [('A', '  14 ', 'LYS', 0.028187490060270763, (15.547999999999996, -0.49000000000000005, -2.425)), ('A', '  38 ', 'ASP', 0.09846122012746555, (11.076, 1.962, 3.1119999999999997)), ('A', '  70 ', 'ARG', 0.020537837927362683, (-19.212, -6.907000000000002, -38.74)), ('A', ' 191 ', 'LEU', 2.4807510825494122e-05, (-24.920999999999996, 2.5890000000000004, -12.492999999999999)), ('A', ' 191 ', 'LEU', 2.4807510825494122e-05, (-24.920999999999996, 2.5890000000000004, -12.492999999999999)), ('A', ' 191 ', 'LEU', 0.0, (-24.923, 2.591, -12.481)), ('A', ' 191 ', 'LEU', 0.0, (-24.923, 2.591, -12.481)), ('B', '  31 ', 'LEU', 0.08449908811574249, (-13.749000000000002, -6.8919999999999995, 5.266)), ('B', '  38 ', 'ASP', 0.24003093262494604, (-30.195999999999994, -12.579, -6.467999999999998)), ('B', '  43 ', 'THR', 0.12599436253812618, (-30.400999999999993, -14.988, -0.818)), ('C', '  29 ', 'VAL', 0.08990313720843363, (-19.106, 20.784999999999997, -59.922)), ('C', '  35 ', 'THR', 0.05784395799414493, (-18.054000000000002, 1.4609999999999967, -61.95)), ('C', '  71 ', 'THR', 0.0013599335943581536, (-45.47500000000001, 33.994, -26.661)), ('C', ' 136 ', 'LEU', 0.02660073883451053, (-27.043000000000006, 11.426, -58.507999999999996)), ('C', ' 136 ', 'LEU', 0.02636529511953461, (-27.043, 11.426, -58.509)), ('C', ' 189 ', 'GLU', 0.16735161072517013, (-46.83699999999999, 32.295, -58.562)), ('D', '  23 ', 'ILE', 0.12785886073196448, (-20.361, 21.81599999999999, -71.079)), ('D', '  45 ', 'THR', 0.1558971626719171, (-23.034000000000006, 32.595, -64.025)), ('D', '  70 ', 'ARG', 0.18256964335848644, (-53.526, -2.3150000000000013, -39.90999999999999)), ('D', '  72 ', 'LEU', 0.0006158143448193546, (-55.48999999999999, -2.251, -33.918)), ('D', ' 208 ', 'ASN', 0.08715906820808061, (-46.26700000000001, 18.384999999999998, -31.353)), ('D', ' 208 ', 'ASN', 0.08715906820808061, (-46.26700000000001, 18.384999999999998, -31.353))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.25850233397865713, (-22.763, -7.776, -13.265999999999998)), ('C', ' 190 ', 'HIS', ' ', 0.2566172555175131, (-44.059000000000005, 29.860999999999997, -62.003)), ('D', '  52 ', 'THR', ' ', 0.26800170615570523, (-30.324000000000005, 13.609999999999994, -71.223))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.871, (-35.345, 18.023, -33.418)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.844, (7.927, 0.345, -15.421)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.833, (-49.842, -4.06, -51.906)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.781, (-5.605, -19.366, -22.816)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.733, (2.671, 23.469, -26.821)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.731, (-42.179, 16.333, -41.294)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.688, (3.105, 23.316, -26.109)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.663, (-23.287, 2.657, -13.515)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.663, (-23.287, 2.657, -13.515)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.66, (-3.357, 2.249, -10.155)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.66, (-3.357, 2.249, -10.155)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.642, (-43.596, 16.977, -32.048)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.639, (-43.082, 17.075, -32.343)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.629, (-47.691, 19.247, -50.18)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.624, (-8.058, 4.545, -24.924)), (' B  51 DARG  NH2', ' E   3 DLIG  O  ', -0.62, (-8.258, 4.316, -1.326)), (' B  51 CARG  NH2', ' E   3 CLIG  O  ', -0.62, (-8.258, 4.316, -1.326)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.606, (-20.878, 25.28, -35.94)), (' A 189 BGLU  O  ', ' A 190 BHIS  CB ', -0.594, (-29.611, 5.005, -12.206)), (' A 189 AGLU  O  ', ' A 190 AHIS  CB ', -0.594, (-29.611, 5.005, -12.206)), (' A 191 ALEU  C  ', ' A 191 ALEU HD23', -0.594, (-23.433, 2.8, -13.53)), (' A 191 BLEU  C  ', ' A 191 BLEU HD23', -0.594, (-23.433, 2.8, -13.53)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.577, (-36.14, 18.679, -33.579)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.576, (-11.278, 19.61, -7.577)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.569, (-9.162, 1.39, -25.3)), (' B 422  HOH  O  ', ' E   3 DLIG  N2 ', -0.567, (-5.939, 4.982, -8.24)), (' B 422  HOH  O  ', ' E   3 CLIG  N2 ', -0.567, (-5.939, 4.982, -8.24)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.565, (-18.632, -9.3, -42.225)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.563, (-14.418, 11.56, -24.882)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.549, (-4.504, -4.475, -29.506)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.542, (-40.831, 18.211, -40.872)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.535, (-32.135, 14.714, -51.724)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.535, (2.679, 25.841, -25.474)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.534, (-10.769, 13.685, -22.585)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.53, (-32.135, 14.722, -51.717)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.524, (-23.645, 3.008, -14.098)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.524, (-23.645, 3.008, -14.098)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.52, (-13.721, 3.22, -3.506)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.52, (-13.721, 3.22, -3.506)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.515, (-39.202, 20.763, -37.516)), (' A 191 BLEU  C  ', ' A 191 BLEU  CD2', -0.51, (-23.521, 3.233, -14.072)), (' A 191 ALEU  C  ', ' A 191 ALEU  CD2', -0.51, (-23.521, 3.233, -14.072)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.506, (-54.332, -8.558, -50.43)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.505, (-31.327, 16.814, -34.923)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.496, (-6.534, -0.987, -10.834)), (' B  51 DARG  NH2', ' B  98  LEU HD21', -0.493, (-7.787, 5.109, -0.665)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.489, (-6.649, -1.333, -10.514)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.484, (-50.682, 13.583, -46.773)), (' B  51 CARG  NH2', ' B  98  LEU HD21', -0.482, (-7.787, 5.568, -0.787)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.482, (-5.612, 10.64, -22.816)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.475, (-9.297, -5.314, 0.665)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.475, (-9.297, -5.314, 0.665)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.469, (-33.122, 26.527, -56.371)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.467, (-33.36, 26.97, -56.254)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.466, (2.843, 25.664, -25.567)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.463, (-11.603, 12.269, -9.453)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.463, (-11.603, 12.269, -9.453)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.46, (-42.983, 27.713, -56.004)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.458, (-46.188, 11.411, -43.776)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.453, (-42.847, 13.598, -43.181)), (' D  71  THR  O  ', ' D  73 DHIS  ND1', -0.452, (-54.06, -4.331, -36.446)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.449, (-9.803, 10.267, -9.523)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.448, (-6.359, 6.554, -22.592)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.441, (-9.852, 10.308, -9.973)), (' D 132 AMET  HE1', ' D 196 AARG  HD2', -0.44, (-34.594, 14.411, -52.071)), (' D 208 AASN  ND2', ' D 415  HOH  O  ', -0.439, (-45.838, 14.472, -29.971)), (' D 208 BASN  ND2', ' D 415  HOH  O  ', -0.439, (-45.838, 14.472, -29.971)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.436, (-26.284, 38.88, -56.027)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.435, (-20.533, -4.764, -35.611)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.435, (-10.663, -4.062, -13.335)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.433, (-22.248, -4.654, -40.957)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.431, (-25.318, 21.099, -41.367)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.431, (-25.319, 21.099, -41.367)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.42, (-31.823, 20.149, -50.118)), (' A 189 CGLU  O  ', ' A 190 CHIS  C  ', -0.412, (-27.95, 3.491, -12.119)), (' A 189 DGLU  O  ', ' A 190 DHIS  C  ', -0.412, (-27.95, 3.491, -12.119)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.41, (2.752, -3.334, 10.88)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.41, (2.752, -3.334, 10.88)), (' D  17  ILE HD12', ' D  34  THR  CG2', -0.409, (-29.622, 30.104, -66.19)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.405, (-34.483, 12.558, -49.856)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.404, (-1.61, -14.601, -16.533)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.404, (-1.61, -14.601, -16.533)), (' B 189  GLU  OE2', ' B 191  LEU HD11', -0.403, (10.894, 0.585, -14.143)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.403, (10.191, 18.39, -9.36))]
gui = coot_molprobity_todo_list_gui(data=data)
