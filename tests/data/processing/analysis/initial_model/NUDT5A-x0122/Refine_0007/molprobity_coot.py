# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04574387928961889, (-14.088, -7.741, -27.046)), ('A', ' 189 ', 'GLU', 0.02643694239708242, (-30.052000000000007, 5.122, -14.455999999999996)), ('A', ' 189 ', 'GLU', 0.02643694239708242, (-30.052000000000007, 5.122, -14.455999999999996)), ('A', ' 190 ', 'HIS', 0.020813867975821465, (-27.482999999999997, 5.109999999999999, -11.643)), ('A', ' 190 ', 'HIS', 0.020813867975821465, (-27.482999999999997, 5.109999999999999, -11.643)), ('B', '  66 ', 'PRO', 0.061263266462193225, (-1.3830000000000013, 13.988, -17.122)), ('C', '  66 ', 'PRO', 0.03937778754825682, (-35.855000000000004, 27.82, -38.245))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.039999999999997, 3.558, -33.973)), ('D', ' 208 ', 'ASN', None, (-45.687, 18.296999999999993, -32.883)), ('D', ' 208 ', 'ASN', None, (-45.687, 18.296999999999993, -32.883))]
data['rota'] = [('A', '  14 ', 'LYS', 0.005583725160197271, (15.565, -0.495, -2.422)), ('A', '  38 ', 'ASP', 0.10390108256738421, (11.079999999999997, 1.9619999999999997, 3.115)), ('A', '  70 ', 'ARG', 0.021257762960507378, (-19.214, -6.907000000000002, -38.737)), ('A', ' 191 ', 'LEU', 0.00021700565756222007, (-24.89199999999999, 2.5059999999999976, -12.594)), ('B', '  31 ', 'LEU', 0.07799821155339164, (-13.745999999999999, -6.894, 5.266999999999999)), ('B', '  43 ', 'THR', 0.13951101716964365, (-30.403999999999996, -14.988000000000001, -0.8199999999999997)), ('C', '  29 ', 'VAL', 0.009166691408373496, (-19.122, 20.769, -59.934)), ('C', '  35 ', 'THR', 0.05590255002927615, (-18.050999999999995, 1.4519999999999964, -61.948)), ('C', '  71 ', 'THR', 0.0013599335943581536, (-45.46799999999998, 34.007, -26.656)), ('C', ' 136 ', 'LEU', 0.028480173392247354, (-27.045, 11.425999999999998, -58.501)), ('C', ' 136 ', 'LEU', 0.02816072063520069, (-27.045000000000005, 11.427, -58.502)), ('C', ' 189 ', 'GLU', 0.1766586062452606, (-46.845, 32.304, -58.563)), ('D', '  23 ', 'ILE', 0.1404559667922308, (-20.364999999999995, 21.83, -71.073)), ('D', '  45 ', 'THR', 0.1451083012701639, (-23.027000000000008, 32.589, -64.027)), ('D', '  70 ', 'ARG', 0.10848211411562815, (-53.525, -2.3130000000000024, -39.906)), ('D', '  72 ', 'LEU', 0.0008054215156358604, (-55.48899999999999, -2.248999999999999, -33.916))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.25761211056496575, (-22.769, -7.783, -13.267)), ('C', ' 190 ', 'HIS', ' ', 0.25467057494592593, (-44.06699999999999, 29.891999999999996, -62.013)), ('D', '  52 ', 'THR', ' ', 0.26670300298648314, (-30.289999999999992, 13.643999999999997, -71.213))]
data['probe'] = [(' B  51 DARG  NH2', ' E   3 DLIG  O  ', -0.926, (-8.76, 4.475, -1.682)), (' B  51 CARG  NH2', ' E   3 CLIG  O  ', -0.926, (-8.76, 4.475, -1.682)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.874, (-35.352, 18.025, -33.41)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.835, (-49.841, -4.06, -51.905)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.83, (8.093, 0.531, -15.386)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.779, (-5.544, -19.389, -22.57)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.739, (-42.459, 15.944, -41.527)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.72, (2.713, 23.477, -26.79)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.676, (-43.583, 16.966, -32.052)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.672, (2.207, 23.099, -26.275)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.667, (-43.04, 17.098, -32.381)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.643, (-3.36, 2.254, -10.156)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.643, (-3.36, 2.254, -10.156)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.629, (-8.058, 4.544, -24.924)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.621, (-47.68, 19.229, -50.167)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.606, (-20.879, 25.282, -35.952)), (' B 422  HOH  O  ', ' E   3 DLIG  N2 ', -0.586, (-5.936, 5.032, -8.27)), (' B 422  HOH  O  ', ' E   3 CLIG  N2 ', -0.586, (-5.936, 5.032, -8.27)), (' D  71  THR  O  ', ' D  73 DHIS  ND1', -0.581, (-54.078, -4.326, -36.453)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.58, (-11.275, 19.604, -7.568)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.573, (-36.15, 18.676, -33.57)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.571, (-9.16, 1.393, -25.297)), (' A 189 AGLU  O  ', ' A 190 AHIS  CB ', -0.569, (-29.443, 5.031, -11.904)), (' A 189 BGLU  O  ', ' A 190 BHIS  CB ', -0.569, (-29.443, 5.031, -11.904)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.568, (-18.681, -8.809, -42.517)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.559, (2.5, 25.966, -25.422)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.557, (-14.717, 11.309, -24.631)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.548, (-4.498, -4.471, -29.51)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.543, (-40.833, 18.207, -40.872)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.533, (-10.785, 13.673, -22.59)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.532, (-32.24, 14.182, -51.332)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.527, (-32.133, 14.732, -51.71)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.514, (-31.339, 16.816, -34.927)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.513, (-39.203, 20.764, -37.517)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.512, (2.695, 25.622, -25.769)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.508, (-13.738, 3.231, -3.489)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.508, (-13.738, 3.231, -3.489)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.502, (-6.536, -0.994, -10.838)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.493, (-6.648, -1.335, -10.507)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.492, (-54.327, -8.579, -50.419)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.481, (-5.616, 10.644, -22.81)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.48, (-50.685, 13.574, -46.768)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.469, (-46.188, 11.407, -43.772)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.46, (-42.984, 27.709, -56.01)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.458, (-33.371, 26.955, -56.24)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.458, (-33.371, 26.955, -56.239)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.453, (-42.849, 13.602, -43.179)), (' D 132 AMET  HE1', ' D 196 AARG  HD2', -0.453, (-34.613, 14.404, -52.069)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.452, (-9.312, -5.314, 0.908)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.452, (-9.312, -5.314, 0.908)), (' B  92  ILE  CD1', ' B 191  LEU HD13', -0.451, (7.21, 0.327, -14.656)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.448, (-6.369, 6.541, -22.591)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.442, (-10.602, -4.317, -13.352)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.438, (-22.248, -4.661, -40.957)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.437, (-11.665, 12.111, -9.259)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.437, (-11.665, 12.111, -9.259)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.431, (-1.387, -14.602, -16.713)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.431, (-1.387, -14.602, -16.713)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.427, (-25.31, 21.087, -41.353)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.427, (-25.31, 21.087, -41.354)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.426, (-5.794, -19.843, -22.59)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.425, (-20.531, -4.776, -35.605)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.423, (-9.807, 10.267, -9.521)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.421, (-26.286, 38.837, -56.047)), (' D 112  GLU  OE2', ' D 407  HOH  O  ', -0.421, (-38.204, 1.076, -59.734)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.417, (-10.066, 10.308, -9.874)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.413, (-31.819, 20.153, -50.115)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.404, (-34.482, 12.556, -49.859)), (' C  64  VAL  O  ', ' C  66  PRO  HD3', -0.404, (-34.617, 26.217, -41.648)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.403, (2.736, -3.295, 10.912)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.403, (2.736, -3.295, 10.912)), (' D 110  LEU  HG ', ' D 123  ILE HD11', -0.403, (-50.697, 5.139, -56.89)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.401, (10.21, 18.394, -9.343))]
gui = coot_molprobity_todo_list_gui(data=data)
