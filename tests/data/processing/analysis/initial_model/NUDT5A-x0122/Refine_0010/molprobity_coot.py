# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.045136822666340407, (-14.085, -7.735000000000002, -27.049999999999997)), ('A', ' 189 ', 'GLU', 0.0044603973824076685, (-30.15599999999999, 4.6949999999999985, -15.607999999999997)), ('A', ' 189 ', 'GLU', 0.0044603973824076685, (-30.15599999999999, 4.6949999999999985, -15.607999999999997)), ('A', ' 190 ', 'HIS', 0.02226487868451384, (-27.754999999999995, 5.300999999999999, -12.715)), ('A', ' 190 ', 'HIS', 0.02226487868451384, (-27.754999999999995, 5.300999999999999, -12.715)), ('B', '  66 ', 'PRO', 0.06251568355126207, (-1.3800000000000008, 13.995999999999999, -17.123)), ('C', '  24 ', 'SER', 0.042623332968151184, (-15.678000000000003, 16.809999999999995, -66.883)), ('C', '  24 ', 'SER', 0.04341603681858266, (-15.678000000000003, 16.809999999999995, -66.883)), ('C', '  53 ', 'THR', 0.0334776719526706, (-13.000999999999998, 18.214000000000006, -52.762999999999984)), ('C', '  53 ', 'THR', 0.033715797009856954, (-13.001999999999999, 18.214000000000006, -52.762999999999984)), ('C', '  66 ', 'PRO', 0.04096493999246307, (-35.85, 27.83, -38.257))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.033999999999999, 3.5939999999999994, -33.978))]
data['rota'] = [('A', '  14 ', 'LYS', 0.06411892241108523, (15.527, -0.506, -2.44)), ('A', '  38 ', 'ASP', 0.09264738696831373, (11.081, 1.964, 3.12)), ('A', '  70 ', 'ARG', 0.016930143935754084, (-19.209, -6.904, -38.748)), ('A', ' 191 ', 'LEU', 0.0, (-24.973999999999993, 2.753, -12.397)), ('A', ' 191 ', 'LEU', 0.0, (-24.973999999999993, 2.753, -12.397)), ('A', ' 191 ', 'LEU', 0.0, (-24.948, 2.5359999999999987, -12.559)), ('A', ' 191 ', 'LEU', 0.0, (-24.948, 2.5359999999999987, -12.559)), ('B', '  31 ', 'LEU', 0.08668422599962729, (-13.753, -6.889000000000001, 5.271999999999999)), ('B', '  38 ', 'ASP', 0.24618281616397092, (-30.186000000000003, -12.575, -6.470999999999999)), ('B', '  43 ', 'THR', 0.15239387509602642, (-30.394999999999996, -14.992999999999999, -0.799)), ('B', '  53 ', 'THR', 0.27588598904354455, (-14.003, 6.168999999999999, 6.183)), ('B', '  53 ', 'THR', 0.27588598904354455, (-14.003, 6.168999999999999, 6.183)), ('C', '  29 ', 'VAL', 0.08095618422293617, (-19.104, 20.789999999999992, -59.884)), ('C', '  35 ', 'THR', 0.07559919704380672, (-18.045, 1.4659999999999975, -61.957)), ('C', '  71 ', 'THR', 0.01024055440705049, (-45.48500000000001, 33.95399999999999, -26.669)), ('C', ' 136 ', 'LEU', 0.024460876407742686, (-27.049, 11.428000000000003, -58.512)), ('C', ' 136 ', 'LEU', 0.02422828426341026, (-27.049, 11.428000000000003, -58.513)), ('C', ' 189 ', 'GLU', 0.17653551008759186, (-46.848, 32.29999999999999, -58.558)), ('D', '  14 ', 'LYS', 0.06960885316632878, (-37.218, 40.133, -61.794)), ('D', '  23 ', 'ILE', 0.14569549237557483, (-20.35900000000001, 21.824999999999996, -71.077)), ('D', '  43 ', 'THR', 0.2634564792206798, (-24.766000000000005, 39.356, -65.33)), ('D', '  45 ', 'THR', 0.13221451893986594, (-23.032000000000004, 32.60000000000001, -64.022)), ('D', '  72 ', 'LEU', 0.02409919530340947, (-55.494999999999976, -2.298000000000002, -33.86)), ('D', '  72 ', 'LEU', 0.02409919530340947, (-55.494999999999976, -2.298000000000002, -33.86)), ('D', '  72 ', 'LEU', 0.02205195388376947, (-55.512, -2.301000000000001, -33.85)), ('D', '  72 ', 'LEU', 0.02205195388376947, (-55.512, -2.301000000000001, -33.85)), ('D', ' 208 ', 'ASN', 0.008867719451875663, (-48.09300000000001, 20.20499999999999, -32.523)), ('D', ' 208 ', 'ASN', 0.008867719451875663, (-48.09300000000001, 20.20499999999999, -32.523))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2628949434282799, (-22.758, -7.77, -13.264)), ('C', ' 190 ', 'HIS', ' ', 0.258031956164366, (-44.07400000000001, 29.864000000000004, -62.0))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.895, (-35.184, 18.213, -33.397)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.858, (8.289, 0.027, -15.143)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.823, (-49.851, -4.047, -51.896)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.787, (-5.605, -19.366, -22.825)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.754, (-43.644, 16.853, -32.302)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.75, (-43.026, 17.017, -32.495)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.74, (-42.439, 15.944, -41.552)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.727, (2.668, 23.474, -26.834)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.716, (-23.44, 2.989, -14.211)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.716, (-23.44, 2.989, -14.211)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.69, (3.103, 23.326, -26.121)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.677, (-3.36, 2.3, -10.124)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.677, (-3.36, 2.3, -10.124)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.64, (-8.053, 4.56, -24.921)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.616, (-47.715, 19.257, -50.18)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.601, (-20.878, 25.27, -35.945)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.577, (-54.317, -8.582, -50.419)), (' D 206 BHIS  C  ', ' D 208 BASN  N  ', -0.573, (-44.182, 19.257, -33.622)), (' A 191 ALEU  C  ', ' A 191 ALEU HD23', -0.573, (-23.415, 3.093, -13.882)), (' D 206 AHIS  C  ', ' D 208 AASN  N  ', -0.573, (-44.182, 19.257, -33.622)), (' A 191 BLEU  C  ', ' A 191 BLEU HD23', -0.573, (-23.415, 3.093, -13.882)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.57, (-9.156, 1.408, -25.299)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.567, (-14.455, 11.59, -24.894)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.561, (-11.268, 19.596, -7.568)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.558, (-40.842, 18.205, -40.874)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.547, (-23.565, 3.207, -14.221)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.547, (-23.565, 3.207, -14.221)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.545, (-4.503, -4.474, -29.487)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.538, (-18.634, -9.285, -42.247)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.532, (-32.305, 14.433, -51.326)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.532, (-10.766, 13.684, -22.591)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.527, (-32.118, 14.696, -51.717)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.519, (2.669, 25.852, -25.492)), (' D 206 BHIS  O  ', ' D 208 BASN  C  ', -0.517, (-44.334, 20.256, -32.95)), (' D 206 AHIS  O  ', ' D 208 AASN  C  ', -0.517, (-44.334, 20.256, -32.95)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.511, (-13.717, 3.246, -3.512)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.511, (-13.717, 3.246, -3.512)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.489, (-5.61, 10.637, -22.822)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.489, (-6.551, -0.993, -10.832)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.487, (-31.305, 16.806, -34.9)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.485, (-11.538, 12.037, -9.471)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.485, (-11.538, 12.037, -9.471)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.484, (-32.872, 26.556, -56.381)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.484, (-50.676, 13.581, -46.776)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.483, (-33.347, 26.983, -56.252)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.481, (-6.663, -1.33, -10.515)), (' D 208 DASN  HA ', ' D 208 DASN HD22', -0.466, (-49.322, 21.253, -33.123)), (' D 208 CASN  HA ', ' D 208 CASN HD22', -0.466, (-49.322, 21.253, -33.123)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.465, (-42.849, 13.596, -43.186)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.463, (-9.867, 10.516, -9.515)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.456, (-46.18, 11.419, -43.773)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.454, (-25.325, 21.119, -41.403)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.454, (-25.325, 21.119, -41.403)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.454, (-9.878, 10.314, -9.982)), (' A  92  ILE HD11', ' A 191 DLEU HD11', -0.452, (-24.731, 1.509, -17.594)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.451, (-42.978, 27.72, -56.003)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.45, (2.841, 25.674, -25.579)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.446, (-9.316, -5.281, 0.7)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.446, (-9.316, -5.281, 0.7)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.443, (-6.351, 6.552, -22.595)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.442, (2.764, -3.342, 10.867)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.442, (2.764, -3.342, 10.867)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.44, (-26.27, 38.957, -55.995)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.434, (-20.535, -4.75, -35.618)), (' A  92  ILE HD11', ' A 191 CLEU HD11', -0.434, (-24.396, 1.314, -17.848)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.431, (-10.657, -4.067, -13.334)), (' D 206 AHIS  O  ', ' D 208 AASN  N  ', -0.428, (-44.535, 19.64, -33.605)), (' D 206 BHIS  O  ', ' D 208 BASN  N  ', -0.428, (-44.535, 19.64, -33.605)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.427, (-31.902, 20.28, -50.321)), (' C 403  HOH  O  ', ' D 206 DHIS  HE1', -0.426, (-36.184, 18.816, -33.481)), (' C 403  HOH  O  ', ' D 206 BHIS  HE1', -0.426, (-36.185, 18.819, -33.478)), (' C 403  HOH  O  ', ' D 206 CHIS  HE1', -0.426, (-36.184, 18.816, -33.481)), (' C 403  HOH  O  ', ' D 206 AHIS  HE1', -0.426, (-36.185, 18.819, -33.478)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.419, (-22.243, -4.655, -40.956)), (' D  17  ILE HD12', ' D  34  THR  CG2', -0.417, (-29.615, 30.122, -66.188)), (' D 132 AMET  HE1', ' D 196 AARG  HD2', -0.412, (-34.454, 14.545, -52.492)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.411, (-9.43, -1.624, -27.867)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.408, (-43.324, 28.575, -53.297)), (' A 191 BLEU  C  ', ' A 191 BLEU  CD2', -0.407, (-24.035, 3.299, -13.814)), (' A 191 ALEU  C  ', ' A 191 ALEU  CD2', -0.407, (-24.035, 3.299, -13.814)), (' B  51 DARG  HD2', ' B 413  HOH  O  ', -0.403, (-11.443, 5.993, 1.805)), (' B  51 CARG  HD2', ' B 413  HOH  O  ', -0.403, (-11.443, 5.993, 1.805)), (' C  31  LEU HD23', ' C  32  GLU  H  ', -0.401, (-20.31, 12.109, -64.025))]
gui = coot_molprobity_todo_list_gui(data=data)
