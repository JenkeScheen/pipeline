# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04385379078823464, (-14.083, -7.728999999999999, -27.052999999999994)), ('A', ' 189 ', 'GLU', 0.0041219220093656715, (-30.154, 4.645999999999999, -15.664)), ('A', ' 189 ', 'GLU', 0.0041219220093656715, (-30.154, 4.645999999999999, -15.664)), ('A', ' 190 ', 'HIS', 0.005495559914738975, (-27.685000000000002, 5.312999999999999, -12.840999999999996)), ('A', ' 190 ', 'HIS', 0.005495559914738975, (-27.685000000000002, 5.312999999999999, -12.840999999999996)), ('B', '  66 ', 'PRO', 0.06499234097824678, (-1.3750000000000004, 13.988999999999999, -17.13)), ('C', '  24 ', 'SER', 0.04004647719423016, (-15.621000000000002, 16.82, -66.861)), ('C', '  24 ', 'SER', 0.040341070696661256, (-15.618, 16.82, -66.864)), ('C', '  53 ', 'THR', 0.02534270653163565, (-12.992000000000003, 18.158, -52.660999999999994)), ('C', '  53 ', 'THR', 0.025452629935159857, (-12.987, 18.159999999999997, -52.660999999999994)), ('C', '  66 ', 'PRO', 0.04135504736168776, (-35.845, 27.83, -38.258))]
data['omega'] = [('D', ' 161 ', 'LYS', None, (-40.743, -6.948, -56.994))]
data['rota'] = [('A', '  14 ', 'LYS', 0.08291020289532444, (15.537999999999995, -0.512, -2.422)), ('A', '  38 ', 'ASP', 0.09155334358761782, (11.084, 1.9770000000000003, 3.129)), ('A', '  70 ', 'ARG', 0.021398131776186987, (-19.214999999999996, -6.894, -38.748)), ('A', ' 125 ', 'GLU', 0.18273122149647442, (-3.3859999999999992, -9.894, -27.930999999999994)), ('A', ' 191 ', 'LEU', 0.0, (-24.952, 2.7119999999999997, -12.442)), ('A', ' 191 ', 'LEU', 0.0, (-24.952, 2.7119999999999997, -12.442)), ('A', ' 191 ', 'LEU', 0.010971227168443221, (-24.921000000000003, 2.5459999999999985, -12.556999999999997)), ('A', ' 191 ', 'LEU', 0.010971227168443221, (-24.921000000000003, 2.5459999999999985, -12.556999999999997)), ('B', '  31 ', 'LEU', 0.07957465439390457, (-13.759000000000002, -6.874, 5.269)), ('B', '  38 ', 'ASP', 0.28104409283569076, (-30.19099999999999, -12.569, -6.465999999999999)), ('B', '  43 ', 'THR', 0.2968838158616399, (-30.388000000000012, -14.985000000000001, -0.796)), ('B', ' 208 ', 'ASN', 0.0032601318046196334, (-9.660999999999998, 4.579000000000001, -35.454)), ('B', ' 208 ', 'ASN', 0.0032601318046196334, (-9.660999999999998, 4.579000000000001, -35.454)), ('B', ' 208 ', 'ASN', 0.0, (-9.639000000000001, 4.610999999999998, -35.463)), ('B', ' 208 ', 'ASN', 0.0, (-9.639000000000001, 4.610999999999998, -35.463)), ('C', '  29 ', 'VAL', 0.06474269420844586, (-19.116, 20.769999999999996, -59.89299999999999)), ('C', '  35 ', 'THR', 0.07576044577758374, (-18.055999999999997, 1.458999999999996, -61.967)), ('C', '  71 ', 'THR', 0.01823540620902052, (-45.48900000000001, 33.956, -26.664999999999996)), ('C', ' 136 ', 'LEU', 0.01784826626773874, (-27.039999999999992, 11.431, -58.516)), ('C', ' 136 ', 'LEU', 0.017720876051764922, (-27.039999999999996, 11.431000000000001, -58.51699999999999)), ('C', ' 189 ', 'GLU', 0.20693086349067547, (-46.851, 32.311, -58.60099999999999)), ('D', '  23 ', 'ILE', 0.27141326777588703, (-20.352000000000004, 21.848, -71.056)), ('D', '  45 ', 'THR', 0.15889860873776998, (-23.027000000000008, 32.615, -64.004)), ('D', '  72 ', 'LEU', 0.0003796738265425863, (-55.494999999999976, -2.26, -33.909))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2673875827078953, (-22.750999999999994, -7.761000000000001, -13.251)), ('C', ' 190 ', 'HIS', ' ', 0.25429264243992306, (-44.05400000000001, 29.875999999999998, -62.003))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.902, (-35.195, 18.202, -33.391)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.875, (7.909, 0.318, -15.434)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.813, (-49.995, -3.788, -51.804)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.797, (-5.6, -19.358, -22.809)), (' A 191 ALEU  N  ', ' A 191 ALEU HD22', -0.751, (-25.579, 4.219, -13.547)), (' A 191 BLEU  N  ', ' A 191 BLEU HD22', -0.751, (-25.579, 4.219, -13.547)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.748, (-42.434, 15.943, -41.551)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.745, (2.682, 23.444, -26.839)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.694, (-3.331, 2.285, -10.111)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.694, (-3.331, 2.285, -10.111)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.69, (3.114, 23.315, -26.126)), (' B 208 BASN  C  ', ' B 208 BASN  OD1', -0.669, (-8.621, 3.305, -36.948)), (' B 208 AASN  C  ', ' B 208 AASN  OD1', -0.669, (-8.621, 3.305, -36.948)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.644, (-8.068, 4.573, -24.937)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.611, (-47.692, 19.236, -50.152)), (' A 191 BLEU  H  ', ' A 191 BLEU HD22', -0.598, (-25.306, 4.659, -13.528)), (' A 191 ALEU  H  ', ' A 191 ALEU HD22', -0.598, (-25.306, 4.659, -13.528)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.595, (-20.884, 25.276, -35.945)), (' A  92  ILE HD11', ' A 191 DLEU HD11', -0.594, (-24.96, 1.389, -17.917)), (' A  92  ILE HD11', ' A 191 CLEU HD11', -0.593, (-24.557, 1.224, -18.19)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.584, (-14.447, 11.62, -24.885)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.572, (-23.53, 2.815, -13.673)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.572, (-23.53, 2.815, -13.673)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.571, (-11.263, 19.606, -7.567)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.56, (-40.842, 18.207, -40.877)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.558, (-9.159, 1.405, -25.295)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.542, (-4.498, -4.47, -29.488)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.533, (-18.58, -8.874, -42.559)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.531, (-10.762, 13.687, -22.597)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.531, (-32.134, 14.716, -51.74)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.522, (-32.004, 14.506, -51.738)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.51, (2.676, 25.847, -25.516)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.497, (-50.695, 13.602, -46.765)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.496, (-33.329, 26.994, -56.236)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.494, (-33.329, 26.994, -56.241)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.494, (-5.764, 10.423, -23.079)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.489, (-13.739, 3.266, -3.51)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.489, (-13.739, 3.266, -3.51)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.474, (-31.55, 16.845, -34.863)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.473, (-11.535, 12.034, -9.449)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.473, (-11.535, 12.034, -9.449)), (' D  71  THR  O  ', ' D  73 BHIS  ND1', -0.472, (-54.041, -4.342, -36.453)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.469, (-25.579, 21.176, -41.451)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.468, (-25.579, 21.176, -41.45)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.46, (-42.844, 13.597, -43.177)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.459, (-6.56, -0.994, -10.824)), (' B 208 DASN  HB3', ' F  23 DHOH  O  ', -0.456, (-8.621, 7.008, -34.728)), (' B 208 CASN  HB3', ' F  23 CHOH  O  ', -0.456, (-8.621, 7.008, -34.728)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.455, (-9.868, 10.516, -9.517)), (' C 403  HOH  O  ', ' D 206 AHIS  HE1', -0.454, (-36.23, 19.085, -33.363)), (' C 403  HOH  O  ', ' D 206 BHIS  HE1', -0.454, (-36.23, 19.085, -33.363)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.45, (2.608, -3.179, 10.863)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.45, (2.608, -3.179, 10.863)), (' C  61  GLY  O  ', ' C 141 AILE  HA ', -0.449, (-24.539, 19.676, -45.012)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.449, (-6.644, -1.319, -10.524)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.447, (-6.349, 6.556, -22.593)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.447, (-9.876, 10.308, -9.977)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.445, (-20.347, -4.75, -35.818)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.444, (2.852, 25.663, -25.584)), (' B 189  GLU  OE2', ' B 191  LEU HD11', -0.438, (10.529, 0.39, -13.93)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.436, (-10.662, -4.063, -13.343)), (' C 200  TYR  OH ', ' D 206 CHIS  HD2', -0.436, (-39.492, 21.013, -37.744)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.436, (-42.585, 27.658, -56.324)), (' C 200  TYR  OH ', ' D 206 DHIS  HD2', -0.436, (-39.492, 21.013, -37.744)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.431, (-46.32, 11.442, -43.555)), (' C  61  GLY  O  ', ' C 141 BILE  HA ', -0.429, (-24.631, 20.143, -44.932)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.429, (-26.275, 38.917, -55.992)), (' C 403  HOH  O  ', ' D 206 CHIS  HE1', -0.427, (-36.239, 18.797, -33.355)), (' C 403  HOH  O  ', ' D 206 DHIS  HE1', -0.427, (-36.239, 18.797, -33.355)), (' D 112  GLU  OE2', ' D 407  HOH  O  ', -0.426, (-38.204, 1.066, -59.732)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.422, (-9.334, -5.278, 0.748)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.422, (-9.334, -5.278, 0.748)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.418, (-31.846, 20.114, -50.134)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.413, (-22.236, -4.639, -40.963)), (' C  31  LEU HD23', ' C  32  GLU  H  ', -0.412, (-20.324, 12.093, -64.041)), (' D  17  ILE HD12', ' D  34  THR  CG2', -0.411, (-29.621, 30.137, -66.181)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.41, (-48.358, 27.631, -35.258)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.409, (-1.468, -14.64, -16.805)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.409, (-1.468, -14.64, -16.805)), (' C  31  LEU HD23', ' C  32  GLU  N  ', -0.407, (-20.092, 12.275, -64.208)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.407, (-23.412, 3.013, -14.17)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.407, (-23.412, 3.013, -14.17)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.406, (-43.224, 28.581, -52.891)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.406, (-9.428, -1.622, -27.87)), (' A  86  PRO  HD3', ' B  46  TRP  CD1', -0.404, (-19.399, -8.36, -3.692))]
gui = coot_molprobity_todo_list_gui(data=data)
