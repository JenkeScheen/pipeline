# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  53 ', 'THR', 0.045133431516435, (-6.748999999999998, -19.109999999999996, -3.370999999999999)), ('A', '  53 ', 'THR', 0.045133431516435, (-6.748999999999998, -19.109999999999996, -3.370999999999999)), ('A', '  54 ', 'ARG', 0.010324056525210876, (-4.622999999999998, -18.134999999999994, -6.45)), ('A', '  54 ', 'ARG', 0.010324056525210876, (-4.622999999999998, -18.134999999999994, -6.45)), ('A', '  55 ', 'LYS', 0.028630989416930295, (-2.5489999999999995, -21.228, -7.339)), ('A', '  55 ', 'LYS', 0.028630989416930295, (-2.5489999999999995, -21.228, -7.339)), ('A', '  66 ', 'PRO', 0.04639857295117622, (-14.083, -7.739000000000001, -27.044999999999998)), ('B', '  53 ', 'THR', 0.03709518911420042, (-13.356999999999996, 6.134, 6.621)), ('B', '  53 ', 'THR', 0.03709518911420042, (-13.356999999999996, 6.134, 6.621)), ('B', '  66 ', 'PRO', 0.06108910248197922, (-1.3840000000000012, 13.987000000000002, -17.117)), ('C', '  24 ', 'SER', 0.017129449382191103, (-15.652, 16.875999999999998, -66.935)), ('C', '  54 ', 'ARG', 0.025806754624432084, (-14.864000000000004, 17.648999999999994, -50.9)), ('C', '  54 ', 'ARG', 0.02565974220556699, (-14.861, 17.648999999999997, -50.89799999999999)), ('C', '  66 ', 'PRO', 0.040386143321837514, (-35.86, 27.828, -38.243))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.071000000000002, 3.540999999999997, -33.999)), ('D', ' 208 ', 'ASN', None, (-45.78100000000001, 18.284999999999997, -32.857))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.574, -0.501, -2.426)), ('A', '  38 ', 'ASP', 0.06758723862972744, (11.083, 1.963, 3.13)), ('A', '  43 ', 'THR', 0.26367539196818174, (10.27, -0.371, 8.823)), ('A', '  70 ', 'ARG', 0.024364408002586983, (-19.226, -6.913, -38.73)), ('A', ' 191 ', 'LEU', 0.0, (-24.913, 2.5189999999999975, -12.589)), ('B', '  31 ', 'LEU', 0.07297942465145155, (-13.736999999999995, -6.894, 5.261999999999999)), ('B', '  43 ', 'THR', 0.11076759071844819, (-30.41, -14.988, -0.8339999999999997)), ('C', '  29 ', 'VAL', 0.003150532575091347, (-19.155, 20.738, -59.929)), ('C', '  35 ', 'THR', 0.050602093466294774, (-18.064, 1.4450000000000003, -61.954)), ('C', '  71 ', 'THR', 0.0027198671887163073, (-45.46599999999999, 34.017, -26.656)), ('C', ' 136 ', 'LEU', 0.028033603898496462, (-27.04100000000001, 11.423999999999998, -58.496)), ('C', ' 136 ', 'LEU', 0.028062117241139658, (-27.04, 11.422999999999993, -58.496)), ('C', ' 189 ', 'GLU', 0.18846716243898207, (-46.849, 32.31199999999999, -58.558)), ('D', '  23 ', 'ILE', 0.14295936172068713, (-20.369, 21.86, -71.072)), ('D', '  43 ', 'THR', 0.1863217299441833, (-24.796, 39.354, -65.355)), ('D', '  45 ', 'THR', 0.1802072816095994, (-23.039, 32.602999999999994, -64.02)), ('D', '  70 ', 'ARG', 0.1260980484279438, (-53.51999999999998, -2.3050000000000024, -39.913999999999994)), ('D', '  72 ', 'LEU', 0.005706685491652495, (-55.506, -2.270000000000001, -33.894))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2600522067549946, (-22.76599999999999, -7.774, -13.268)), ('D', '  52 ', 'THR', ' ', 0.26653526269484035, (-30.291999999999994, 13.676, -71.19))]
data['probe'] = [(' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.946, (-43.108, 17.028, -32.812)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.873, (-35.343, 18.04, -33.409)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.827, (-49.655, -4.474, -51.459)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.801, (8.468, 0.471, -14.883)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.785, (-5.616, -19.364, -22.797)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.739, (-42.439, 15.923, -41.539)), (' B 422  HOH  O  ', ' E   3 DLIG  N2 ', -0.724, (-6.154, 4.974, -8.328)), (' B 422  HOH  O  ', ' E   3 CLIG  N2 ', -0.724, (-6.154, 4.974, -8.328)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.64, (-20.882, 25.3, -35.95)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.638, (-47.684, 19.223, -50.187)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.638, (-8.062, 4.549, -24.926)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.619, (2.309, 23.306, -26.373)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.565, (-36.151, 18.68, -33.571)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.561, (-10.787, 13.687, -22.587)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.559, (-9.161, 1.39, -25.292)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.556, (-14.7, 11.288, -24.592)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.556, (2.829, 23.523, -26.677)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.553, (-11.343, 19.451, -7.324)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.553, (-18.646, -9.29, -42.237)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.552, (-4.499, -4.474, -29.499)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.543, (-40.831, 18.213, -40.871)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.527, (-31.344, 16.838, -34.962)), (' B  51 DARG  HD2', ' B 413  HOH  O  ', -0.526, (-11.482, 5.596, 1.478)), (' B  51 CARG  HD2', ' B 413  HOH  O  ', -0.526, (-11.482, 5.596, 1.478)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.524, (-3.452, 2.206, -9.908)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.524, (-3.452, 2.206, -9.908)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.516, (-32.242, 14.203, -51.333)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.513, (-39.205, 20.766, -37.524)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.508, (-54.307, -8.591, -50.412)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.507, (-6.537, -0.985, -10.844)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.503, (-31.989, 14.567, -51.682)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.496, (-6.642, -1.325, -10.503)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.494, (-53.917, -4.119, -36.432)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.489, (-50.71, 13.541, -46.772)), (' B  92  ILE  CD1', ' B 191  LEU HD13', -0.487, (7.276, 0.208, -14.864)), (' D 132 AMET  HE1', ' D 196 AARG  HD2', -0.482, (-34.543, 14.16, -52.045)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.476, (-11.61, 12.161, -9.522)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.476, (-11.61, 12.161, -9.522)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.474, (-42.974, 27.709, -56.018)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.469, (-5.721, 10.405, -22.821)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.466, (-22.106, -4.677, -41.395)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.465, (-1.502, -14.623, -16.679)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.465, (-1.502, -14.623, -16.679)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.464, (-13.653, 3.2, -3.263)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.464, (-13.653, 3.2, -3.263)), (' D 112  GLU  OE2', ' D 407  HOH  O  ', -0.463, (-38.209, 1.088, -59.72)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.462, (-42.862, 13.587, -43.176)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.447, (-10.622, -4.329, -13.363)), (' C 194  ASP  HA ', ' D 131 DCYS  HG ', -0.441, (-36.767, 22.429, -53.937)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.44, (-26.692, 38.832, -56.192)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.438, (-20.508, -4.776, -35.587)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.436, (-46.34, 11.23, -43.784)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.435, (-9.884, 10.509, -9.514)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.432, (-9.322, -5.309, 0.871)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.432, (-9.322, -5.309, 0.871)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.428, (-9.846, 10.358, -9.967)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.426, (-6.46, 6.319, -22.48)), (' B 189  GLU  OE2', ' B 191  LEU HD11', -0.425, (10.884, 0.568, -14.149)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.425, (-25.308, 21.081, -41.362)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.424, (-25.307, 21.08, -41.362)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.42, (-31.83, 20.145, -50.129)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.407, (-34.481, 12.55, -49.868)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.406, (-33.143, 26.906, -56.231)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.406, (-33.141, 26.906, -56.231)), (' D 206  HIS  O  ', ' D 208  ASN  C  ', -0.404, (-44.1, 20.238, -32.845)), (' C  64  VAL  O  ', ' C  66  PRO  HD3', -0.402, (-34.623, 26.219, -41.644)), (' A  86  PRO  HD3', ' B  46  TRP  CD1', -0.402, (-19.395, -8.353, -3.694))]
gui = coot_molprobity_todo_list_gui(data=data)
