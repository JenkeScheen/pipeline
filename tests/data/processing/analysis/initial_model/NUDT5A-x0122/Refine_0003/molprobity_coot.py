# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  54 ', 'ARG', 0.00028258199999999997, (-1.4900000000000007, -19.66, -4.254)), ('A', '  54 ', 'ARG', 0.00028258199999999997, (-1.4900000000000007, -19.66, -4.254)), ('A', '  66 ', 'PRO', 0.04637167666929406, (-14.081000000000001, -7.748999999999999, -27.049)), ('B', '  53 ', 'THR', 0.04636576687175662, (-13.394, 6.121, 6.908)), ('B', '  53 ', 'THR', 0.04636576687175662, (-13.394, 6.121, 6.908)), ('B', '  66 ', 'PRO', 0.07619268741515146, (-1.389000000000002, 13.971999999999992, -17.11)), ('C', '  24 ', 'SER', 0.007183596778287401, (-15.693000000000001, 16.781999999999996, -66.944)), ('C', '  54 ', 'ARG', 0.03473227772899416, (-14.891000000000005, 17.717, -51.099)), ('C', '  54 ', 'ARG', 0.03505180760997651, (-14.888, 17.718, -51.100999999999985)), ('C', '  66 ', 'PRO', 0.04157406886148515, (-35.87000000000001, 27.816999999999997, -38.244)), ('D', ' 190 ', 'HIS', 0.007329753400741739, (-22.392999999999997, 2.059000000000001, -42.522999999999996))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.03430458483020164, (15.559999999999997, -0.517, -2.422)), ('A', '  38 ', 'ASP', 0.023854234338758436, (11.069999999999999, 1.968, 3.149)), ('A', '  43 ', 'THR', 0.21952122444875793, (10.264, -0.3889999999999998, 8.819)), ('A', '  70 ', 'ARG', 0.03316451229083836, (-19.242, -6.908, -38.734)), ('A', ' 191 ', 'LEU', 0.0, (-24.922, 2.5479999999999996, -12.537)), ('B', '  31 ', 'LEU', 0.06528121435303272, (-13.768999999999998, -6.89, 5.245)), ('B', '  38 ', 'ASP', 0.194966776801528, (-30.198999999999987, -12.597999999999997, -6.465999999999999)), ('B', '  43 ', 'THR', 0.05839136123924882, (-30.42300000000001, -15.001, -0.837)), ('B', '  62 ', 'VAL', 0.23158642078767033, (-8.663, 10.505999999999997, -8.258)), ('B', '  62 ', 'VAL', 0.23158642078767033, (-8.663, 10.505999999999997, -8.258)), ('C', '  29 ', 'VAL', 0.2317881263764943, (-19.146, 20.664, -59.954)), ('C', '  35 ', 'THR', 0.08784911607454467, (-18.061, 1.4169999999999998, -61.964)), ('C', '  71 ', 'THR', 0.035430011473090293, (-45.46299999999998, 34.044000000000004, -26.656)), ('C', ' 136 ', 'LEU', 0.025950660840476487, (-26.994, 11.393999999999995, -58.485)), ('C', ' 136 ', 'LEU', 0.024692693503352847, (-26.995000000000005, 11.394000000000002, -58.48699999999999)), ('C', ' 189 ', 'GLU', 0.2302858669394104, (-46.874, 32.315999999999995, -58.58699999999999)), ('D', '  43 ', 'THR', 0.072505266178638, (-24.830999999999996, 39.367000000000004, -65.361)), ('D', '  72 ', 'LEU', 0.0004285306026053645, (-55.504, -2.289000000000003, -33.875))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2626611456612162, (-22.777000000000008, -7.7909999999999995, -13.289)), ('C', ' 190 ', 'HIS', ' ', 0.25532517598569876, (-44.063, 29.906999999999993, -61.993))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.856, (-35.352, 18.036, -33.405)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.846, (-49.663, -4.461, -51.426)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.773, (-5.617, -19.363, -22.797)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.732, (7.653, 0.191, -15.245)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.718, (-42.444, 15.933, -41.536)), (' B  51 DARG  HD2', ' B 413  HOH  O  ', -0.692, (-11.621, 5.428, 1.052)), (' B  51 CARG  HD2', ' B 413  HOH  O  ', -0.692, (-11.621, 5.428, 1.052)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.652, (-43.272, 17.105, -32.421)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.649, (-8.07, 4.561, -24.911)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.643, (-20.889, 25.337, -35.934)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.64, (3.033, 23.324, -26.225)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.617, (2.828, 23.452, -26.719)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.613, (-47.756, 19.229, -50.212)), (' D 189  GLU  O  ', ' D 191  LEU  HG ', -0.598, (-25.446, 2.325, -42.125)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.591, (-24.528, 2.081, -42.89)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.578, (-11.268, 19.594, -7.565)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.565, (-36.132, 18.668, -33.579)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.56, (-4.51, -4.484, -29.51)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.552, (-40.838, 18.214, -40.868)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.55, (-9.225, 0.944, -25.155)), (' B 179  LEU HD23', ' B 205  LYS  HE2', -0.548, (-0.228, -2.063, -28.364)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.542, (-14.636, 11.906, -24.603)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.54, (-10.769, 13.7, -22.553)), (' D 189  GLU  O  ', ' D 191  LEU  N  ', -0.512, (-24.78, 2.908, -42.392)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.506, (-32.24, 14.228, -51.333)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.503, (-25.438, 20.704, -41.208)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.502, (-25.485, 21.134, -41.487)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.5, (-53.923, -4.132, -36.415)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.496, (-39.208, 20.766, -37.523)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.496, (-5.789, 10.412, -23.057)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.495, (-6.537, -0.981, -10.851)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.489, (-31.957, 14.625, -51.647)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.486, (-43.195, 13.726, -43.323)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.486, (-50.661, 13.543, -46.803)), (' C 136 DLEU HD12', ' E   4 DLIG  C5 ', -0.469, (-29.125, 15.204, -60.956)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.468, (-42.746, 27.827, -56.378)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.468, (-46.176, 11.405, -43.767)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.468, (-31.57, 16.859, -34.882)), (' C 136 CLEU HD12', ' E   4 CLIG  C5 ', -0.463, (-29.123, 15.203, -60.957)), (' A  59 DALA  HB3', ' A 142  HIS  CD2', -0.462, (-3.105, -13.07, -15.852)), (' A  59 CALA  HB3', ' A 142  HIS  CD2', -0.462, (-3.105, -13.07, -15.852)), (' B  51 DARG  CD ', ' B 413  HOH  O  ', -0.457, (-11.26, 5.794, 1.313)), (' B  51 CARG  CD ', ' B 413  HOH  O  ', -0.457, (-11.26, 5.794, 1.313)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.456, (-6.382, 6.539, -22.573)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.453, (-54.412, -8.407, -50.181)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.451, (-43.113, 28.707, -53.285)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.444, (-20.278, -4.838, -35.749)), (' B 179  LEU  CD2', ' B 205  LYS  HE2', -0.444, (-0.77, -2.033, -28.156)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.438, (-21.901, -4.721, -41.23)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.431, (-13.87, 3.21, -3.255)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.431, (-13.87, 3.21, -3.255)), (' E   4 CLIG  C8 ', ' E   4 CLIG  O  ', -0.426, (-35.206, 11.086, -60.069)), (' E   4 DLIG  C8 ', ' E   4 DLIG  O  ', -0.425, (-35.204, 11.09, -60.073)), (' D 110  LEU  HG ', ' D 123  ILE HD11', -0.419, (-50.658, 5.57, -56.785)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.413, (-34.575, 12.272, -49.511)), (' A  92  ILE HD12', ' A 191  LEU HD21', -0.411, (-23.019, 2.109, -17.329)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.41, (-31.878, 20.114, -50.139)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.408, (-9.439, -1.644, -27.87)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.407, (-27.814, 42.58, -65.633)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.407, (-34.571, 12.278, -49.514)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.407, (-6.756, -15.159, 6.619)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.404, (-40.832, 7.222, -50.249))]
gui = coot_molprobity_todo_list_gui(data=data)
