# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.043461843390842275, (-14.085, -7.734000000000001, -27.054)), ('A', ' 189 ', 'GLU', 0.003543140209444057, (-30.146, 4.7010000000000005, -15.672999999999998)), ('A', ' 189 ', 'GLU', 0.003543140209444057, (-30.146, 4.7010000000000005, -15.672999999999998)), ('A', ' 190 ', 'HIS', 0.007210398038865901, (-27.694, 5.329, -12.823)), ('A', ' 190 ', 'HIS', 0.007210398038865901, (-27.694, 5.329, -12.823)), ('B', '  66 ', 'PRO', 0.06315832207871921, (-1.3770000000000024, 13.986999999999997, -17.13)), ('C', '  24 ', 'SER', 0.03520646442751753, (-15.631000000000002, 16.821000000000005, -66.879)), ('C', '  24 ', 'SER', 0.03531722548989812, (-15.629999999999999, 16.82199999999999, -66.88)), ('C', '  53 ', 'THR', 0.028099359330533508, (-12.998000000000005, 18.181999999999995, -52.708)), ('C', '  53 ', 'THR', 0.028051216471107705, (-12.997, 18.183, -52.70699999999999)), ('C', '  66 ', 'PRO', 0.04163790902255692, (-35.84599999999999, 27.826999999999998, -38.259))]
data['omega'] = [('D', ' 161 ', 'LYS', None, (-40.73199999999999, -6.945000000000002, -56.990999999999985))]
data['rota'] = [('A', '  14 ', 'LYS', 0.08112427633232523, (15.536, -0.515, -2.43)), ('A', '  38 ', 'ASP', 0.0979273046783517, (11.081, 1.9729999999999999, 3.13)), ('A', '  70 ', 'ARG', 0.021024455253897154, (-19.214999999999996, -6.895000000000001, -38.749)), ('A', ' 125 ', 'GLU', 0.2109108103297339, (-3.384999999999998, -9.895, -27.933)), ('A', ' 191 ', 'LEU', 0.0, (-24.960000000000004, 2.733999999999999, -12.404)), ('A', ' 191 ', 'LEU', 0.0, (-24.960000000000004, 2.733999999999999, -12.404)), ('A', ' 191 ', 'LEU', 0.00519504595969508, (-24.933, 2.5460000000000007, -12.561999999999996)), ('A', ' 191 ', 'LEU', 0.00519504595969508, (-24.933, 2.5460000000000007, -12.561999999999996)), ('B', '  31 ', 'LEU', 0.08466246144105928, (-13.754999999999997, -6.876999999999999, 5.266)), ('B', '  38 ', 'ASP', 0.2785697459100498, (-30.190000000000005, -12.570999999999996, -6.465)), ('B', '  43 ', 'THR', 0.19467913199844533, (-30.391999999999996, -14.992999999999993, -0.7929999999999999)), ('B', ' 208 ', 'ASN', 0.0027198892325770315, (-9.724999999999998, 4.584999999999999, -35.406)), ('B', ' 208 ', 'ASN', 0.0027198892325770315, (-9.724999999999998, 4.584999999999999, -35.406)), ('B', ' 208 ', 'ASN', 0.0, (-9.719999999999999, 4.553999999999998, -35.417)), ('B', ' 208 ', 'ASN', 0.0, (-9.719999999999999, 4.553999999999998, -35.417)), ('C', '  29 ', 'VAL', 0.06932578864296231, (-19.111000000000004, 20.782999999999998, -59.895)), ('C', '  35 ', 'THR', 0.07635059122662605, (-18.055, 1.460999999999995, -61.96199999999999)), ('C', '  71 ', 'THR', 0.014502045008560031, (-45.489, 33.956, -26.669)), ('C', ' 136 ', 'LEU', 0.018995835688524945, (-27.042, 11.429, -58.518)), ('C', ' 136 ', 'LEU', 0.018638405796251305, (-27.043, 11.429, -58.518)), ('C', ' 189 ', 'GLU', 0.20434406013810397, (-46.848, 32.308, -58.590999999999994)), ('D', '  14 ', 'LYS', 0.02055902185417171, (-37.190000000000005, 40.163999999999994, -61.781)), ('D', '  23 ', 'ILE', 0.24055670517697292, (-20.353, 21.839, -71.062)), ('D', '  43 ', 'THR', 0.2737319264883514, (-24.771000000000004, 39.377999999999986, -65.307)), ('D', '  45 ', 'THR', 0.17617046137993203, (-23.034, 32.613, -64.01)), ('D', '  72 ', 'LEU', 0.00042036866027656743, (-55.49699999999999, -2.267, -33.907)), ('D', ' 208 ', 'ASN', 0.0002265359344384769, (-48.075, 20.067, -32.623)), ('D', ' 208 ', 'ASN', 0.0002265359344384769, (-48.075, 20.067, -32.623)), ('D', ' 208 ', 'ASN', 0.00018819795406668454, (-48.073, 20.069, -32.624)), ('D', ' 208 ', 'ASN', 0.00018819795406668454, (-48.073, 20.069, -32.624))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.26754224386959663, (-22.752, -7.763999999999999, -13.254)), ('C', ' 190 ', 'HIS', ' ', 0.25686173502041915, (-44.059, 29.871000000000002, -61.998999999999995))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.896, (-35.182, 18.197, -33.394)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.869, (8.417, 0.231, -15.115)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.795, (-5.605, -19.364, -22.809)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.746, (-42.441, 15.944, -41.553)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.741, (2.686, 23.449, -26.829)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.686, (-3.346, 2.3, -10.114)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.686, (3.115, 23.312, -26.117)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.686, (-3.346, 2.3, -10.114)), (' A 191 ALEU  N  ', ' A 191 ALEU HD22', -0.668, (-25.748, 3.74, -13.672)), (' A 191 BLEU  N  ', ' A 191 BLEU HD22', -0.668, (-25.748, 3.74, -13.672)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.64, (-8.063, 4.569, -24.933)), (' B 208 DASN  HB3', ' F  23 DHOH  O  ', -0.639, (-8.712, 7.297, -34.874)), (' B 208 CASN  HB3', ' F  23 CHOH  O  ', -0.639, (-8.712, 7.297, -34.874)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.62, (-23.427, 3.341, -13.762)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.62, (-23.427, 3.341, -13.762)), (' D 120  LYS  H  ', ' D 155 BASN HD21', -0.611, (-49.946, -3.624, -51.631)), (' D 120  LYS  H  ', ' D 155 AASN HD21', -0.611, (-49.946, -3.624, -51.631)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.611, (-47.687, 19.23, -50.149)), (' D 120  LYS  H  ', ' D 155 CASN HD21', -0.606, (-49.946, -3.633, -51.635)), (' D 120  LYS  H  ', ' D 155 DASN HD21', -0.606, (-49.946, -3.633, -51.635)), (' A  92  ILE HD11', ' A 191 DLEU HD11', -0.604, (-24.962, 1.424, -17.855)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.595, (-21.038, 25.075, -35.949)), (' A  92  ILE HD11', ' A 191 CLEU HD11', -0.594, (-24.307, 1.367, -18.051)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.575, (-14.451, 11.606, -24.886)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.568, (-11.266, 19.608, -7.564)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.564, (-40.842, 18.203, -40.876)), (' A 191 ALEU  C  ', ' A 191 ALEU HD23', -0.562, (-23.53, 3.305, -13.896)), (' A 191 BLEU  C  ', ' A 191 BLEU HD23', -0.562, (-23.53, 3.305, -13.896)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.561, (-9.161, 1.405, -25.298)), (' B 208 CASN  C  ', ' B 208 CASN  ND2', -0.558, (-9.039, 3.48, -37.111)), (' B 208 DASN  C  ', ' B 208 DASN  ND2', -0.558, (-9.039, 3.48, -37.111)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.541, (-4.496, -4.469, -29.491)), (' A 191 BLEU  CD2', ' A 191 BLEU  N  ', -0.539, (-25.042, 3.75, -14.03)), (' A 191 ALEU  CD2', ' A 191 ALEU  N  ', -0.539, (-25.042, 3.75, -14.03)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.538, (-18.609, -8.863, -42.548)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.532, (-10.765, 13.685, -22.596)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.525, (-32.125, 14.717, -51.728)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.519, (-31.998, 14.502, -51.732)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.502, (2.674, 25.841, -25.499)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.494, (-50.681, 13.605, -46.77)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.493, (-13.731, 3.261, -3.512)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.493, (-13.731, 3.261, -3.512)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.49, (-5.767, 10.422, -23.077)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.487, (-33.337, 26.991, -56.238)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.487, (-33.335, 26.991, -56.238)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.486, (-31.3, 16.803, -34.903)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.474, (-11.534, 12.036, -9.458)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.474, (-11.534, 12.036, -9.458)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.472, (-23.549, 3.232, -14.185)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.472, (-23.549, 3.232, -14.185)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.462, (-42.851, 13.59, -43.177)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.461, (-6.563, -0.996, -10.826)), (' B 208 AASN  C  ', ' B 208 AASN  OD1', -0.46, (-8.803, 3.537, -37.018)), (' B 208 BASN  C  ', ' B 208 BASN  OD1', -0.46, (-8.803, 3.537, -37.018)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.459, (-25.322, 21.123, -41.43)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.459, (-25.323, 21.123, -41.43)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.456, (-9.869, 10.512, -9.517)), (' C 403  HOH  O  ', ' D 206 DHIS  HE1', -0.455, (-36.095, 18.83, -33.573)), (' C 403  HOH  O  ', ' D 206 CHIS  HE1', -0.455, (-36.095, 18.83, -33.573)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.453, (-6.351, 6.557, -22.589)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.451, (-6.65, -1.325, -10.527)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.447, (-9.876, 10.312, -9.978)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.443, (-42.846, 27.939, -55.998)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.442, (-20.355, -4.739, -35.826)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.442, (2.853, 25.66, -25.575)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.44, (2.775, -3.35, 10.845)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.44, (2.775, -3.35, 10.845)), (' C 403  HOH  O  ', ' D 206 BHIS  HE1', -0.439, (-36.202, 18.819, -33.397)), (' C 403  HOH  O  ', ' D 206 AHIS  HE1', -0.439, (-36.202, 18.819, -33.397)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.437, (-46.343, 11.23, -43.782)), (' D  71  THR  O  ', ' D  73 BHIS  ND1', -0.437, (-54.031, -4.345, -36.194)), (' A  49  VAL HG21', ' B  49 AVAL HG11', -0.429, (-9.327, -5.282, 0.733)), (' A  49  VAL HG21', ' B  49 BVAL HG11', -0.429, (-9.327, -5.282, 0.733)), (' C 200  TYR  OH ', ' D 206 DHIS  HD2', -0.426, (-39.668, 20.994, -37.57)), (' C 200  TYR  OH ', ' D 206 CHIS  HD2', -0.426, (-39.668, 20.994, -37.57)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.426, (-10.664, -4.071, -13.327)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.425, (-26.276, 38.94, -56.002)), (' B 189  GLU  OE2', ' B 191  LEU HD11', -0.422, (10.563, 0.372, -13.955)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.42, (-31.843, 20.12, -50.129)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.418, (-22.243, -4.648, -40.959)), (' C  61  GLY  O  ', ' C 141 BILE  HA ', -0.415, (-24.796, 19.712, -45.011)), (' C  31  LEU HD23', ' C  32  GLU  H  ', -0.413, (-20.32, 12.102, -64.035)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.411, (-43.325, 28.604, -53.288)), (' D  17  ILE HD12', ' D  34  THR  CG2', -0.409, (-29.62, 30.127, -66.182)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.408, (-48.353, 27.621, -35.252)), (' D 112  GLU  OE2', ' D 407  HOH  O  ', -0.407, (-38.205, 1.074, -59.739)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.406, (-1.589, -14.598, -16.557)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.406, (-1.589, -14.598, -16.557)), (' A  86  PRO  HD3', ' B  46  TRP  CD1', -0.403, (-19.402, -8.366, -3.691)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.401, (-9.428, -1.643, -27.612))]
gui = coot_molprobity_todo_list_gui(data=data)
