# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.043577611682805446, (-14.08, -7.724, -27.054)), ('A', ' 189 ', 'GLU', 0.004250210906024585, (-30.158999999999995, 4.651999999999999, -15.637999999999998)), ('A', ' 189 ', 'GLU', 0.004250210906024585, (-30.158999999999995, 4.651999999999999, -15.637999999999998)), ('A', ' 190 ', 'HIS', 0.00421524283552829, (-27.672000000000008, 5.329999999999999, -12.834)), ('A', ' 190 ', 'HIS', 0.00421524283552829, (-27.672000000000008, 5.329999999999999, -12.834)), ('B', '  66 ', 'PRO', 0.062330738167938195, (-1.3720000000000017, 13.993, -17.132)), ('C', '  53 ', 'THR', 0.02346250220950603, (-12.971000000000002, 18.142, -52.608)), ('C', '  53 ', 'THR', 0.023547205547263327, (-12.968000000000002, 18.145, -52.60699999999999)), ('C', '  66 ', 'PRO', 0.041351251256347574, (-35.844, 27.831999999999987, -38.26))]
data['omega'] = [('D', ' 161 ', 'LYS', None, (-40.754, -6.9440000000000035, -57.0))]
data['rota'] = [('A', '  14 ', 'LYS', 0.07480836614118554, (15.538, -0.501, -2.417)), ('A', '  38 ', 'ASP', 0.09400000662505884, (11.088999999999997, 1.982, 3.124)), ('A', '  70 ', 'ARG', 0.022196592008286695, (-19.214999999999993, -6.891000000000002, -38.746)), ('A', ' 125 ', 'GLU', 0.07912448845229983, (-3.3859999999999992, -9.891, -27.925999999999995)), ('A', ' 191 ', 'LEU', 0.0, (-24.944, 2.716, -12.502999999999998)), ('A', ' 191 ', 'LEU', 0.0, (-24.944, 2.716, -12.502999999999998)), ('A', ' 191 ', 'LEU', 0.01768379439591481, (-24.916000000000004, 2.5539999999999985, -12.559)), ('A', ' 191 ', 'LEU', 0.01768379439591481, (-24.916000000000004, 2.5539999999999985, -12.559)), ('B', '  31 ', 'LEU', 0.07530925543039724, (-13.760000000000002, -6.865, 5.27)), ('B', '  38 ', 'ASP', 0.2794235392857936, (-30.189, -12.567999999999996, -6.465)), ('B', '  53 ', 'THR', 0.22719178769196458, (-14.581, 5.892999999999999, 6.183)), ('B', '  53 ', 'THR', 0.22719178769196458, (-14.581, 5.892999999999999, 6.183)), ('B', ' 208 ', 'ASN', 0.0, (-9.646000000000004, 4.575999999999998, -35.46)), ('B', ' 208 ', 'ASN', 0.0, (-9.646000000000004, 4.575999999999998, -35.46)), ('B', ' 208 ', 'ASN', 0.0038540113472676696, (-9.684000000000001, 4.610999999999997, -35.433)), ('B', ' 208 ', 'ASN', 0.0038540113472676696, (-9.684000000000001, 4.610999999999997, -35.433)), ('C', '  29 ', 'VAL', 0.06457617762944934, (-19.116, 20.772, -59.884)), ('C', '  35 ', 'THR', 0.07786811855297587, (-18.052999999999997, 1.468, -61.965)), ('C', '  71 ', 'THR', 0.019222164975295115, (-45.483, 33.962, -26.664999999999996)), ('C', ' 136 ', 'LEU', 0.017781906060109758, (-27.034, 11.433999999999996, -58.513)), ('C', ' 136 ', 'LEU', 0.01758871933988665, (-27.034, 11.433999999999996, -58.513)), ('C', ' 189 ', 'GLU', 0.21616942597654723, (-46.855, 32.31899999999999, -58.613)), ('D', '  45 ', 'THR', 0.16722904915695347, (-23.023000000000007, 32.619, -64.003)), ('D', '  72 ', 'LEU', 0.0003875187363511657, (-55.492000000000004, -2.2520000000000007, -33.909))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2694059753866567, (-22.744999999999994, -7.754, -13.251)), ('C', ' 190 ', 'HIS', ' ', 0.2509671777492356, (-44.045, 29.881999999999998, -61.99799999999998))]
data['probe'] = [(' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.886, (-35.355, 18.034, -33.404)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.88, (7.885, 0.333, -15.406)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.828, (-49.883, -4.042, -51.906)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.804, (-5.597, -19.353, -22.807)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.741, (-42.435, 15.946, -41.54)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.736, (2.687, 23.461, -26.842)), (' B 196 DARG  NH2', ' F   8 DHOH  O  ', -0.701, (-3.317, 2.262, -10.11)), (' B 196 CARG  NH2', ' F   8 CHOH  O  ', -0.701, (-3.317, 2.262, -10.11)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.686, (3.117, 23.328, -26.13)), (' A  92  ILE HD11', ' A 191 DLEU HD11', -0.685, (-25.093, 1.2, -17.883)), (' A  92  ILE HD11', ' A 191 CLEU HD11', -0.682, (-24.524, 1.129, -18.171)), (' B 208 DASN  C  ', ' B 208 DASN  OD1', -0.676, (-8.989, 3.459, -37.202)), (' B 208 CASN  C  ', ' B 208 CASN  OD1', -0.676, (-8.989, 3.459, -37.202)), (' B 208 DASN  HB3', ' F  23 DHOH  O  ', -0.651, (-8.663, 7.345, -34.877)), (' B 208 CASN  HB3', ' F  23 CHOH  O  ', -0.651, (-8.663, 7.345, -34.877)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.64, (-8.062, 4.575, -24.937)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.622, (-47.679, 19.248, -50.152)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.602, (-20.887, 25.275, -35.953)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.589, (-14.438, 11.622, -24.886)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.585, (-36.122, 18.676, -33.569)), (' A 191 ALEU  N  ', ' A 191 ALEU HD22', -0.584, (-25.462, 4.171, -13.757)), (' A 191 BLEU  N  ', ' A 191 BLEU HD22', -0.584, (-25.462, 4.171, -13.757)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.579, (-23.278, 2.81, -14.121)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.579, (-23.278, 2.81, -14.121)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.569, (-11.265, 19.61, -7.567)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.558, (-40.84, 18.215, -40.872)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.553, (-9.161, 1.405, -25.294)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.544, (-4.5, -4.472, -29.487)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.535, (-10.759, 13.697, -22.599)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.534, (-32.004, 14.515, -51.75)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.526, (-18.56, -8.875, -42.572)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.524, (-32.0, 14.523, -51.735)), (' C  86  PRO  O  ', ' D 138 BASN  HB3', -0.516, (-32.609, 23.618, -63.869)), (' C  86  PRO  O  ', ' D 138 AASN  HB3', -0.514, (-32.608, 23.616, -63.87)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.506, (-39.19, 20.763, -37.514)), (' C  84  ARG  HG3', ' D 134 APRO  HB2', -0.498, (-33.32, 27.002, -56.237)), (' A  33 CLYS  HE3', ' A  45  THR HG21', -0.498, (2.689, -3.068, 10.93)), (' A  33 DLYS  HE3', ' A  45  THR HG21', -0.498, (2.689, -3.068, 10.93)), (' C  84  ARG  HG3', ' D 134 BPRO  HB2', -0.496, (-33.319, 27.001, -56.239)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.492, (-50.69, 13.611, -46.763)), (' D  71  THR  O  ', ' D  73 BHIS  ND1', -0.49, (-54.038, -4.338, -36.451)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.489, (-5.765, 10.425, -23.079)), (' C 125  GLU  HG2', ' C 402  HOH  O  ', -0.486, (-31.318, 16.784, -34.865)), (' B  60 AASP  OD2', ' B 139 ACYS  HA ', -0.485, (-13.743, 3.276, -3.513)), (' B  60 BASP  OD2', ' B 139 BCYS  HA ', -0.485, (-13.743, 3.276, -3.513)), (' B 301  EDO  H21', ' F  31 DHOH  O  ', -0.479, (2.852, 25.894, -25.307)), (' B  62 CVAL HG12', ' B 142  HIS  HB2', -0.475, (-11.538, 12.032, -9.443)), (' B  62 DVAL HG12', ' B 142  HIS  HB2', -0.475, (-11.538, 12.032, -9.443)), (' C  62  VAL HG12', ' C 142 DHIS  HB2', -0.475, (-25.575, 21.18, -41.468)), (' C  62  VAL HG12', ' C 142 CHIS  HB2', -0.475, (-25.575, 21.18, -41.469)), (' C  61  GLY  O  ', ' C 141 AILE  HA ', -0.473, (-24.536, 19.677, -45.012)), (' A 191 BLEU  H  ', ' A 191 BLEU HD22', -0.461, (-25.189, 4.611, -13.738)), (' A 191 ALEU  H  ', ' A 191 ALEU HD22', -0.461, (-25.189, 4.611, -13.738)), (' B  62 DVAL  HA ', ' B 142  HIS  O  ', -0.458, (-9.867, 10.52, -9.513)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.458, (-6.552, -0.991, -10.822)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.456, (-42.844, 13.595, -43.175)), (' C  61  GLY  O  ', ' C 141 BILE  HA ', -0.455, (-24.616, 20.167, -44.923)), (' A  92  ILE HD12', ' A 191 DLEU HD21', -0.453, (-22.966, 1.903, -16.859)), (' B 189  GLU  OE2', ' B 191  LEU HD11', -0.452, (10.502, 0.32, -14.162)), (' A  92  ILE HD12', ' A 191 CLEU HD21', -0.451, (-22.631, 1.868, -17.29)), (' B  62 CVAL  HA ', ' B 142  HIS  O  ', -0.449, (-9.874, 10.306, -9.976)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.448, (-6.639, -1.311, -10.522)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.447, (-10.594, -4.309, -13.364)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.445, (-6.347, 6.562, -22.59)), (' B 301  EDO  C2 ', ' F  31 DHOH  O  ', -0.442, (2.855, 25.676, -25.588)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.439, (-20.338, -4.76, -35.807)), (' A  92  ILE  CD1', ' A 191 CLEU HD11', -0.437, (-24.015, 1.075, -17.563)), (' A  92  ILE  CD1', ' A 191 DLEU HD11', -0.437, (-24.015, 1.075, -17.563)), (' C 165  GLY  HA2', ' C 167  PHE  CE1', -0.431, (-26.276, 38.894, -55.996)), (' C 191  LEU  C  ', ' C 191  LEU HD12', -0.431, (-42.719, 27.71, -55.909)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.431, (-46.317, 11.446, -43.557)), (' A 190 BHIS  C  ', ' A 191 BLEU HD13', -0.429, (-26.913, 3.285, -14.097)), (' A 190 AHIS  C  ', ' A 191 ALEU HD13', -0.429, (-26.913, 3.285, -14.097)), (' C  92  ILE HD12', ' C 191  LEU HD11', -0.418, (-43.32, 28.643, -53.276)), (' D  17  ILE HD12', ' D  34  THR  CG2', -0.417, (-29.266, 29.948, -66.152)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.414, (-31.847, 20.11, -50.141)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.412, (-22.231, -4.633, -40.967)), (' C  31  LEU HD23', ' C  32  GLU  N  ', -0.412, (-20.091, 12.276, -64.199)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.411, (-23.408, 3.02, -14.171)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.411, (-23.408, 3.02, -14.171)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.41, (-9.427, -1.619, -27.87)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.408, (-48.356, 27.634, -35.258)), (' A  58 BTHR  OG1', ' A 142  HIS  NE2', -0.406, (-1.609, -14.594, -16.57)), (' A  58 ATHR  OG1', ' A 142  HIS  NE2', -0.406, (-1.609, -14.594, -16.57)), (' C  31  LEU HD23', ' C  32  GLU  H  ', -0.406, (-20.028, 11.953, -63.758)), (' D 112  GLU  OE2', ' D 407  HOH  O  ', -0.406, (-37.917, 1.337, -58.982)), (' A 191 DLEU HD23', ' A 192  THR  N  ', -0.403, (-22.771, 2.419, -13.804)), (' A  86  PRO  HD3', ' B  46  TRP  CD1', -0.403, (-19.394, -8.356, -3.692)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.402, (10.104, 18.225, -8.934))]
gui = coot_molprobity_todo_list_gui(data=data)
