# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.042567633231023735, (-14.16, -7.812, -27.163)), ('B', '  66 ', 'PRO', 0.08167716022113308, (-1.4009999999999985, 13.903, -17.057)), ('C', '  24 ', 'SER', 0.03484929090861472, (-15.908000000000001, 17.029, -66.566)), ('C', '  66 ', 'PRO', 0.038859915763100904, (-36.121, 27.869999999999997, -38.206)), ('D', '  66 ', 'PRO', 0.084328404689158, (-45.961, 4.5409999999999995, -47.929))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.497000000000003, -0.3959999999999999, -2.012)), ('A', '  38 ', 'ASP', 0.10838822379767267, (10.823000000000002, 1.751, 3.255)), ('A', '  43 ', 'THR', 0.18656672152291556, (10.28, -0.6249999999999998, 8.857)), ('A', '  70 ', 'ARG', 0.07824287350629036, (-19.457, -6.922000000000001, -38.714)), ('A', ' 191 ', 'LEU', 0.00032774994042691414, (-25.034000000000006, 2.4770000000000003, -12.445)), ('B', '  31 ', 'LEU', 0.00012660808341720007, (-13.927, -6.98, 5.145)), ('B', '  38 ', 'ASP', 0.14378511847587566, (-30.342000000000006, -12.707000000000004, -6.431)), ('B', '  43 ', 'THR', 0.027198673342354596, (-30.80500000000001, -15.006000000000002, -0.829)), ('B', ' 152 ', 'ASP', 0.10731050459503622, (5.749000000000002, 27.225, -18.603)), ('B', ' 205 ', 'LYS', 0.031253875826793676, (-3.5169999999999986, 1.686, -30.3)), ('C', '  31 ', 'LEU', 0.009481929751040006, (-19.455999999999996, 14.944999999999999, -63.237)), ('C', '  71 ', 'THR', 0.05689449746858909, (-45.742000000000004, 34.081, -26.607999999999997)), ('C', ' 164 ', 'ASP', 0.042448841818123945, (-23.118000000000002, 39.899, -53.01)), ('C', ' 189 ', 'GLU', 0.19449785400119007, (-47.230000000000004, 32.285, -58.561)), ('D', '  38 ', 'ASP', 0.19962218290257358, (-29.777, 39.31, -61.175)), ('D', '  43 ', 'THR', 0.03127019900321051, (-25.375000000000004, 39.368, -65.785)), ('D', '  72 ', 'LEU', 0.27982562811287015, (-55.71, -2.353, -33.889)), ('D', ' 196 ', 'ARG', 0.24745175361748425, (-36.509, 13.892000000000001, -47.408))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.30582097450047424, (-22.954, -7.825999999999999, -13.345))]
data['probe'] = [(' B 133  ASP  OD1', ' G   1 CEDO  H21', -1.128, (-12.626, -6.535, -9.481)), (' B 133  ASP  OD1', ' G   1 CEDO  C2 ', -1.096, (-12.21, -6.45, -9.848)), (' B 133  ASP  OD1', ' G   1 DEDO  H21', -1.067, (-12.589, -6.622, -9.489)), (' G   1 CEDO  H11', ' G   6 CEDO  C1 ', -1.056, (-9.74, -9.692, -10.507)), (' B 133  ASP  OD1', ' G   1 DEDO  C2 ', -1.041, (-11.903, -6.437, -9.869)), (' G   1 DEDO  H11', ' G   6 DEDO  C1 ', -1.009, (-9.123, -9.326, -10.643)), (' C 453  HOH  O  ', ' D 133  ASP  OD2', -0.992, (-27.297, 18.267, -54.112)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.866, (-35.43, 18.094, -33.524)), (' G   1 CEDO  H11', ' G   6 CEDO  C2 ', -0.821, (-10.057, -10.023, -9.832)), (' A  98  LEU HD21', ' G   3 CEDO  H11', -0.761, (-11.182, -13.128, -9.81)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.752, (-5.694, -19.502, -22.637)), (' G   1 DEDO  H22', ' G   6 DEDO  O2 ', -0.75, (-11.837, -9.907, -10.835)), (' A  51  ARG  NE ', ' G   3 CEDO  O1 ', -0.727, (-9.876, -11.331, -7.524)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.72, (8.411, 0.448, -14.805)), (' A  51  ARG  NE ', ' G   3 DEDO  O1 ', -0.713, (-9.862, -11.294, -7.514)), (' B 133  ASP  OD1', ' G   1 CEDO  C1 ', -0.709, (-10.863, -6.988, -9.577)), (' A  98  LEU  CD2', ' G   3 CEDO  H11', -0.707, (-10.588, -13.099, -10.249)), (' G   1 DEDO  H11', ' G   6 DEDO  C2 ', -0.692, (-9.905, -9.869, -9.978)), (' A 139  CYS  HB3', ' G   6 DEDO  O1 ', -0.689, (-7.549, -9.753, -8.453)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.688, (-49.988, -3.959, -51.79)), (' A  98  LEU HD21', ' G   3 DEDO  H11', -0.687, (-11.052, -13.122, -9.747)), (' A 139  CYS  HB3', ' G   6 CEDO  O1 ', -0.684, (-7.423, -9.513, -8.883)), (' G   1 CEDO  H11', ' G   6 CEDO  O1 ', -0.678, (-9.099, -9.58, -9.074)), (' B 133  ASP  OD2', ' G   1 CEDO  O1 ', -0.675, (-9.959, -7.337, -8.214)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.67, (-21.046, 25.241, -36.32)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.665, (-10.783, 19.605, -7.265)), (' G   1 DEDO  C2 ', ' G   6 DEDO  O2 ', -0.663, (-11.591, -8.584, -11.012)), (' G   1 DEDO  H11', ' G   6 DEDO  O1 ', -0.639, (-8.694, -8.966, -9.2)), (' A  98  LEU  CD2', ' G   3 DEDO  H11', -0.638, (-10.458, -13.093, -10.186)), (' G   2 CEDO  C2 ', ' G   5 CEDO  O2 ', -0.637, (-26.035, 21.009, -52.393)), (' G   1 DEDO  H22', ' G   6 DEDO  C2 ', -0.626, (-10.921, -9.533, -10.379)), (' G   1 CEDO  H22', ' G   6 CEDO  O2 ', -0.623, (-11.474, -9.647, -10.781)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.617, (-8.123, 4.54, -24.986)), (' B 133  ASP  OD1', ' G   1 DEDO  C1 ', -0.614, (-11.228, -6.717, -8.865)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.598, (-48.181, 19.115, -49.761)), (' C  51  ARG  NH2', ' G   2 DEDO  O2 ', -0.597, (-25.315, 22.263, -54.126)), (' G   1 CEDO  C1 ', ' G   3 CEDO  O1 ', -0.596, (-10.141, -9.668, -8.723)), (' G   1 DEDO  C1 ', ' G   3 DEDO  O1 ', -0.595, (-10.513, -9.692, -8.994)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.589, (-42.865, 15.847, -41.273)), (' G   1 CEDO  C2 ', ' G   6 CEDO  O2 ', -0.583, (-11.717, -8.761, -10.804)), (' G   1 CEDO  H11', ' G   3 CEDO  O1 ', -0.575, (-10.131, -9.316, -9.316)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.574, (-33.882, 22.234, -50.901)), (' G   1 DEDO  H11', ' G   6 DEDO  H12', -0.568, (-8.847, -8.897, -10.625)), (' G   1 DEDO  O1 ', ' G   3 DEDO  O1 ', -0.564, (-10.245, -9.605, -8.318)), (' B 196  ARG  NE ', ' B 422  HOH  O  ', -0.561, (-6.552, 3.142, -11.47)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.551, (-50.479, 7.897, -62.321)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.546, (-24.655, 1.863, -43.032)), (' B 133  ASP  OD2', ' G   1 DEDO  C1 ', -0.543, (-9.829, -7.071, -8.664)), (' G   2 CEDO  C2 ', ' G   5 CEDO  HO2', -0.542, (-26.51, 20.541, -52.117)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.541, (-40.825, 18.675, -40.875)), (' G   1 DEDO  C1 ', ' G   3 DEDO  HO1', -0.533, (-9.87, -9.039, -8.835)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.525, (-46.411, 11.27, -43.668)), (' B 133  ASP  OD2', ' G   1 DEDO  H12', -0.522, (-10.293, -6.372, -8.655)), (' B 196  ARG  CD ', ' B 422  HOH  O  ', -0.522, (-6.759, 3.519, -11.582)), (' B 133  ASP  OD2', ' G   1 CEDO  C1 ', -0.52, (-10.157, -6.529, -8.586)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.519, (-32.27, 20.564, -50.309)), (' C  51  ARG  NH2', ' G   2 CEDO  O2 ', -0.518, (-25.423, 22.365, -54.04)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.512, (-5.689, 10.56, -22.83)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.509, (-41.425, 7.189, -50.63)), (' G   1 DEDO  C1 ', ' G   6 DEDO  C2 ', -0.509, (-10.682, -9.047, -9.998)), (' G   2 CEDO  O2 ', ' G   5 CEDO  O2 ', -0.509, (-26.164, 20.799, -52.863)), (' C 141  ILE  CG2', ' G   5 DEDO  H11', -0.506, (-26.872, 20.19, -48.401)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.502, (-10.81, -4.637, -13.518)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.502, (-32.454, 14.533, -51.671)), (' A 132  MET  HG3', ' G   1 CEDO  H12', -0.5, (-9.316, -7.134, -10.042)), (' A  51  ARG  CZ ', ' G   3 CEDO  O1 ', -0.499, (-11.084, -11.302, -7.714)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.496, (-36.501, 18.549, -33.545)), (' D 194  ASP  OD1', ' D 196 DARG  HB2', -0.496, (-35.955, 11.98, -49.134)), (' A 132  MET  HG3', ' G   1 DEDO  H12', -0.495, (-9.039, -6.866, -10.31)), (' G   3 CEDO  O1 ', ' G   6 CEDO  O1 ', -0.492, (-9.761, -9.8, -8.819)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.491, (-39.988, 20.861, -37.62)), (' G   1 DEDO  C1 ', ' G   6 DEDO  O1 ', -0.486, (-9.297, -8.776, -9.176)), (' B 133  ASP  CG ', ' G   1 DEDO  C1 ', -0.484, (-10.766, -6.482, -8.854)), (' G   1 CEDO  H22', ' G   6 CEDO  C2 ', -0.483, (-11.727, -9.707, -10.092)), (' D  46  TRP  HA ', ' E   1 DLIG  N2 ', -0.482, (-22.449, 29.171, -61.287)), (' A  51  ARG  CZ ', ' G   3 DEDO  O1 ', -0.481, (-11.07, -11.265, -7.704)), (' G   1 DEDO  C2 ', ' G   6 DEDO  C2 ', -0.479, (-11.221, -9.328, -9.767)), (' B 133  ASP  CG ', ' G   1 CEDO  C1 ', -0.479, (-10.852, -6.514, -8.828)), (' D  46  TRP  HA ', ' E   1 CLIG  N2 ', -0.477, (-22.825, 29.118, -61.543)), (' B 133  ASP  CG ', ' G   1 DEDO  H12', -0.476, (-10.639, -6.272, -9.09)), (' G   2 DEDO  O2 ', ' G   5 DEDO  O2 ', -0.474, (-25.967, 20.965, -52.613)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.468, (-14.566, 11.668, -24.613)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.466, (-34.688, 12.127, -49.74)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.462, (9.405, -7.141, -11.753)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.462, (-9.255, 1.474, -25.1)), (' G   1 CEDO  C1 ', ' G   6 CEDO  O1 ', -0.459, (-9.397, -8.842, -9.036)), (' G   2 DEDO  C2 ', ' G   5 DEDO  O2 ', -0.452, (-26.028, 21.092, -52.113)), (' G   1 CEDO  C1 ', ' G   3 CEDO  HO1', -0.451, (-9.836, -9.491, -8.486)), (' G   2 CEDO  HO2', ' G   5 CEDO  HO2', -0.449, (-26.556, 20.237, -52.82)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.446, (9.975, 18.266, -9.297)), (' B 412  HOH  O  ', ' G   1 CEDO  C2 ', -0.444, (-13.34, -7.569, -10.148)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.444, (-48.867, 27.671, -35.309)), (' D  51  ARG  CB ', ' G   4 CEDO  O1 ', -0.442, (-32.487, 13.21, -64.166)), (' G   1 CEDO  C1 ', ' G   6 CEDO  C2 ', -0.44, (-10.645, -9.045, -10.063)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.437, (-35.31, 12.788, -53.222)), (' G   1 CEDO  H11', ' G   6 CEDO  H12', -0.437, (-9.197, -9.039, -10.649)), (' C  22  LEU  C  ', ' C  22  LEU HD13', -0.434, (-13.719, 13.132, -65.711)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.432, (-35.035, 13.133, -53.267)), (' A  51  ARG  NH2', ' G   3 CEDO  O1 ', -0.432, (-11.123, -10.356, -7.96)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.428, (-54.324, -4.432, -36.194)), (' D  51  ARG  CB ', ' G   4 DEDO  O1 ', -0.427, (-32.475, 13.401, -64.584)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.426, (-6.578, 6.325, -22.467)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.423, (-43.669, 17.18, -31.54)), (' A  51  ARG  NH2', ' G   3 DEDO  O1 ', -0.423, (-11.549, -10.578, -7.893)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.421, (-34.89, 12.266, -49.548)), (' G   1 CEDO  H11', ' G   3 CEDO  HO1', -0.421, (-9.803, -9.587, -8.697)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.42, (-16.658, 12.026, -7.08)), (' A  51  ARG  HE ', ' G   3 CEDO  HO1', -0.42, (-9.781, -10.25, -7.691)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.419, (-9.066, -1.875, -27.898)), (' B  87  MET  HB3', ' B  87  MET  HE3', -0.413, (2.42, -6.204, -7.028)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.413, (-29.212, 42.528, -60.274)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.411, (-21.165, -5.883, -52.448)), (' C 139  CYS  HB3', ' G   5 CEDO  O2 ', -0.411, (-25.751, 18.721, -52.114)), (' B 412  HOH  O  ', ' G   1 CEDO  H21', -0.407, (-13.417, -7.531, -9.758)), (' B  38  ASP  C  ', ' B  38  ASP  OD1', -0.407, (-31.716, -13.747, -7.181)), (' B 133  ASP  OD1', ' G   1 CEDO  O2 ', -0.406, (-11.892, -6.748, -10.248)), (' C 141  ILE  CG2', ' G   5 CEDO  H11', -0.404, (-27.031, 20.534, -48.305)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.402, (-43.238, 13.508, -43.077)), (' D 188  GLU  CG ', ' D 189  GLU  HG3', -0.402, (-26.965, -0.312, -37.49))]
gui = coot_molprobity_todo_list_gui(data=data)
