# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.0394511962487201, (-14.172999999999998, -7.809, -27.169)), ('B', '  66 ', 'PRO', 0.07030198389154103, (-1.435, 13.891000000000002, -17.058)), ('B', ' 161 ', 'LYS', 0.054317124242766635, (6.27, 17.287, -2.786)), ('C', '  24 ', 'SER', 0.035986085010242364, (-15.905000000000001, 16.993, -66.546)), ('C', '  66 ', 'PRO', 0.04193340654231684, (-36.128, 27.867000000000004, -38.207))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.496000000000004, -0.4500000000000001, -2.072)), ('A', '  38 ', 'ASP', 0.1163044372229429, (10.832, 1.755, 3.2599999999999993)), ('A', '  43 ', 'THR', 0.18019193462566271, (10.281000000000002, -0.6179999999999992, 8.848)), ('A', '  70 ', 'ARG', 0.0537327418660495, (-19.473, -6.921000000000002, -38.708)), ('A', ' 191 ', 'LEU', 0.00043456245393370474, (-25.033, 2.4770000000000003, -12.436)), ('B', '  31 ', 'LEU', 0.0060689282211690825, (-13.947999999999999, -6.985999999999999, 5.1499999999999995)), ('B', '  38 ', 'ASP', 0.10511463402692023, (-30.357000000000006, -12.713, -6.442)), ('B', '  43 ', 'THR', 0.027198673342354596, (-30.792000000000012, -15.015, -0.8399999999999999)), ('B', ' 205 ', 'LYS', 0.1261471936115528, (-3.5249999999999995, 1.6760000000000002, -30.298999999999996)), ('C', '  31 ', 'LEU', 0.011830573939551167, (-19.522, 14.907, -63.269)), ('C', '  71 ', 'THR', 0.08755908269616121, (-45.753, 34.096, -26.617)), ('C', ' 189 ', 'GLU', 0.22918725179538568, (-47.266999999999996, 32.283, -58.59)), ('D', '  38 ', 'ASP', 0.17411659801624862, (-29.817, 39.345, -61.19)), ('D', '  43 ', 'THR', 0.030413571342219413, (-25.345, 39.373, -65.754)), ('D', '  72 ', 'LEU', 0.2530724037931486, (-55.728, -2.355000000000001, -33.888)), ('D', ' 196 ', 'ARG', 0.11245694218965038, (-36.51199999999999, 13.913000000000004, -47.403999999999996)), ('D', ' 196 ', 'ARG', 0.11245694218965038, (-36.51199999999999, 13.913000000000004, -47.403999999999996))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2921658949981863, (-22.964, -7.845000000000002, -13.355))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -0.892, (-35.721, 15.783, -50.347)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.892, (-35.721, 15.783, -50.347)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.812, (-35.262, 18.266, -33.521)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.759, (-35.44, 15.547, -50.124)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.759, (-35.44, 15.547, -50.124)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.746, (-5.695, -19.525, -22.655)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.696, (-21.522, 25.329, -36.581)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.695, (7.78, 0.103, -15.14)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.691, (-49.988, -3.959, -51.816)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.644, (-11.436, 19.363, -7.221)), (' C 194  ASP  OD2', ' C 196  ARG  NH2', -0.605, (-33.807, 22.228, -51.149)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.6, (-8.115, 4.548, -24.98)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.575, (-48.118, 19.364, -49.757)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.574, (-46.294, 11.464, -43.65)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.562, (-42.87, 15.869, -41.272)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.553, (-41.04, 18.864, -40.854)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.55, (-50.307, 8.074, -62.307)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.546, (-5.819, 10.356, -23.089)), (' B 196  ARG  NE ', ' B 422  HOH  O  ', -0.533, (-6.535, 3.122, -11.457)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.517, (-32.406, 20.345, -50.28)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.516, (-14.709, 11.222, -24.501)), (' D  64  VAL  O  ', ' D  94  PHE  HB3', -0.501, (-41.432, 7.184, -50.599)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.499, (-10.826, -4.674, -13.507)), (' B 196  ARG  CD ', ' B 422  HOH  O  ', -0.497, (-6.735, 3.498, -11.577)), (' D  46  TRP  HA ', ' E   1 DLIG  N2 ', -0.496, (-22.434, 29.149, -61.313)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.495, (-24.434, 1.525, -43.106)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.486, (-32.416, 14.534, -51.63)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.486, (-32.416, 14.534, -51.63)), (' D  46  TRP  HA ', ' E   1 CLIG  N2 ', -0.484, (-22.81, 29.159, -61.571)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.482, (-39.991, 20.891, -37.621)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.473, (-36.488, 19.054, -33.554)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.472, (-35.805, 14.578, -49.911)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.472, (-35.805, 14.578, -49.911)), (' B 190  HIS  CG ', ' B 190  HIS  O  ', -0.471, (9.435, -7.087, -11.678)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.462, (-9.251, 1.485, -25.086)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.461, (-54.326, -4.418, -36.452)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.459, (-34.734, 12.619, -49.838)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.455, (-34.732, 12.127, -49.755)), (' A  46  TRP  HA ', ' E   2 DLIG  N2 ', -0.448, (-0.979, 0.008, 5.798)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.445, (-6.485, 6.57, -22.578)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.44, (-9.053, -1.871, -27.894)), (' D 132  MET  HE1', ' D 196 CARG  CZ ', -0.438, (-35.293, 12.844, -53.02)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.436, (-48.805, 27.512, -35.256)), (' D 132  MET  HE1', ' D 196 AARG  CZ ', -0.436, (-35.119, 13.17, -53.276)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.433, (10.072, -1.66, -14.9)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.432, (10.002, 18.216, -9.301)), (' A  46  TRP  HA ', ' E   2 CLIG  N2 ', -0.43, (-0.566, -0.201, 5.782)), (' D 194  ASP  OD1', ' D 196 DARG  HB2', -0.428, (-35.846, 12.207, -49.141)), (' E   3 CLIG  O1 ', ' E   3 CLIG  S  ', -0.427, (-18.886, -15.877, -4.848)), (' E   3 DLIG  O1 ', ' E   3 DLIG  S  ', -0.427, (-18.886, -15.877, -4.848)), (' A  75  GLU  OE2', ' A 403  HOH  O  ', -0.426, (-12.552, -3.599, -37.295)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.424, (-54.638, -8.745, -50.269)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.424, (-29.251, 42.538, -60.21)), (' D 194  ASP  OD1', ' D 196 BARG  HB2', -0.423, (-35.465, 12.022, -49.075)), (' C  22  LEU  C  ', ' C  22  LEU HD13', -0.423, (-13.545, 13.501, -65.735)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.417, (-6.414, -1.02, -10.684)), (' B  87  MET  HB3', ' B  87  MET  HE3', -0.415, (2.428, -6.205, -7.031)), (' B  38  ASP  C  ', ' B  38  ASP  OD1', -0.407, (-31.741, -13.753, -7.179)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.404, (-43.245, 13.52, -43.107)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.402, (-16.684, 12.046, -7.072))]
gui = coot_molprobity_todo_list_gui(data=data)
