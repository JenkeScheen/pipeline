# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.040962878534989894, (-14.186000000000003, -7.736000000000001, -27.139)), ('B', '  66 ', 'PRO', 0.0479335961294788, (-1.5120000000000013, 13.866, -17.085)), ('B', '  66 ', 'PRO', 0.0479335961294788, (-1.5120000000000013, 13.866, -17.085)), ('B', '  66 ', 'PRO', 0.06391625028474325, (-1.513, 13.871, -17.081)), ('B', '  66 ', 'PRO', 0.06391625028474325, (-1.513, 13.871, -17.081)), ('B', ' 161 ', 'LYS', 0.07780707159474179, (6.284999999999997, 17.338, -2.693)), ('C', '  66 ', 'PRO', 0.03187999925186782, (-36.04, 27.83199999999999, -38.19)), ('D', '  66 ', 'PRO', 0.042029212307245864, (-45.828, 4.606999999999998, -47.93200000000001)), ('D', '  66 ', 'PRO', 0.042029212307245864, (-45.828, 4.606999999999998, -47.93200000000001))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.013000000000001, 3.588999999999996, -33.877))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.493000000000002, -0.5930000000000002, -2.264)), ('A', '  43 ', 'THR', 0.05847714492119849, (10.277999999999999, -0.5449999999999997, 8.796)), ('A', '  70 ', 'ARG', 0.040834140231551116, (-19.340999999999998, -6.893, -38.715)), ('A', ' 125 ', 'GLU', 0.08624552709416614, (-3.4539999999999997, -9.934000000000001, -27.842000000000002)), ('A', ' 191 ', 'LEU', 0.0011185803001252078, (-24.941000000000003, 2.565999999999999, -12.332000000000004)), ('B', '  31 ', 'LEU', 0.08105738776317732, (-13.919999999999996, -7.043, 5.184)), ('B', '  38 ', 'ASP', 0.041070445234580685, (-30.307, -12.681, -6.404)), ('B', '  43 ', 'THR', 0.021758937509730458, (-30.687999999999988, -15.038, -0.864)), ('B', ' 205 ', 'LYS', 0.0632813077357745, (-3.4910000000000005, 1.7109999999999985, -30.23)), ('B', ' 208 ', 'ASN', 0.0022819237366044783, (-6.607999999999999, 2.8429999999999973, -35.089)), ('C', '  31 ', 'LEU', 0.008402271160626106, (-19.497000000000003, 14.738999999999994, -63.402)), ('C', '  45 ', 'THR', 0.21927927445587994, (-21.787999999999997, 1.548, -64.242)), ('C', ' 136 ', 'LEU', 0.2770661091593615, (-27.594, 11.304999999999998, -58.71200000000001)), ('C', ' 164 ', 'ASP', 0.0016096453655421788, (-23.195, 40.252, -52.92700000000001)), ('C', ' 189 ', 'GLU', 0.22292570707791987, (-47.11500000000001, 32.382000000000005, -58.607)), ('D', '  24 ', 'SER', 0.1798815493324989, (-20.783, 18.155, -70.972)), ('D', '  38 ', 'ASP', 0.2821915161011036, (-29.782999999999994, 39.370999999999995, -61.09000000000002)), ('D', '  43 ', 'THR', 0.029074303270743385, (-25.102000000000004, 39.301, -65.666)), ('D', '  72 ', 'LEU', 0.03710045106867993, (-55.679, -2.3240000000000016, -33.899)), ('D', ' 196 ', 'ARG', 0.0, (-36.43699999999999, 13.957999999999998, -47.357000000000006)), ('D', ' 196 ', 'ARG', 0.0, (-36.43699999999999, 13.957999999999998, -47.357000000000006)), ('D', ' 208 ', 'ASN', 0.0, (-46.467, 18.406, -31.224)), ('D', ' 208 ', 'ASN', 0.0, (-46.467, 18.406, -31.224))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.3084557399649034, (-23.153999999999993, -8.011, -13.291000000000002)), ('D', '  52 ', 'THR', ' ', 0.2940033935410303, (-30.411999999999992, 13.907999999999994, -70.855)), ('D', '  74 ', 'TYR', ' ', 0.25356399895050574, (-48.14299999999999, 1.301999999999997, -34.301))]
data['probe'] = [(' D 196 BARG  CG ', ' D 196 BARG HH21', -1.201, (-36.121, 15.369, -50.427)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -1.201, (-36.121, 15.369, -50.427)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -1.098, (-35.288, 15.713, -50.206)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -1.098, (-35.288, 15.713, -50.206)), (' C 176  ASN  HB3', ' F   3 DHOH  O  ', -0.925, (-49.418, 23.732, -36.167)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.79, (-35.487, 18.104, -33.331)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.756, (-35.895, 14.149, -49.424)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.756, (-35.895, 14.149, -49.424)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.754, (-20.94, 25.284, -36.375)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.754, (-49.698, -4.238, -51.25)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.681, (8.361, 0.325, -14.857)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.656, (-18.839, -9.301, -42.244)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.654, (-10.922, 19.397, -7.247)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -0.629, (-36.602, 15.717, -49.608)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.629, (-36.602, 15.717, -49.608)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.61, (-34.98, 12.397, -49.979)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.609, (-32.375, 20.283, -50.237)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.601, (-34.541, 11.948, -49.823)), (' D 196 DARG  N  ', ' D 196 DARG  NH2', -0.593, (-35.214, 14.437, -48.806)), (' D 196 BARG  N  ', ' D 196 BARG  NH2', -0.593, (-35.214, 14.437, -48.806)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.592, (-42.658, 16.39, -41.068)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.58, (-7.667, 4.053, -25.137)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.567, (-5.804, -19.518, -22.261)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.559, (-39.398, 20.817, -37.546)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.554, (-36.242, 19.206, -33.69)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.545, (-9.309, 0.948, -25.161)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.535, (-10.602, -4.427, -13.616)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.534, (-43.213, 13.701, -43.326)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.532, (-50.127, 8.111, -62.346)), (' B 125 DGLU  HG3', ' B 447  HOH  O  ', -0.525, (-13.23, 13.174, -18.889)), (' B 125 CGLU  HG3', ' B 447  HOH  O  ', -0.525, (-13.23, 13.174, -18.889)), (' A 206 AHIS  HD2', ' B 200  TYR  OH ', -0.519, (-5.68, 10.339, -22.999)), (' A 206 BHIS  HD2', ' B 200  TYR  OH ', -0.519, (-5.68, 10.339, -22.999)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.517, (2.754, 23.316, -26.217)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.509, (-54.232, -4.372, -36.43)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.493, (-5.113, -14.018, -7.464)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.489, (-32.581, 14.203, -51.387)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.488, (10.003, -1.607, -15.047)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.485, (-54.437, -8.555, -50.393)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.484, (-32.246, 14.548, -51.66)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.479, (-21.082, -5.9, -52.647)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.478, (-9.03, -1.569, -27.818)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.467, (-5.003, -4.293, -29.137)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.467, (-4.736, -0.121, -11.55)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.465, (-5.835, -19.748, -22.517)), (' D 119  TYR  CD1', ' D 148 CILE HG21', -0.465, (-48.042, -3.057, -48.177)), (' D 119  TYR  CD1', ' D 148 DILE HG21', -0.465, (-48.042, -3.057, -48.177)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.463, (-33.461, -11.756, -11.619)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.462, (-5.274, -7.494, -27.804)), (' D  16  TYR  OH ', ' D  37  MET  HE2', -0.461, (-31.128, 41.061, -68.671)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.446, (-29.601, 42.793, -59.96)), (' B 125 DGLU  HG2', ' B 145 DTHR  HB ', -0.444, (-9.849, 14.883, -18.944)), (' B 125 CGLU  HG2', ' B 145 CTHR  HB ', -0.444, (-9.849, 14.883, -18.944)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.444, (-47.77, 19.299, -50.141)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.443, (2.698, 23.44, -26.48)), (' B 145 CTHR HG23', ' E   1 CLIG  C10', -0.439, (-5.937, 13.965, -20.48)), (' B 145 DTHR HG23', ' E   1 DLIG  C10', -0.439, (-5.937, 13.965, -20.48)), (' A  64  VAL  O  ', ' A  66  PRO  HD3', -0.437, (-13.702, -6.92, -23.218)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.436, (-23.333, 3.121, -13.545)), (' A  65  ILE  HA ', ' A  66  PRO  HD3', -0.423, (-13.266, -5.666, -24.024)), (' A 179  LEU HD23', ' A 205 ALYS  HD2', -0.41, (-14.72, 11.611, -24.295)), (' A 179  LEU HD23', ' A 205 BLYS  HD2', -0.41, (-14.72, 11.611, -24.295)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.408, (-6.613, 6.317, -22.834)), (' D  68 DLEU  HA ', ' D 148 DILE  HB ', -0.408, (-49.322, 0.015, -45.713)), (' D  68 CLEU  HA ', ' D 148 CILE  HB ', -0.408, (-49.322, 0.015, -45.713)), (' D  64  VAL  O  ', ' D  66 DPRO  HD3', -0.405, (-42.713, 6.251, -49.171)), (' D  38  ASP  HB2', ' D  39  PRO  CD ', -0.404, (-29.912, 39.793, -58.856)), (' D 196 BARG  H  ', ' D 196 BARG  NH2', -0.402, (-34.582, 14.054, -48.505)), (' D 196 DARG  H  ', ' D 196 DARG  NH2', -0.402, (-34.582, 14.054, -48.505)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.401, (-22.351, -4.735, -41.283))]
gui = coot_molprobity_todo_list_gui(data=data)
