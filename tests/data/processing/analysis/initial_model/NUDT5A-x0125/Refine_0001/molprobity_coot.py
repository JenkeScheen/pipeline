# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.03958828139194014, (-14.190999999999999, -7.738000000000001, -27.136000000000003)), ('B', '  66 ', 'PRO', 0.03741402842982815, (-1.5179999999999993, 13.875999999999998, -17.094)), ('B', ' 161 ', 'LYS', 0.07200169254343171, (6.306999999999998, 17.360999999999997, -2.698)), ('C', '  66 ', 'PRO', 0.03106310837802763, (-36.035, 27.827000000000005, -38.193)), ('D', '  66 ', 'PRO', 0.07179150460495655, (-45.964, 4.679999999999999, -47.898)), ('D', ' 190 ', 'HIS', 0.0038742870548797853, (-22.44399999999999, 2.1959999999999997, -42.658))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.050000000000001, 3.563999999999999, -33.889))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.483000000000002, -0.626, -2.289)), ('A', '  43 ', 'THR', 0.05982079483474291, (10.273999999999994, -0.5480000000000003, 8.805)), ('A', '  70 ', 'ARG', 0.04645343551483632, (-19.347, -6.888000000000002, -38.713)), ('A', ' 125 ', 'GLU', 0.06604560524334135, (-3.4500000000000006, -9.938000000000002, -27.841000000000008)), ('A', ' 191 ', 'LEU', 0.0023647758768863027, (-24.948, 2.5669999999999993, -12.328)), ('B', '  31 ', 'LEU', 0.08307199732734828, (-13.923999999999994, -7.043, 5.187000000000002)), ('B', '  38 ', 'ASP', 0.05226637022850521, (-30.30999999999999, -12.682000000000002, -6.409000000000002)), ('B', '  43 ', 'THR', 0.026829730921146006, (-30.691999999999997, -15.034, -0.8510000000000001)), ('B', ' 205 ', 'LYS', 0.05565100691783327, (-3.4920000000000004, 1.7079999999999984, -30.235000000000007)), ('B', ' 208 ', 'ASN', 0.25264550870161623, (-6.718000000000001, 2.7719999999999967, -35.1)), ('C', '  31 ', 'LEU', 0.019703257854315873, (-19.497999999999998, 14.717000000000002, -63.391)), ('C', '  45 ', 'THR', 0.27530529609798726, (-21.778, 1.5540000000000003, -64.242)), ('C', ' 136 ', 'LEU', 0.25106937370775734, (-27.608999999999998, 11.293999999999997, -58.715)), ('C', ' 164 ', 'ASP', 0.002828774267982226, (-23.121, 40.163, -52.954)), ('D', '  24 ', 'SER', 0.20903013673764106, (-20.784, 18.165, -70.97)), ('D', '  43 ', 'THR', 0.028558605117723346, (-25.117999999999995, 39.33500000000001, -65.655)), ('D', '  72 ', 'LEU', 0.03255749219112432, (-55.67799999999999, -2.314, -33.89)), ('D', ' 196 ', 'ARG', 0.0, (-36.435, 13.95899999999999, -47.368)), ('D', ' 196 ', 'ARG', 0.0, (-36.435, 13.95899999999999, -47.368))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.3076167137993306, (-23.138, -7.991999999999997, -13.293000000000001)), ('D', '  52 ', 'THR', ' ', 0.3041426650544434, (-30.369, 13.939999999999998, -70.804))]
data['probe'] = [(' D 196 BARG  HG3', ' D 196 BARG HH21', -1.169, (-36.453, 15.844, -50.054)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -1.169, (-36.453, 15.844, -50.054)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.938, (-35.193, 15.72, -49.978)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.938, (-35.193, 15.72, -49.978)), (' B 145  THR HG23', ' E   1 DLIG  C10', -0.863, (-6.47, 13.836, -21.026)), (' D 145  THR HG23', ' E   2 CLIG  C10', -0.849, (-48.546, 10.037, -47.131)), (' D 145  THR HG23', ' E   2 DLIG  C10', -0.849, (-48.546, 10.037, -47.131)), (' B 145  THR HG23', ' E   1 CLIG  C10', -0.842, (-6.778, 14.148, -20.596)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.813, (-36.365, 15.462, -50.316)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.813, (-36.365, 15.462, -50.316)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.788, (-35.5, 18.116, -33.323)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.761, (-20.948, 25.288, -36.375)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.753, (-49.712, -4.236, -51.264)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.676, (8.352, 0.307, -14.869)), (' B  67  VAL  CG2', ' E   1 CLIG  C10', -0.672, (-3.801, 14.415, -21.584)), (' B  67  VAL  CG2', ' E   1 DLIG  C10', -0.672, (-4.228, 13.695, -21.491)), (' B  67  VAL  CG2', ' E   1 DLIG  C9 ', -0.637, (-3.516, 13.541, -22.019)), (' B  67  VAL  CG2', ' E   1 CLIG  C9 ', -0.637, (-3.516, 13.541, -22.019)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.623, (-35.733, 14.514, -49.528)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.623, (-35.733, 14.514, -49.528)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.617, (-10.951, 19.365, -7.276)), (' B  67  VAL HG23', ' E   1 DLIG  C10', -0.607, (-3.974, 13.387, -20.859)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.603, (-34.981, 12.398, -49.979)), (' B  67  VAL HG23', ' E   1 CLIG  C10', -0.603, (-3.588, 14.166, -20.846)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.596, (-24.574, 1.958, -43.098)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.587, (-34.503, 11.969, -49.814)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.586, (-42.66, 16.391, -41.068)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.579, (-32.361, 20.283, -50.257)), (' C 302  MG  MG  ', ' C 454  HOH  O  ', -0.577, (-26.026, 31.066, -49.235)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.576, (-7.666, 4.059, -25.15)), (' B  67  VAL HG21', ' E   1 DLIG  C10', -0.571, (-4.347, 13.708, -21.875)), (' D  67  VAL  CG2', ' E   2 CLIG  C9 ', -0.57, (-47.89, 7.562, -44.871)), (' D  67  VAL  CG2', ' E   2 DLIG  C9 ', -0.57, (-47.89, 7.562, -44.871)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.563, (-50.123, 8.107, -62.349)), (' B  67  VAL HG21', ' E   1 CLIG  C10', -0.562, (-3.754, 13.954, -21.834)), (' D  67  VAL HG23', ' E   2 DLIG  C10', -0.562, (-48.745, 7.616, -45.879)), (' D  67  VAL  CG2', ' E   2 DLIG  C10', -0.56, (-48.94, 7.801, -45.363)), (' D  67  VAL  CG2', ' E   2 CLIG  C10', -0.56, (-48.291, 7.436, -45.146)), (' B  67  VAL HG21', ' E   1 CLIG  C9 ', -0.557, (-3.686, 13.738, -22.011)), (' B  67  VAL HG21', ' E   1 DLIG  C9 ', -0.557, (-3.686, 13.738, -22.011)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.553, (-39.399, 20.82, -37.542)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.552, (-5.807, -19.523, -22.255)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.547, (-36.241, 19.197, -33.69)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.545, (-9.262, 1.379, -25.274)), (' D  67  VAL HG23', ' E   2 CLIG  C10', -0.54, (-48.464, 7.188, -45.881)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.535, (-43.219, 13.7, -43.321)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.535, (-10.608, -4.422, -13.606)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.53, (2.729, 23.311, -26.241)), (' D  67  VAL HG21', ' E   2 DLIG  C8 ', -0.517, (-49.055, 7.963, -44.278)), (' D  67  VAL HG21', ' E   2 CLIG  C8 ', -0.517, (-49.055, 7.963, -44.278)), (' B 125 CGLU  HG3', ' B 447  HOH  O  ', -0.515, (-13.241, 13.166, -18.928)), (' B 125 DGLU  HG3', ' B 447  HOH  O  ', -0.515, (-13.241, 13.166, -18.928)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.504, (-5.13, -14.02, -7.506)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.502, (10.016, -1.636, -15.058)), (' B  67  VAL HG21', ' E   1 DLIG  C8 ', -0.494, (-4.34, 13.608, -22.384)), (' D  67  VAL HG21', ' E   2 DLIG  C7 ', -0.492, (-49.554, 8.266, -44.375)), (' C 206 AHIS  HD2', ' D 200  TYR  OH ', -0.488, (-46.425, 11.141, -43.788)), (' C 206 BHIS  HD2', ' D 200  TYR  OH ', -0.488, (-46.425, 11.141, -43.788)), (' A 206 BHIS  HD2', ' B 200  TYR  OH ', -0.484, (-6.034, 10.613, -22.889)), (' B  67  VAL HG21', ' E   1 CLIG  C8 ', -0.484, (-3.919, 13.972, -22.628)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.482, (-9.036, -1.574, -27.823)), (' D  67  VAL HG21', ' E   2 CLIG  C7 ', -0.481, (-49.272, 7.897, -44.18)), (' A 206 AHIS  HD2', ' B 200  TYR  OH ', -0.481, (-5.614, 10.384, -22.766)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.481, (-32.433, 14.457, -51.748)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.481, (-32.433, 14.457, -51.748)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.477, (-4.736, -0.112, -11.552)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.472, (-21.081, -5.908, -52.643)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.469, (2.671, 23.401, -26.505)), (' B 125 DGLU  HG2', ' B 145  THR  HB ', -0.469, (-10.35, 14.786, -18.884)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.469, (-54.233, -4.371, -36.426)), (' B 125 CGLU  HG2', ' B 145  THR  HB ', -0.468, (-9.862, 14.882, -18.925)), (' D 189  GLU  O  ', ' D 191  LEU  HG ', -0.467, (-26.213, 2.274, -42.161)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.465, (-5.838, -19.753, -22.511)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.461, (-5.286, -7.501, -27.798)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.461, (-33.926, -11.659, -11.69)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.458, (-23.363, 3.168, -13.513)), (' B  67  VAL HG21', ' E   1 DLIG  C7 ', -0.457, (-4.436, 13.994, -22.617)), (' B  67  VAL HG21', ' E   1 CLIG  C7 ', -0.457, (-3.942, 14.309, -22.736)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.456, (-4.503, -4.454, -29.198)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.454, (-18.675, -8.538, -42.371)), (' D  16  TYR  OH ', ' D  37  MET  HE2', -0.447, (-31.111, 41.058, -68.668)), (' A 179  LEU HD23', ' A 205 ALYS  HD2', -0.444, (-14.617, 11.336, -24.376)), (' A 179  LEU HD23', ' A 205 BLYS  HD2', -0.444, (-14.617, 11.336, -24.376)), (' A  64  VAL  O  ', ' A  66  PRO  HD3', -0.442, (-13.707, -6.924, -23.213)), (' A 206 CHIS  CD2', ' E   1 CLIG  C8 ', -0.437, (-6.111, 12.091, -23.218)), (' D 124  ALA  HB3', ' D 145  THR HG22', -0.437, (-51.507, 9.831, -49.043)), (' A 206 DHIS  CD2', ' E   1 DLIG  C8 ', -0.437, (-6.111, 12.091, -23.218)), (' D  67  VAL HG21', ' E   2 DLIG  C9 ', -0.431, (-48.747, 7.86, -44.363)), (' D  67  VAL HG21', ' E   2 CLIG  C9 ', -0.431, (-48.747, 7.86, -44.363)), (' A  65  ILE  HA ', ' A  66  PRO  HD3', -0.426, (-13.271, -5.67, -24.019)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.425, (-47.773, 19.27, -50.12)), (' D 189  GLU  O  ', ' D 191  LEU  N  ', -0.422, (-24.701, 2.389, -42.362)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.409, (-29.581, 42.773, -60.014)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.406, (-40.733, 18.645, -40.654)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.404, (-6.621, 6.307, -22.828)), (' C 206 CHIS  CD2', ' E   2 CLIG  C8 ', -0.402, (-48.594, 10.843, -44.06)), (' C 206 DHIS  CD2', ' E   2 DLIG  C8 ', -0.402, (-48.594, 10.843, -44.06))]
gui = coot_molprobity_todo_list_gui(data=data)
