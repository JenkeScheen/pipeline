# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04010108362398592, (-14.190999999999999, -7.7379999999999995, -27.137)), ('B', '  66 ', 'PRO', 0.03855985517277644, (-1.5069999999999988, 13.863999999999994, -17.075)), ('B', '  66 ', 'PRO', 0.03855985517277644, (-1.5069999999999988, 13.863999999999994, -17.075)), ('B', ' 161 ', 'LYS', 0.07635197156749403, (6.307, 17.337, -2.6910000000000007)), ('C', '  66 ', 'PRO', 0.030748947780770933, (-36.03599999999999, 27.829, -38.191)), ('D', '  66 ', 'PRO', 0.058480498972802865, (-45.844999999999985, 4.610999999999997, -47.957)), ('D', '  66 ', 'PRO', 0.058480498972802865, (-45.844999999999985, 4.610999999999997, -47.957)), ('D', ' 190 ', 'HIS', 0.003674752438401327, (-22.442999999999998, 2.1969999999999974, -42.656))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-7.039999999999998, 3.570999999999999, -33.889))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.486999999999995, -0.6320000000000001, -2.289)), ('A', '  43 ', 'THR', 0.05889384500646577, (10.273999999999996, -0.5470000000000002, 8.806)), ('A', '  70 ', 'ARG', 0.04773689572834012, (-19.345999999999997, -6.891, -38.711)), ('A', ' 125 ', 'GLU', 0.10366334282430059, (-3.453, -9.937, -27.843)), ('A', ' 191 ', 'LEU', 0.0019237130780301948, (-24.946, 2.5680000000000014, -12.331)), ('B', '  31 ', 'LEU', 0.08862095539044522, (-13.924, -7.043999999999999, 5.19)), ('B', '  38 ', 'ASP', 0.05300039374203545, (-30.30799999999999, -12.683, -6.409000000000002)), ('B', '  43 ', 'THR', 0.02695346923613224, (-30.693999999999992, -15.037000000000003, -0.855)), ('B', ' 205 ', 'LYS', 0.06618510212431908, (-3.4930000000000003, 1.7109999999999985, -30.235000000000007)), ('C', '  31 ', 'LEU', 0.02290755332984177, (-19.499999999999996, 14.715999999999996, -63.396000000000015)), ('C', '  45 ', 'THR', 0.2671986187535753, (-21.778999999999996, 1.5519999999999978, -64.241)), ('C', ' 136 ', 'LEU', 0.2990459596160462, (-27.607, 11.285999999999998, -58.715)), ('C', ' 164 ', 'ASP', 0.0028287742679822263, (-23.115, 40.169999999999995, -52.95)), ('D', '  24 ', 'SER', 0.1986971982841091, (-20.777, 18.169000000000004, -70.969)), ('D', '  43 ', 'THR', 0.028558605117723346, (-25.113, 39.33, -65.649)), ('D', '  72 ', 'LEU', 0.0303674646029988, (-55.67799999999999, -2.3160000000000007, -33.891)), ('D', ' 196 ', 'ARG', 0.0, (-36.437, 13.955999999999998, -47.368)), ('D', ' 196 ', 'ARG', 0.0, (-36.437, 13.955999999999998, -47.368))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.3108450494752403, (-23.142, -7.995000000000001, -13.293000000000001)), ('D', '  52 ', 'THR', ' ', 0.30086596159117385, (-30.374000000000002, 13.945, -70.797))]
data['probe'] = [(' D 196 DARG  HG3', ' D 196 DARG HH21', -1.156, (-36.465, 15.84, -50.049)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -1.156, (-36.465, 15.84, -50.049)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.952, (-35.191, 15.714, -49.977)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.952, (-35.191, 15.714, -49.977)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -0.823, (-36.377, 15.458, -50.311)), (' D 196 DARG  CG ', ' D 196 DARG HH21', -0.823, (-36.377, 15.458, -50.311)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.789, (-35.494, 18.11, -33.323)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.76, (-20.945, 25.287, -36.38)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.76, (-49.698, -4.237, -51.252)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.685, (8.365, 0.329, -14.852)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.619, (-10.956, 19.369, -7.28)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.596, (-34.983, 12.399, -49.975)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.589, (-24.578, 1.977, -43.092)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.589, (-42.661, 16.391, -41.067)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.582, (-32.377, 20.265, -50.26)), (' C 302  MG  MG  ', ' C 454  HOH  O  ', -0.581, (-26.015, 31.074, -49.23)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.58, (-34.508, 11.977, -49.811)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.576, (-7.666, 4.059, -25.147)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.556, (-50.127, 8.108, -62.346)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.554, (-5.803, -19.522, -22.255)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.553, (-39.398, 20.824, -37.544)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.548, (-36.241, 19.203, -33.688)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.54, (2.732, 23.304, -26.227)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.538, (-9.264, 1.375, -25.271)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.538, (-43.216, 13.703, -43.327)), (' B 125 CGLU  HG3', ' B 447  HOH  O  ', -0.535, (-13.266, 13.167, -18.942)), (' B 125 DGLU  HG3', ' B 447  HOH  O  ', -0.535, (-13.266, 13.167, -18.942)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.532, (-10.607, -4.427, -13.608)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.517, (-4.739, -0.111, -11.546)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.512, (-35.743, 14.516, -49.525)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.512, (-35.743, 14.516, -49.525)), (' B 125 DGLU  HG2', ' B 145 DTHR  HB ', -0.505, (-10.361, 14.554, -18.959)), (' B 125 CGLU  HG2', ' B 145 CTHR  HB ', -0.505, (-10.361, 14.554, -18.959)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.503, (10.015, -1.641, -15.055)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.499, (-5.122, -14.022, -7.51)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.497, (-54.429, -8.487, -50.451)), (' B 145 CTHR HG23', ' E   1 CLIG  C10', -0.497, (-5.977, 14.071, -20.705)), (' B 145 DTHR HG23', ' E   1 DLIG  C10', -0.497, (-5.977, 14.071, -20.705)), (' D 119  TYR  CD1', ' D 148 DILE HG21', -0.496, (-48.359, -2.767, -48.159)), (' C 206 AHIS  HD2', ' D 200  TYR  OH ', -0.491, (-46.255, 11.392, -43.748)), (' C 206 BHIS  HD2', ' D 200  TYR  OH ', -0.491, (-46.255, 11.392, -43.748)), (' D 119  TYR  CD1', ' D 148 CILE HG21', -0.491, (-47.784, -2.898, -48.198)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.485, (-32.435, 14.472, -51.749)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.485, (-32.435, 14.472, -51.749)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.482, (2.673, 23.403, -26.491)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.48, (-9.039, -1.574, -27.82)), (' D 189  GLU  O  ', ' D 191  LEU  HG ', -0.474, (-26.217, 2.293, -42.155)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.471, (-54.232, -4.371, -36.423)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.47, (-21.084, -5.903, -52.639)), (' A 206 AHIS  HD2', ' B 200  TYR  OH ', -0.469, (-5.576, 10.557, -22.772)), (' A 206 BHIS  HD2', ' B 200  TYR  OH ', -0.469, (-5.576, 10.557, -22.772)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.468, (-5.834, -19.752, -22.511)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.461, (-18.67, -8.532, -42.363)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.458, (-23.353, 3.148, -13.517)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.455, (-4.503, -4.455, -29.199)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.451, (-33.479, -11.724, -11.55)), (' A 206 DHIS  HD2', ' B 200  TYR  OH ', -0.443, (-6.141, 10.405, -22.892)), (' A 179  LEU HD23', ' A 205 BLYS  HD2', -0.442, (-14.552, 11.83, -24.594)), (' D  16  TYR  OH ', ' D  37  MET  HE2', -0.442, (-31.09, 41.006, -68.674)), (' A 206 CHIS  HD2', ' B 200  TYR  OH ', -0.442, (-5.748, 10.217, -22.991)), (' A 179  LEU HD23', ' A 205 ALYS  HD2', -0.441, (-14.605, 11.341, -24.362)), (' A  64  VAL  O  ', ' A  66  PRO  HD3', -0.441, (-13.708, -6.925, -23.215)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.44, (-47.759, 19.285, -50.13)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.439, (-5.284, -7.501, -27.798)), (' D 189  GLU  O  ', ' D 191  LEU  N  ', -0.429, (-24.699, 2.391, -42.364)), (' D  64  VAL  O  ', ' D  66 DPRO  HD3', -0.427, (-42.714, 6.267, -49.171)), (' A  65  ILE  HA ', ' A  66  PRO  HD3', -0.425, (-13.272, -5.671, -24.021)), (' D  64  VAL  O  ', ' D  66 CPRO  HD3', -0.424, (-42.637, 6.518, -49.511)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.422, (-29.249, 42.631, -60.25)), (' D  67 DVAL  HA ', ' D  76  CYS  O  ', -0.413, (-46.423, 3.431, -43.458)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.406, (-6.581, 6.323, -22.393)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.401, (-48.796, 27.626, -35.353)), (' D  67 CVAL  HA ', ' D  76  CYS  O  ', -0.401, (-46.442, 3.247, -43.064))]
gui = coot_molprobity_todo_list_gui(data=data)
