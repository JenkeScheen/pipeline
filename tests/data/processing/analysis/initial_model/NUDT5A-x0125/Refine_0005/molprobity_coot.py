# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.040636728420704045, (-14.183999999999996, -7.734000000000001, -27.138)), ('B', '  66 ', 'PRO', 0.06312966922428243, (-1.5180000000000007, 13.869, -17.102)), ('B', '  66 ', 'PRO', 0.06312966922428243, (-1.5180000000000007, 13.869, -17.102)), ('B', '  66 ', 'PRO', 0.041737647824002994, (-1.5010000000000003, 13.868999999999998, -17.062)), ('B', '  66 ', 'PRO', 0.041737647824002994, (-1.5010000000000003, 13.868999999999998, -17.062)), ('B', ' 161 ', 'LYS', 0.06580307280092228, (6.279999999999998, 17.341, -2.7)), ('C', '  66 ', 'PRO', 0.031549527896344104, (-36.039, 27.831, -38.188)), ('D', '  66 ', 'PRO', 0.05899009455890242, (-45.822999999999986, 4.611, -47.929)), ('D', '  66 ', 'PRO', 0.05899009455890242, (-45.822999999999986, 4.611, -47.929))]
data['omega'] = [('B', ' 208 ', 'ASN', None, (-6.995999999999997, 3.5949999999999998, -33.876))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.501999999999995, -0.562, -2.25)), ('A', '  38 ', 'ASP', 0.2806250463022143, (10.970999999999995, 1.839, 3.208)), ('A', '  43 ', 'THR', 0.049554543668243016, (10.286, -0.5419999999999994, 8.79)), ('A', '  70 ', 'ARG', 0.04121245690700479, (-19.333, -6.897, -38.717)), ('A', ' 125 ', 'GLU', 0.08643868696700459, (-3.4539999999999997, -9.931999999999999, -27.842000000000002)), ('A', ' 191 ', 'LEU', 0.0008933330548319695, (-24.942000000000004, 2.5689999999999995, -12.333)), ('B', '  31 ', 'LEU', 0.07007381595846891, (-13.919999999999995, -7.041999999999998, 5.181)), ('B', '  38 ', 'ASP', 0.038843752318952526, (-30.30499999999999, -12.678, -6.404)), ('B', '  43 ', 'THR', 0.016319203132297844, (-30.687000000000005, -15.035, -0.8690000000000002)), ('B', ' 188 ', 'GLU', 0.2191961535631792, (13.244999999999997, -5.112, -18.769)), ('B', ' 205 ', 'LYS', 0.032794653990854995, (-3.4889999999999985, 1.7089999999999987, -30.228000000000005)), ('B', ' 208 ', 'ASN', 0.0, (-6.571, 2.895999999999999, -35.105)), ('C', '  31 ', 'LEU', 0.0048925628063393855, (-19.494, 14.742999999999997, -63.40500000000001)), ('C', '  45 ', 'THR', 0.200801832185342, (-21.787999999999997, 1.548, -64.239)), ('C', ' 136 ', 'LEU', 0.2522211444075216, (-27.592, 11.313999999999998, -58.71300000000001)), ('C', ' 164 ', 'ASP', 0.0014429497357459663, (-23.213, 40.29699999999998, -52.928000000000004)), ('C', ' 189 ', 'GLU', 0.22616287435644794, (-47.11699999999998, 32.38399999999999, -58.604)), ('D', '  24 ', 'SER', 0.17814251653382437, (-20.787999999999997, 18.155, -70.974)), ('D', '  43 ', 'THR', 0.029707741381790102, (-25.104, 39.293, -65.675)), ('D', '  72 ', 'LEU', 0.03688452460788921, (-55.67899999999998, -2.3280000000000007, -33.901)), ('D', ' 196 ', 'ARG', 0.0, (-36.43799999999999, 13.957999999999998, -47.35600000000001)), ('D', ' 196 ', 'ARG', 0.0, (-36.43799999999999, 13.957999999999998, -47.35600000000001)), ('D', ' 208 ', 'ASN', 0.0, (-46.47800000000001, 18.404999999999994, -31.214000000000006)), ('D', ' 208 ', 'ASN', 0.0, (-46.47800000000001, 18.404999999999994, -31.214000000000006))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.30733061060562467, (-23.159, -8.015, -13.29)), ('D', '  52 ', 'THR', ' ', 0.29066346744271204, (-30.430999999999994, 13.906999999999996, -70.866)), ('D', '  74 ', 'TYR', ' ', 0.2526562557334266, (-48.15299999999999, 1.3099999999999978, -34.302))]
data['probe'] = [(' D 196 DARG  CG ', ' D 196 DARG HH21', -1.273, (-36.457, 15.355, -50.191)), (' D 196 BARG  CG ', ' D 196 BARG HH21', -1.273, (-36.457, 15.355, -50.191)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -1.159, (-35.345, 15.913, -49.974)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -1.159, (-35.345, 15.913, -49.974)), (' C 176  ASN  HB3', ' F   3 DHOH  O  ', -0.913, (-49.432, 23.795, -36.168)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.787, (-35.483, 18.105, -33.342)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.754, (-20.939, 25.283, -36.379)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.754, (-49.692, -4.24, -51.253)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.745, (-19.081, -8.889, -42.637)), (' D 196 DARG  N  ', ' D 196 DARG  NH2', -0.704, (-35.098, 14.222, -48.877)), (' D 196 BARG  N  ', ' D 196 BARG  NH2', -0.704, (-35.098, 14.222, -48.877)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.662, (8.369, 0.335, -14.858)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.646, (-10.925, 19.393, -7.25)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.633, (-34.977, 12.395, -49.981)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.628, (-34.563, 11.919, -49.816)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.6, (-32.372, 20.282, -50.244)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.593, (-42.656, 16.389, -41.066)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.591, (-35.446, 14.468, -49.001)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.591, (-35.446, 14.468, -49.001)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -0.586, (-36.619, 15.801, -49.258)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -0.586, (-36.619, 15.801, -49.258)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.579, (-7.672, 4.055, -25.132)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.578, (-5.804, -19.517, -22.262)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.564, (-39.395, 20.816, -37.547)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.554, (-36.24, 19.207, -33.694)), (' A 206 AHIS  HD2', ' B 200  TYR  OH ', -0.553, (-5.538, 10.581, -22.979)), (' A 206 BHIS  HD2', ' B 200  TYR  OH ', -0.553, (-5.538, 10.581, -22.979)), (' A 200  TYR  CD1', ' B 203  ALA  HB2', -0.543, (-9.254, 1.378, -25.282)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.539, (-10.6, -4.426, -13.62)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.536, (-50.13, 8.114, -62.35)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.528, (-43.216, 13.697, -43.318)), (' B 125 DGLU  HG3', ' B 447  HOH  O  ', -0.526, (-13.034, 13.003, -18.895)), (' B 125 CGLU  HG3', ' B 447  HOH  O  ', -0.526, (-13.034, 13.003, -18.895)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.517, (2.26, 23.4, -26.392)), (' D  71  THR  O  ', ' D  73  HIS  ND1', -0.516, (-54.233, -4.374, -36.431)), (' D 196 BARG  H  ', ' D 196 BARG  NH2', -0.508, (-34.715, 13.978, -48.42)), (' D 196 DARG  H  ', ' D 196 DARG  NH2', -0.508, (-34.715, 13.978, -48.42)), (' D 152  ASP  OD2', ' D 154  GLU  N  ', -0.495, (-54.443, -8.59, -50.37)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.491, (-5.111, -14.021, -7.451)), (' B 189  GLU  HB3', ' B 191  LEU HD12', -0.487, (9.994, -1.602, -15.046)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.484, (-9.025, -1.568, -27.817)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.479, (-21.075, -5.901, -52.644)), (' B 194  ASP  OD2', ' B 196  ARG  NH2', -0.466, (-4.735, -0.124, -11.552)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.464, (-5.005, -4.296, -29.142)), (' A 125  GLU  HG3', ' A 145  THR  HB ', -0.462, (-5.272, -7.496, -27.809)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.461, (-5.835, -19.747, -22.518)), (' D  38  ASP  OD1', ' D  40  THR  N  ', -0.46, (-29.603, 42.795, -59.956)), (' D  16  TYR  OH ', ' D  37  MET  HE2', -0.458, (-31.114, 41.045, -68.67)), (' D 119  TYR  CD1', ' D 148 CILE HG21', -0.449, (-48.038, -3.046, -48.147)), (' D 119  TYR  CD1', ' D 148 DILE HG21', -0.449, (-48.038, -3.046, -48.147)), (' B 208  ASN  H  ', ' B 208  ASN  ND2', -0.447, (-5.312, 4.086, -33.508)), (' B  14  LYS  HE3', ' B  39  PRO  HB2', -0.446, (-33.436, -11.732, -11.688)), (' D 113  LEU HD22', ' D 146 DVAL HG11', -0.446, (-47.669, 2.753, -52.08)), (' D 113  LEU HD22', ' D 146 CVAL HG11', -0.446, (-47.669, 2.753, -52.08)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.443, (2.706, 23.448, -26.471)), (' B 125 DGLU  HG2', ' B 145 DTHR  HB ', -0.441, (-9.848, 14.874, -18.952)), (' B 125 CGLU  HG2', ' B 145 CTHR  HB ', -0.441, (-9.848, 14.874, -18.952)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.44, (-47.767, 19.293, -50.138)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.44, (-32.412, 14.326, -51.227)), (' B 208  ASN  H  ', ' B 208  ASN HD22', -0.433, (-5.747, 3.8, -33.17)), (' A 191  LEU  C  ', ' A 191  LEU HD23', -0.433, (-23.593, 3.124, -13.548)), (' B 145 CTHR HG23', ' E   1 CLIG  C10', -0.431, (-6.306, 13.567, -20.352)), (' B 145 DTHR HG23', ' E   1 DLIG  C10', -0.431, (-6.306, 13.567, -20.352)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.429, (-32.315, 14.632, -51.639)), (' A  64  VAL  O  ', ' A  66  PRO  HD3', -0.428, (-13.703, -6.909, -23.223)), (' D 196 BARG  CB ', ' D 196 BARG  NH2', -0.425, (-35.962, 14.163, -48.84)), (' D 196 DARG  CB ', ' D 196 DARG  NH2', -0.425, (-35.962, 14.163, -48.84)), (' A  65  ILE  HA ', ' A  66  PRO  HD3', -0.421, (-13.267, -5.655, -24.029)), (' D 196 BARG  CA ', ' D 196 BARG  NH2', -0.418, (-35.539, 14.739, -48.569)), (' D 196 DARG  CA ', ' D 196 DARG  NH2', -0.418, (-35.539, 14.739, -48.569)), (' D  64  VAL  O  ', ' D  66 DPRO  HD3', -0.413, (-42.708, 6.248, -49.172)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.41, (-6.606, 6.316, -22.836)), (' D  68 DLEU  HA ', ' D 148 DILE  HB ', -0.409, (-49.317, 0.016, -45.711)), (' D  68 CLEU  HA ', ' D 148 CILE  HB ', -0.409, (-49.317, 0.016, -45.711)), (' D  38  ASP  HB2', ' D  39  PRO  CD ', -0.408, (-29.917, 39.796, -58.851)), (' D  64  VAL  O  ', ' D  66 CPRO  HD3', -0.403, (-42.622, 6.544, -49.462)), (' D 191  LEU  C  ', ' D 191  LEU HD12', -0.402, (-27.024, 5.055, -43.202))]
gui = coot_molprobity_todo_list_gui(data=data)
