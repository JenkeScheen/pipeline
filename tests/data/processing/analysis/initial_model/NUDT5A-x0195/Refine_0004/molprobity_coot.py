# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.046991124949490266, (-13.901999999999997, -7.748000000000001, -27.186999999999998)), ('B', '  40 ', 'THR', 0.040298194670363385, (-33.923000000000016, -15.98, -8.933)), ('B', '  66 ', 'PRO', 0.06031300953509898, (-1.4850000000000017, 14.050999999999993, -17.08)), ('D', '  66 ', 'PRO', 0.09431599249225511, (-45.623, 4.579999999999999, -48.081999999999994))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.804999999999994, -0.1520000000000002, -2.297)), ('A', '  33 ', 'LYS', 0.055412340886902126, (-0.5109999999999999, -6.728, 7.83)), ('A', '  33 ', 'LYS', 0.055412340886902126, (-0.5109999999999999, -6.728, 7.83)), ('A', '  33 ', 'LYS', 0.055412340886902126, (-0.5109999999999999, -6.728, 7.83)), ('A', '  38 ', 'ASP', 0.12103527861619491, (11.063, 2.118, 3.219)), ('A', '  43 ', 'THR', 0.2007579915058159, (10.552999999999999, -0.40899999999999936, 8.815)), ('A', '  70 ', 'ARG', 0.02260915839637344, (-19.044, -6.899000000000004, -38.847)), ('A', ' 191 ', 'LEU', 0.0, (-24.935999999999996, 2.25, -12.536)), ('B', '  31 ', 'LEU', 0.0, (-13.552, -7.006, 5.134)), ('C', '  31 ', 'LEU', 0.0, (-19.076, 14.984999999999996, -63.352)), ('C', '  45 ', 'THR', 0.10534671856168573, (-21.185000000000002, 1.7959999999999976, -64.438)), ('C', '  45 ', 'THR', 0.1067658985186355, (-21.185000000000002, 1.7959999999999958, -64.437)), ('C', '  45 ', 'THR', 0.10534671856168573, (-21.185000000000002, 1.7959999999999976, -64.438)), ('C', '  53 ', 'THR', 0.17972408667325668, (-15.782, 22.618000000000002, -52.741)), ('C', ' 164 ', 'ASP', 0.011065545754374753, (-22.698, 39.959, -53.196)), ('C', ' 189 ', 'GLU', 0.2525375432024605, (-46.92100000000001, 32.437, -58.614)), ('D', '  43 ', 'THR', 0.009803659327244618, (-24.963, 39.54, -65.742)), ('D', '  72 ', 'LEU', 0.021577429383115923, (-55.13800000000002, -2.358000000000002, -34.014)), ('D', ' 188 ', 'GLU', 0.27430772484764554, (-24.389000000000003, 1.464999999999999, -36.03)), ('D', ' 196 ', 'ARG', 0.2086629563277836, (-36.19100000000001, 13.95, -47.455)), ('D', ' 196 ', 'ARG', 0.2440585397170419, (-36.19100000000001, 13.950999999999997, -47.461))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2961065210901028, (-22.658000000000005, -8.085999999999999, -13.267999999999999)), ('B', '  82 ', 'GLN', ' ', 0.265882792454694, (5.2, 4.03, -5.787)), ('D', ' 188 ', 'GLU', ' ', 0.35156032861230524, (-25.30900000000001, 0.5209999999999981, -35.265))]
data['probe'] = [(' B 301  EDO  H22', ' B 404  HOH  O  ', -0.798, (2.739, 23.287, -26.867)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.794, (-51.018, -6.523, -44.277)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.769, (-20.792, 25.067, -36.729)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.731, (-33.879, 12.129, -49.835)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.731, (-33.879, 12.129, -49.835)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.723, (-33.867, 12.139, -49.839)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.717, (-5.962, -19.342, -22.705)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.687, (-34.823, 18.199, -33.427)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.668, (-18.84, -9.132, -42.603)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.653, (-7.533, 4.164, -25.269)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.646, (-49.961, 7.885, -62.578)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.645, (-11.032, 19.392, -7.282)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.642, (-27.803, 42.547, -66.15)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.642, (2.399, 22.958, -26.008)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.628, (-49.53, -3.702, -51.852)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.587, (-54.79, -3.324, -44.663)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.581, (-35.845, 18.825, -33.727)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.579, (-26.097, 32.97, -48.593)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.574, (-31.624, 20.291, -50.643)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.567, (-20.352, -4.422, -35.992)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.555, (-42.41, 16.396, -41.079)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.543, (-54.954, -3.705, -44.87)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.525, (-4.43, -4.337, -29.615)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.519, (-16.931, 11.801, -6.777)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.51, (9.958, 18.391, -9.42)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.506, (-6.85, 1.843, -10.119)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.503, (-6.626, -1.013, -10.465)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.503, (-6.632, -1.006, -10.461)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.503, (-6.626, -1.013, -10.465)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.501, (-20.709, -5.67, -52.845)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.498, (-6.626, -0.998, -10.456)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.498, (-43.325, 13.828, -42.919)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.498, (-6.332, -15.038, 6.0)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.497, (-22.032, -4.594, -41.494)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.494, (-54.528, -3.094, -45.47)), (' C  58  THR  CB ', ' C 142  HIS  NE2', -0.482, (-20.832, 17.223, -41.299)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.478, (-5.585, -19.803, -22.396)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.474, (-6.656, 6.723, -22.609)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.473, (-50.333, 13.744, -46.474)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.464, (-20.406, -4.922, -35.374)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.46, (-10.263, -3.95, -13.191)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.457, (-39.182, 21.103, -37.362)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.456, (-48.276, 27.8, -35.342)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.455, (-23.72, 1.469, -43.206)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.453, (-46.316, 11.397, -43.621)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.451, (-6.156, 10.543, -22.95)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.446, (-50.946, 18.176, -46.201)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.445, (-40.402, 18.752, -40.729)), (' C 127  SER  HB2', ' C 128  PRO  HD2', -0.443, (-29.475, 14.294, -39.186)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.441, (-47.625, 19.559, -49.858)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.438, (8.302, 0.458, -14.804)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.436, (-9.009, -1.773, -27.897)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.433, (-14.507, 11.845, -24.566)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.433, (-10.683, 13.657, -22.207)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.424, (-9.552, -4.851, 0.385)), (' C  45 ETHR HG23', ' F   5 EHOH  O  ', -0.423, (-22.874, 4.146, -66.666)), (' C  45 DTHR HG23', ' F   5 DHOH  O  ', -0.423, (-22.873, 4.146, -66.665)), (' C  45 CTHR HG23', ' F   5 CHOH  O  ', -0.423, (-22.874, 4.146, -66.666)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.421, (-56.477, -4.166, -43.924)), (' B  23  ILE HD11', ' B  33  LYS  HB2', -0.419, (-17.698, -11.946, 5.734)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.418, (-33.967, 33.653, -49.143)), (' A  87  MET  HB3', ' A  87  MET  HE3', -0.413, (-20.97, -0.317, -6.747)), (' D 208  ASN  CG ', ' D 415  HOH  O  ', -0.41, (-46.057, 14.67, -30.27)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.407, (5.261, 2.781, -10.267)), (' A  18  ILE HD11', ' A  37  MET  HE2', -0.406, (13.191, -3.511, 6.496)), (' C  64  VAL  O  ', ' C  66  PRO  HD3', -0.404, (-34.871, 26.425, -41.542)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.402, (-23.365, -12.036, -30.139)), (' C 136  LEU  C  ', ' C 136  LEU HD13', -0.402, (-26.004, 13.298, -59.22))]
gui = coot_molprobity_todo_list_gui(data=data)
