# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04682199645207433, (-13.901, -7.751, -27.176)), ('B', '  66 ', 'PRO', 0.06473214373895839, (-1.4699999999999984, 14.046999999999999, -17.077)), ('D', '  66 ', 'PRO', 0.0965233102121571, (-45.614, 4.5929999999999955, -48.074)), ('D', ' 190 ', 'HIS', 0.017969245656494187, (-22.143, 2.1889999999999956, -42.741))]
data['omega'] = [('D', ' 208 ', 'ASN', None, (-45.732000000000006, 18.333, -32.805))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.769000000000007, -0.14100000000000001, -2.393)), ('A', '  33 ', 'LYS', 0.15281045631498272, (-0.49799999999999955, -6.711, 7.824)), ('A', '  33 ', 'LYS', 0.15281045631498272, (-0.49799999999999955, -6.711, 7.824)), ('A', '  33 ', 'LYS', 0.15281045631498272, (-0.49799999999999955, -6.711, 7.824)), ('A', '  38 ', 'ASP', 0.1567781192879929, (11.049, 2.115, 3.222)), ('A', '  43 ', 'THR', 0.10804024520100886, (10.587, -0.38699999999999957, 8.814)), ('A', '  70 ', 'ARG', 0.019395809926549483, (-19.043, -6.9040000000000035, -38.851)), ('A', ' 191 ', 'LEU', 0.00014912697590002558, (-24.972, 2.253999999999999, -12.561)), ('B', '  31 ', 'LEU', 0.000300034281738612, (-13.528000000000002, -7.01, 5.139999999999998)), ('C', '  22 ', 'LEU', 0.12796785765004265, (-13.240000000000006, 12.282999999999994, -64.275)), ('C', '  31 ', 'LEU', 0.007459207530391784, (-19.06600000000001, 14.944, -63.38)), ('C', '  53 ', 'THR', 0.23850143750899122, (-15.789000000000001, 22.616999999999997, -52.759)), ('C', ' 164 ', 'ASP', 0.008125261484244438, (-22.718, 39.99499999999999, -53.188)), ('C', ' 189 ', 'GLU', 0.21883628254121498, (-46.94, 32.428, -58.611)), ('D', '  43 ', 'THR', 0.023456243598787275, (-24.948, 39.522, -65.726)), ('D', '  72 ', 'LEU', 0.1310209990096269, (-55.13799999999999, -2.345000000000003, -33.992))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2715664105398318, (-22.691000000000003, -8.094, -13.257)), ('D', ' 188 ', 'GLU', ' ', 0.2750532217581442, (-25.27, 0.5619999999999985, -35.256))]
data['probe'] = [(' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.87, (-43.022, 17.25, -32.698)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.71, (-5.956, -19.358, -22.747)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.705, (-20.633, 25.286, -36.471)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.692, (-34.823, 18.197, -33.441)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.676, (-18.958, -9.078, -42.669)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.638, (-7.531, 4.161, -25.25)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.623, (-49.536, -3.688, -51.836)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.612, (-51.018, -6.551, -44.268)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.605, (-11.562, 19.405, -7.151)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.595, (-42.4, 16.447, -41.084)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.56, (-35.874, 18.826, -33.686)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.559, (-49.776, 8.09, -62.551)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.558, (-31.624, 20.284, -50.645)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.547, (-24.09, 1.863, -43.191)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.541, (-34.627, 12.468, -50.049)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.536, (-34.018, 12.291, -49.75)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.532, (-34.015, 12.298, -49.748)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.523, (-20.49, -5.506, -52.836)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.518, (-6.832, 1.844, -10.058)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.509, (-20.212, -4.547, -36.007)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.505, (-27.935, 42.704, -66.098)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.503, (-4.832, -4.11, -29.56)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.494, (10.034, 18.492, -9.315)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.494, (2.228, 23.154, -26.205)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.49, (-16.665, 12.075, -7.204)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.483, (-6.652, 6.728, -22.598)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.482, (-22.356, -4.824, -41.011)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.481, (-54.692, -3.781, -44.378)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.479, (-10.329, -4.235, -13.607)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.479, (2.442, 23.28, -26.648)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.476, (-54.797, -3.343, -44.62)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.475, (-6.351, -0.75, -10.664)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.469, (-6.506, -1.065, -10.351)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.468, (-6.505, -1.067, -10.353)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.468, (-6.505, -1.067, -10.353)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.465, (-43.313, 13.828, -42.927)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.462, (-5.591, -19.828, -22.402)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.46, (-6.305, -15.021, 6.219)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.454, (-23.029, -11.926, -30.443)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.454, (-50.326, 13.743, -46.504)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.447, (8.262, 0.38, -14.849)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.443, (-39.183, 21.098, -37.359)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.437, (-47.63, 19.571, -49.859)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.432, (-40.42, 18.747, -40.744)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.43, (-54.416, -2.987, -45.254)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.429, (-33.991, 33.695, -49.126)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.428, (-51.032, 18.619, -46.403)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.428, (-6.142, 10.509, -22.696)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.424, (-20.248, -5.033, -35.373)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.418, (-9.536, -4.847, 0.406)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.413, (-10.685, 13.664, -22.258)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.412, (-9.024, -1.779, -27.894)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.407, (-56.5, -4.138, -43.928)), (' B  23  ILE HD11', ' B  33  LYS  HB2', -0.404, (-17.685, -12.012, 5.656)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.403, (-48.503, 27.624, -35.313)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.402, (-32.096, 14.434, -51.348))]
gui = coot_molprobity_todo_list_gui(data=data)
