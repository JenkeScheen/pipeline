# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04638329565154542, (-13.911, -7.744, -27.183999999999997)), ('B', '  66 ', 'PRO', 0.06524162537800829, (-1.4819999999999998, 14.049, -17.067)), ('D', '  66 ', 'PRO', 0.0851646469918807, (-45.618, 4.581, -48.074))]
data['omega'] = [('D', '  53 ', 'THR', None, (-33.26, 12.746999999999998, -69.419))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.792000000000002, -0.19200000000000006, -2.329)), ('A', '  38 ', 'ASP', 0.10238970887793951, (11.064000000000004, 2.122, 3.219)), ('A', '  70 ', 'ARG', 0.02323197039731126, (-19.045, -6.897, -38.846)), ('A', ' 125 ', 'GLU', 0.240214804324328, (-3.1950000000000003, -9.858, -27.943)), ('A', ' 191 ', 'LEU', 0.00011290999640973707, (-24.930000000000003, 2.2649999999999997, -12.515999999999998)), ('B', '  31 ', 'LEU', 0.0, (-13.550000000000002, -7.0, 5.123999999999999)), ('B', '  38 ', 'ASP', 0.15059613829974067, (-29.911, -12.947999999999997, -6.402)), ('C', '  31 ', 'LEU', 0.0, (-19.064, 14.973, -63.342)), ('C', '  45 ', 'THR', 0.01495926990173757, (-21.248999999999995, 1.8069999999999968, -64.545)), ('C', '  45 ', 'THR', 0.01495926990173757, (-21.248999999999995, 1.8069999999999968, -64.545)), ('C', '  53 ', 'THR', 0.15986838259367386, (-15.802, 22.614, -52.711)), ('C', ' 164 ', 'ASP', 0.0847215419615751, (-22.668999999999997, 39.905, -53.245)), ('D', '  43 ', 'THR', 0.017663729855366208, (-24.921999999999993, 39.498000000000005, -65.739)), ('D', '  72 ', 'LEU', 0.009424936166736573, (-55.14200000000003, -2.3630000000000013, -34.016)), ('D', ' 196 ', 'ARG', 0.19338970175312692, (-36.16799999999999, 14.020000000000003, -47.38399999999999)), ('D', ' 196 ', 'ARG', 0.03496056647221886, (-36.188, 13.972999999999999, -47.45399999999999)), ('D', ' 196 ', 'ARG', 0.19338970175312692, (-36.16799999999999, 14.020000000000003, -47.38399999999999)), ('D', ' 196 ', 'ARG', 0.03496056647221886, (-36.188, 13.972999999999999, -47.45399999999999)), ('D', ' 208 ', 'ASN', 0.24792322109169015, (-45.93600000000001, 18.611000000000004, -31.200999999999997))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.28849524189675346, (-22.681, -8.094999999999999, -13.270999999999999)), ('B', '  82 ', 'GLN', ' ', 0.2647056214652275, (5.213, 4.0440000000000005, -5.7829999999999995)), ('D', ' 188 ', 'GLU', ' ', 0.32573419511112806, (-25.337000000000003, 0.5129999999999981, -35.283)), ('D', ' 189 ', 'GLU', ' ', 0.27188594267060356, (-25.650000000000002, 0.3120000000000003, -40.176))]
data['probe'] = [(' D 194  ASP  OD1', ' D 196 AARG  HD3', -1.064, (-33.819, 11.978, -49.784)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -1.064, (-33.819, 11.978, -49.784)), (' D 196 DARG  HG3', ' D 196 DARG HH21', -1.06, (-36.332, 15.54, -50.29)), (' D 196 BARG  HG3', ' D 196 BARG HH21', -1.06, (-36.332, 15.54, -50.29)), (' D 196 DARG  HG3', ' D 196 DARG  NH2', -0.882, (-35.184, 15.829, -50.029)), (' D 196 BARG  HG3', ' D 196 BARG  NH2', -0.882, (-35.184, 15.829, -50.029)), (' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.841, (-50.976, -6.54, -44.261)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.803, (-20.645, 25.281, -36.693)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.794, (2.703, 23.273, -26.851)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.721, (-5.992, -19.366, -22.711)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.706, (-34.837, 18.219, -33.413)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.704, (-19.068, -9.067, -42.617)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.67, (-49.527, -3.705, -51.896)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.653, (-7.538, 4.17, -25.262)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.649, (-11.023, 19.397, -7.275)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.647, (-49.928, 7.901, -62.575)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.582, (-26.095, 32.953, -48.58)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.58, (-35.856, 18.832, -33.708)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.569, (-20.358, -4.424, -35.976)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.566, (-42.388, 16.394, -41.09)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.565, (-31.62, 20.296, -50.634)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.556, (2.131, 22.912, -25.996)), (' D 196 BARG  CG ', ' D 196 BARG  NH2', -0.541, (-35.673, 14.738, -49.753)), (' D 196 DARG  CG ', ' D 196 DARG  NH2', -0.541, (-35.673, 14.738, -49.753)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.529, (-54.778, -3.363, -44.652)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.518, (-43.311, 13.832, -42.905)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.516, (-54.687, -4.04, -44.619)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.513, (-4.409, -4.333, -29.604)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.512, (-27.96, 42.761, -66.154)), (' A 132  MET  O  ', ' B 196  ARG  NH2', -0.509, (-6.601, -0.992, -10.488)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.508, (-16.579, 12.088, -7.193)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.492, (-6.668, 6.727, -22.593)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.491, (-20.711, -5.643, -52.842)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.487, (-54.542, -3.082, -45.461)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.481, (-22.025, -4.56, -41.504)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.478, (-50.123, 13.746, -46.608)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.478, (-46.158, 11.393, -43.829)), (' C  58  THR  CB ', ' C 142  HIS  NE2', -0.475, (-20.839, 17.227, -41.3)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.473, (-5.597, -19.796, -22.378)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.454, (-48.276, 27.831, -35.385)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.451, (-39.183, 21.105, -37.36)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.448, (-10.509, -4.354, -13.474)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.445, (-6.164, 10.518, -22.697)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.444, (-6.334, -15.081, 6.29)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.44, (-47.62, 19.584, -49.857)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.436, (-9.528, -4.822, 0.344)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.435, (-20.415, -4.924, -35.362)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.435, (-9.002, -1.782, -27.895)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.435, (8.317, 0.489, -14.803)), (' C  64  VAL  O  ', ' C  66  PRO  HD3', -0.435, (-34.97, 26.46, -41.781)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.43, (-10.686, 13.662, -22.201)), (' C 132  MET  O  ', ' D 196 DARG  NH1', -0.427, (-32.099, 14.666, -51.823)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.427, (-32.099, 14.666, -51.823)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.426, (-50.957, 18.198, -46.2)), (' C 127  SER  HB2', ' C 128  PRO  HD2', -0.425, (-29.471, 14.266, -39.196)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.419, (-14.565, 11.88, -24.543)), (' A  87  MET  HB3', ' A  87  MET  HE3', -0.417, (-20.985, -0.326, -6.744)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.414, (-40.411, 18.732, -40.726)), (' D 208  ASN  CG ', ' D 415  HOH  O  ', -0.413, (-45.923, 14.538, -30.495)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.408, (-33.951, 33.615, -49.152)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.404, (5.271, 2.771, -10.271)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.401, (9.997, 18.022, -9.127))]
gui = coot_molprobity_todo_list_gui(data=data)
