# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04722753553407056, (-13.901999999999997, -7.751, -27.18)), ('B', '  66 ', 'PRO', 0.08294272182983398, (-1.463, 14.049999999999997, -17.066)), ('D', ' 190 ', 'HIS', 0.02124230475252593, (-22.217, 2.1729999999999965, -42.57)), ('D', ' 190 ', 'HIS', 0.021506882289942825, (-22.217, 2.1729999999999965, -42.57))]
data['omega'] = [('D', ' 208 ', 'ASN', None, (-45.712000000000025, 18.356, -32.862)), ('D', ' 208 ', 'ASN', None, (-45.712000000000025, 18.356, -32.862))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.761, -0.16300000000000012, -2.42)), ('A', '  33 ', 'LYS', 0.2200889056112535, (-0.4960000000000002, -6.7170000000000005, 7.83)), ('A', '  33 ', 'LYS', 0.2200889056112535, (-0.4960000000000002, -6.7170000000000005, 7.83)), ('A', '  33 ', 'LYS', 0.2200889056112535, (-0.4960000000000002, -6.7170000000000005, 7.83)), ('A', '  38 ', 'ASP', 0.17682661550979453, (11.075000000000003, 2.099, 3.2069999999999994)), ('A', '  43 ', 'THR', 0.1584810774985273, (10.589000000000004, -0.393, 8.837)), ('A', '  70 ', 'ARG', 0.018541345911231043, (-19.049000000000003, -6.903000000000002, -38.855)), ('A', ' 189 ', 'GLU', 0.02422495790837522, (-29.761, 4.497999999999999, -15.106)), ('A', ' 189 ', 'GLU', 0.02422495790837522, (-29.761, 4.497999999999999, -15.106)), ('A', ' 189 ', 'GLU', 0.02422495790837522, (-29.761, 4.497999999999999, -15.106)), ('A', ' 191 ', 'LEU', 0.0, (-24.97300000000001, 2.246999999999998, -12.566)), ('B', '  31 ', 'LEU', 0.0, (-13.521, -7.006999999999999, 5.145999999999999)), ('C', '  22 ', 'LEU', 0.14456712515228257, (-13.238000000000003, 12.279999999999996, -64.286)), ('C', '  31 ', 'LEU', 0.008627831995989061, (-19.056999999999995, 14.942999999999994, -63.373)), ('C', ' 164 ', 'ASP', 0.0067282137122359285, (-22.698999999999998, 39.987999999999985, -53.166)), ('C', ' 189 ', 'GLU', 0.26927498319075166, (-46.922, 32.396, -58.596)), ('D', '  43 ', 'THR', 0.0312068629185689, (-24.94100000000001, 39.513999999999996, -65.74)), ('D', '  72 ', 'LEU', 0.23099219616644606, (-55.14199999999999, -2.3350000000000017, -33.993))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.2760509366777123, (-22.682999999999996, -8.081, -13.251)), ('D', ' 188 ', 'GLU', ' ', 0.26378123660473957, (-25.200000000000003, 0.6449999999999978, -35.202))]
data['probe'] = [(' C  54 CARG  NH2', ' F  59 CHOH  O  ', -0.809, (-16.701, 15.675, -52.776)), (' C  54 EARG  NH2', ' F  59 EHOH  O  ', -0.809, (-16.701, 15.675, -52.776)), (' C  54 DARG  NH2', ' F  59 DHOH  O  ', -0.809, (-16.701, 15.675, -52.776)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.72, (-5.966, -19.352, -22.731)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.72, (-34.827, 18.199, -33.452)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.71, (-18.68, -9.558, -42.292)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.709, (-20.628, 25.281, -36.484)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.692, (-43.49, 17.274, -32.252)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.674, (-42.927, 17.299, -32.417)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.648, (-7.275, 4.212, -25.231)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.627, (-49.549, -3.676, -51.83)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.604, (-42.396, 16.461, -41.092)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.601, (-11.54, 19.377, -7.129)), (' C  54 EARG  HB3', ' C  54 EARG HH21', -0.553, (-16.403, 16.765, -51.267)), (' C  54 CARG  HB3', ' C  54 CARG HH21', -0.553, (-16.403, 16.765, -51.267)), (' C  54 DARG  HB3', ' C  54 DARG HH21', -0.553, (-16.403, 16.765, -51.267)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.552, (-49.777, 8.08, -62.555)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.544, (-31.632, 20.284, -50.637)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.543, (-20.66, -5.676, -52.831)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.535, (-35.888, 18.827, -33.669)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.527, (-34.396, 12.586, -50.053)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.522, (-34.041, 12.308, -49.753)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.519, (-34.037, 12.313, -49.753)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.519, (-16.611, 12.085, -7.2)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.516, (-6.799, 1.827, -10.059)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.508, (-20.214, -4.544, -36.01)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.506, (-4.609, -4.483, -29.659)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.492, (-10.239, -3.945, -13.178)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.49, (-6.483, 6.554, -23.026)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.483, (8.293, 0.463, -14.854)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.478, (-6.524, -14.859, 6.21)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.477, (-22.076, -4.613, -41.487)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.476, (2.484, 23.265, -26.219)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.473, (-23.406, -12.144, -30.395)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.47, (10.235, 18.183, -8.858)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.469, (-5.59, -19.822, -22.378)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.469, (-6.529, -1.033, -10.34)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.469, (-6.529, -1.033, -10.34)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.465, (-6.533, -1.025, -10.34)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.465, (-6.533, -1.025, -10.34)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.46, (-43.304, 13.825, -42.924)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.454, (-50.619, 13.727, -46.866)), (' C  54 DARG  HB3', ' C  54 DARG  NH2', -0.45, (-16.071, 16.675, -51.021)), (' C  54 CARG  HB3', ' C  54 CARG  NH2', -0.45, (-16.071, 16.675, -51.021)), (' C  54 EARG  HB3', ' C  54 EARG  NH2', -0.45, (-16.071, 16.675, -51.021)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.447, (-40.414, 18.745, -40.751)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.442, (-54.685, -3.767, -44.355)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.439, (-6.16, 10.514, -22.703)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.434, (-27.729, 42.62, -65.836)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.433, (-39.193, 21.104, -37.35)), (' C  59 CALA  N  ', ' F  64 CHOH  O  ', -0.432, (-18.972, 17.017, -45.599)), (' C  59 EALA  N  ', ' F  64 EHOH  O  ', -0.432, (-18.972, 17.017, -45.599)), (' C  59 DALA  N  ', ' F  64 DHOH  O  ', -0.432, (-18.972, 17.017, -45.599)), (' D 189 AGLU  O  ', ' D 190 AHIS  C  ', -0.432, (-23.923, 1.892, -42.892)), (' D 189 BGLU  O  ', ' D 190 BHIS  C  ', -0.431, (-23.923, 1.891, -42.892)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.43, (-33.98, 33.687, -49.126)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.427, (-47.629, 19.555, -49.856)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.425, (-56.491, -4.126, -43.905)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.417, (-54.758, -3.373, -44.609)), (' C  55 CLYS  CB ', ' C  57 CGLN  N  ', -0.415, (-13.806, 19.396, -45.48)), (' C  55 DLYS  CB ', ' C  57 DGLN  N  ', -0.415, (-13.806, 19.396, -45.48)), (' C  55 ELYS  CB ', ' C  57 EGLN  N  ', -0.415, (-13.806, 19.396, -45.48)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.414, (-10.688, 13.67, -22.272)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.411, (-20.258, -5.029, -35.377)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.409, (-51.091, 18.664, -46.353)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.409, (-9.538, -4.839, 0.391)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.405, (-32.12, 14.431, -51.341)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.404, (2.528, 23.321, -26.424)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.403, (5.332, 2.773, -10.285))]
gui = coot_molprobity_todo_list_gui(data=data)
