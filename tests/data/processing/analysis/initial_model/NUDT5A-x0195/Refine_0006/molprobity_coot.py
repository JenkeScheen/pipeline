# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04680439560069378, (-13.898, -7.751999999999999, -27.183)), ('B', '  40 ', 'THR', 0.015558303047791098, (-33.916000000000004, -16.016999999999996, -8.958)), ('B', '  66 ', 'PRO', 0.06511821943018771, (-1.4699999999999998, 14.055, -17.082)), ('D', ' 190 ', 'HIS', 0.025539572700661567, (-22.146000000000008, 2.1869999999999985, -42.76299999999999))]
data['omega'] = [('D', ' 208 ', 'ASN', None, (-45.745999999999995, 18.346000000000004, -32.769))]
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.79, -0.137, -2.353)), ('A', '  33 ', 'LYS', 0.1173153042730876, (-0.4990000000000001, -6.708000000000001, 7.819)), ('A', '  33 ', 'LYS', 0.1173153042730876, (-0.4990000000000001, -6.708000000000001, 7.819)), ('A', '  33 ', 'LYS', 0.1173153042730876, (-0.4990000000000001, -6.708000000000001, 7.819)), ('A', '  38 ', 'ASP', 0.13438687828665627, (11.051000000000002, 2.115, 3.2319999999999998)), ('A', '  43 ', 'THR', 0.08781073787202752, (10.582999999999997, -0.41300000000000003, 8.808)), ('A', '  50 ', 'LYS', 0.19958422407750162, (-5.246999999999999, -10.653999999999998, -1.3049999999999997)), ('A', '  70 ', 'ARG', 0.019625206575538404, (-19.040999999999997, -6.901, -38.846)), ('A', ' 191 ', 'LEU', 0.0, (-24.952, 2.2330000000000005, -12.58)), ('B', '  31 ', 'LEU', 0.00029827819212466255, (-13.542, -7.003, 5.139)), ('C', '  22 ', 'LEU', 0.13520345695190197, (-13.239000000000006, 12.274999999999991, -64.275)), ('C', '  31 ', 'LEU', 0.0, (-19.067999999999998, 14.952999999999992, -63.355)), ('C', '  53 ', 'THR', 0.18889427840459774, (-15.776999999999994, 22.622999999999998, -52.759999999999984)), ('C', ' 164 ', 'ASP', 0.0044245267485026425, (-22.753, 40.001, -53.186)), ('C', ' 189 ', 'GLU', 0.20353472843283876, (-46.93600000000001, 32.42199999999999, -58.628)), ('D', '  43 ', 'THR', 0.009519535524304956, (-24.974000000000004, 39.51999999999999, -65.747)), ('D', '  72 ', 'LEU', 0.04949437407884803, (-55.134, -2.354000000000002, -34.004))]
data['cbeta'] = [('A', '  82 ', 'GLN', ' ', 0.3074981044017378, (-22.657, -8.092, -13.245999999999999)), ('D', ' 188 ', 'GLU', ' ', 0.3360915670243836, (-25.284999999999993, 0.5440000000000005, -35.253)), ('D', ' 208 ', 'ASN', ' ', 0.26808791756559797, (-44.611, 17.484, -30.944))]
data['probe'] = [(' D 150  GLY  O  ', ' D 401  HOH  O  ', -0.784, (-51.044, -6.52, -44.274)), (' B 301  EDO  H22', ' B 404  HOH  O  ', -0.769, (2.515, 23.191, -26.888)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.765, (-20.785, 25.069, -36.725)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.729, (-5.962, -19.341, -22.72)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.713, (-19.017, -9.063, -42.655)), (' D 205  LYS  O  ', ' D 208  ASN  HB2', -0.704, (-43.548, 17.28, -32.234)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.695, (-34.824, 18.208, -33.444)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.666, (-11.581, 19.403, -7.16)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.664, (-28.028, 42.728, -66.334)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.66, (2.642, 23.058, -26.019)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.652, (-34.465, 12.342, -50.208)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.642, (-34.044, 12.088, -49.906)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.642, (-7.532, 4.163, -25.266)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.635, (-34.04, 12.096, -49.907)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.619, (-49.789, 8.093, -62.564)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.602, (-49.531, -3.699, -51.834)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.598, (-20.487, -5.495, -52.851)), (' C 403  HOH  O  ', ' D 206  HIS  HE1', -0.587, (-35.752, 19.121, -33.941)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.581, (-54.663, -4.039, -44.616)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.58, (-31.623, 20.284, -50.652)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.578, (-42.413, 16.429, -41.08)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.573, (-54.396, -3.824, -44.638)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.572, (-20.141, -4.518, -36.019)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.55, (9.968, 18.49, -9.383)), (' C 166  GLU  OE2', ' C 401  HOH  O  ', -0.546, (-26.138, 32.972, -48.62)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.54, (-4.418, -4.341, -29.608)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.529, (-6.851, 1.841, -10.063)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.527, (-16.589, 12.076, -7.207)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.512, (-6.411, -0.924, -10.846)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.51, (-22.043, -4.602, -41.486)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.506, (-6.495, -1.087, -10.349)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.503, (-6.49, -1.082, -10.347)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.503, (-6.49, -1.082, -10.347)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.5, (-20.409, -4.874, -35.376)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.497, (-54.536, -3.102, -45.471)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.487, (-6.524, -14.887, 6.232)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.486, (-5.578, -19.82, -22.422)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.481, (-50.309, 13.731, -46.484)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.475, (-6.658, 6.719, -22.599)), (' D 189  GLU  O  ', ' D 190  HIS  C  ', -0.474, (-23.938, 1.638, -43.215)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.471, (-43.323, 13.828, -42.93)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.466, (-10.25, -3.959, -13.193)), (' C 200  TYR  OH ', ' D 206  HIS  HD2', -0.459, (-39.177, 21.093, -37.365)), (' C  58  THR  CB ', ' C 142  HIS  NE2', -0.454, (-20.845, 17.223, -41.305)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.451, (-23.056, -11.905, -30.426)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.449, (-47.741, 19.336, -49.86)), (' C 179  LEU HD23', ' C 205  LYS  HD2', -0.437, (-50.948, 18.543, -46.453)), (' A  39  PRO  HG3', ' B 167  PHE  CG ', -0.437, (10.636, 6.267, -0.515)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.436, (-40.422, 18.752, -40.737)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.435, (-6.146, 10.516, -22.697)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.428, (-48.511, 27.652, -35.348)), (' C  46 ATRP  CE3', ' D  85  PRO  HG2', -0.427, (-24.994, 3.339, -60.061)), (' A  87  MET  HB3', ' A  87  MET  HE3', -0.427, (-20.953, -0.317, -6.752)), (' C 206  HIS  HD2', ' D 200  TYR  OH ', -0.425, (-46.321, 11.41, -43.638)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.424, (-10.684, 13.655, -22.24)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.423, (-9.017, -1.783, -27.9)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.423, (-33.973, 33.679, -49.13)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.421, (8.115, 0.428, -14.64)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.418, (-9.547, -4.849, 0.392)), (' A 179  LEU HD23', ' A 205  LYS  HD2', -0.408, (-14.805, 11.548, -24.411)), (' C 127  SER  HB2', ' C 128  PRO  HD2', -0.407, (-29.466, 14.283, -39.184)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.407, (-56.439, -4.19, -43.925)), (' A  54  ARG  HD3', ' A  60  ASP  OD1', -0.407, (-4.626, -13.599, -7.285)), (' B  23  ILE HD11', ' B  33  LYS  HB2', -0.407, (-17.676, -12.002, 5.656)), (' C  46 BTRP  CE3', ' D  85  PRO  HG2', -0.405, (-24.865, 3.149, -59.655)), (' C  64  VAL  O  ', ' C  66  PRO  HD3', -0.405, (-34.861, 26.43, -41.545)), (' B  81  LYS  HA ', ' B  91  CYS  O  ', -0.403, (5.282, 2.785, -10.264)), (' C  45 ETHR HG23', ' F   5 EHOH  O  ', -0.402, (-22.764, 4.14, -66.708)), (' C  45 DTHR HG23', ' F   5 DHOH  O  ', -0.402, (-22.765, 4.139, -66.708)), (' C  45 CTHR HG23', ' F   5 CHOH  O  ', -0.402, (-22.764, 4.14, -66.708)), (' C 136  LEU  C  ', ' C 136  LEU HD13', -0.401, (-25.998, 13.308, -59.23))]
gui = coot_molprobity_todo_list_gui(data=data)
