# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04893714148161317, (-13.901999999999997, -7.7520000000000024, -27.179)), ('B', '  66 ', 'PRO', 0.08178173811893183, (-1.4619999999999993, 14.049, -17.066)), ('D', ' 190 ', 'HIS', 0.008771757047311294, (-22.28, 2.1340000000000003, -42.52199999999999)), ('D', ' 190 ', 'HIS', 0.008836002720682561, (-22.281, 2.1339999999999995, -42.521))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.752000000000006, -0.16800000000000012, -2.446)), ('A', '  33 ', 'LYS', 0.24819859792544882, (-0.4950000000000001, -6.714, 7.8229999999999995)), ('A', '  33 ', 'LYS', 0.24819859792544882, (-0.4950000000000001, -6.714, 7.8229999999999995)), ('A', '  33 ', 'LYS', 0.24819859792544882, (-0.4950000000000001, -6.714, 7.8229999999999995)), ('A', '  38 ', 'ASP', 0.17475606005182734, (11.082, 2.101, 3.209)), ('A', '  43 ', 'THR', 0.1967454727732347, (10.584000000000001, -0.38299999999999956, 8.841)), ('A', '  70 ', 'ARG', 0.022349967934446584, (-19.041, -6.899000000000002, -38.854)), ('A', ' 189 ', 'GLU', 0.013872850490093944, (-29.49900000000001, 4.837999999999999, -14.829)), ('A', ' 189 ', 'GLU', 0.013872850490093944, (-29.49900000000001, 4.837999999999999, -14.829)), ('A', ' 189 ', 'GLU', 0.013872850490093944, (-29.49900000000001, 4.837999999999999, -14.829)), ('A', ' 191 ', 'LEU', 0.000402543564294137, (-25.036999999999995, 2.354, -12.6)), ('A', ' 191 ', 'LEU', 0.000402543564294137, (-25.036999999999995, 2.354, -12.6)), ('A', ' 191 ', 'LEU', 0.0008858259207045194, (-25.010999999999996, 2.208000000000001, -12.446999999999997)), ('A', ' 191 ', 'LEU', 0.0008858259207045194, (-25.010999999999996, 2.208000000000001, -12.446999999999997)), ('A', ' 191 ', 'LEU', 0.0008858259207045194, (-25.010999999999996, 2.208000000000001, -12.446999999999997)), ('B', '  31 ', 'LEU', 0.0, (-13.518, -7.003, 5.148)), ('C', '  22 ', 'LEU', 0.18852562822569371, (-13.252, 12.274999999999999, -64.291)), ('C', '  31 ', 'LEU', 0.00467090336266868, (-19.056000000000004, 14.952999999999998, -63.371)), ('C', ' 164 ', 'ASP', 0.007352360957694931, (-22.674999999999997, 39.976, -53.153999999999996)), ('C', ' 189 ', 'GLU', 0.2528758265762583, (-46.92, 32.393999999999984, -58.61)), ('D', '  43 ', 'THR', 0.03206488185449621, (-24.940000000000005, 39.52099999999999, -65.741)), ('D', '  72 ', 'LEU', 0.15109517982897613, (-55.10099999999999, -2.319000000000001, -33.983)), ('D', '  72 ', 'LEU', 0.15109517982897613, (-55.10099999999999, -2.319000000000001, -33.983))]
data['cbeta'] = [('D', ' 188 ', 'GLU', ' ', 0.25675248222227864, (-25.208999999999993, 0.6299999999999981, -35.21))]
data['probe'] = [(' D 207 EALA  O  ', ' D 208 EASN  HB2', -0.899, (-46.493, 19.563, -31.96)), (' D 207 CALA  O  ', ' D 208 CASN  HB2', -0.899, (-46.493, 19.563, -31.96)), (' D 207 DALA  O  ', ' D 208 DASN  HB2', -0.899, (-46.493, 19.563, -31.96)), (' C  54 DARG  NH2', ' F  59 DHOH  O  ', -0.843, (-16.684, 15.279, -52.766)), (' C  54 CARG  NH2', ' F  59 CHOH  O  ', -0.843, (-16.684, 15.279, -52.766)), (' C  54 EARG  NH2', ' F  59 EHOH  O  ', -0.843, (-16.684, 15.279, -52.766)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.814, (-34.81, 18.183, -33.448)), (' D 205  LYS  O  ', ' D 208 BASN  HB2', -0.805, (-42.995, 17.196, -32.484)), (' D 205  LYS  O  ', ' D 208 AASN  HB2', -0.805, (-42.995, 17.196, -32.484)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.739, (-18.446, -9.59, -42.295)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.723, (-20.783, 25.081, -36.73)), (' A 191 CLEU  O  ', ' A 191 CLEU HD22', -0.722, (-23.38, 4.06, -13.834)), (' A 191 ELEU  O  ', ' A 191 ELEU HD22', -0.722, (-23.38, 4.06, -13.834)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.722, (-5.948, -19.334, -22.723)), (' A 191 DLEU  O  ', ' A 191 DLEU HD22', -0.722, (-23.38, 4.06, -13.834)), (' A 191 ELEU  C  ', ' A 191 ELEU  CD2', -0.708, (-23.645, 2.913, -14.187)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.708, (-23.645, 2.913, -14.187)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.708, (-23.645, 2.913, -14.187)), (' D 207 EALA  O  ', ' D 208 EASN  CB ', -0.67, (-47.226, 18.832, -32.233)), (' D 207 CALA  O  ', ' D 208 CASN  CB ', -0.67, (-47.226, 18.832, -32.233)), (' D 207 DALA  O  ', ' D 208 DASN  CB ', -0.67, (-47.226, 18.832, -32.233)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.651, (-7.521, 4.163, -25.241)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.631, (-49.546, -3.662, -51.829)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.612, (-42.394, 16.465, -41.088)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.596, (-11.531, 19.383, -7.134)), (' C  55 ELYS  CB ', ' C  57 EGLN  N  ', -0.572, (-14.179, 19.625, -45.783)), (' C  55 DLYS  CB ', ' C  57 DGLN  N  ', -0.572, (-14.179, 19.625, -45.783)), (' C  55 CLYS  CB ', ' C  57 CGLN  N  ', -0.572, (-14.179, 19.625, -45.783)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.555, (-49.743, 8.085, -62.558)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.553, (-31.634, 20.283, -50.645)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.537, (-20.658, -5.667, -52.821)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.531, (-34.631, 12.465, -50.058)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.53, (-22.961, 2.657, -14.024)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.53, (-22.961, 2.657, -14.024)), (' A 191 CLEU  CD2', ' A 191 CLEU  O  ', -0.53, (-23.393, 3.353, -14.153)), (' A 191 ELEU  C  ', ' A 191 ELEU HD23', -0.53, (-22.961, 2.657, -14.024)), (' A 191 DLEU  CD2', ' A 191 DLEU  O  ', -0.53, (-23.393, 3.353, -14.153)), (' A 191 ELEU  CD2', ' A 191 ELEU  O  ', -0.53, (-23.393, 3.353, -14.153)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.528, (-16.627, 12.076, -7.204)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.527, (-34.044, 12.3, -49.753)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.523, (-34.04, 12.307, -49.751)), (' C  54 DARG  HB3', ' C  54 DARG HH21', -0.517, (-16.462, 17.407, -51.283)), (' C  54 EARG  HB3', ' C  54 EARG HH21', -0.517, (-16.462, 17.407, -51.283)), (' C  54 CARG  HB3', ' C  54 CARG HH21', -0.517, (-16.462, 17.407, -51.283)), (' A 191 ELEU  C  ', ' A 191 ELEU HD22', -0.515, (-24.011, 3.327, -13.488)), (' A 191 CLEU  C  ', ' A 191 CLEU HD22', -0.515, (-24.011, 3.327, -13.488)), (' A 191 DLEU  C  ', ' A 191 DLEU HD22', -0.515, (-24.011, 3.327, -13.488)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.512, (-6.794, 1.819, -10.067)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.509, (-20.217, -4.543, -36.0)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.501, (-4.836, -4.113, -29.536)), (' D  72 BLEU  CD1', ' D  72 BLEU  N  ', -0.49, (-57.104, -2.489, -34.928)), (' D  72 ALEU  CD1', ' D  72 ALEU  N  ', -0.49, (-57.104, -2.489, -34.928)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.484, (-6.522, -14.853, 6.205)), (' C  54 EARG  HB3', ' C  54 EARG  NH2', -0.484, (-16.107, 17.153, -51.088)), (' C  54 CARG  HB3', ' C  54 CARG  NH2', -0.484, (-16.107, 17.153, -51.088)), (' C  54 DARG  HB3', ' C  54 DARG  NH2', -0.484, (-16.107, 17.153, -51.088)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.483, (-6.635, 6.729, -22.594)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.483, (-6.404, -0.927, -10.827)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.482, (-10.234, -3.939, -13.187)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.477, (-5.577, -19.824, -22.389)), (' D  72 ELEU  N  ', ' D  72 ELEU HD12', -0.476, (-57.217, -2.248, -34.917)), (' D  72 DLEU  N  ', ' D  72 DLEU HD12', -0.476, (-57.217, -2.248, -34.917)), (' D  72 CLEU  N  ', ' D  72 CLEU HD12', -0.476, (-57.217, -2.248, -34.917)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.474, (-6.553, -1.006, -10.325)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.473, (-6.553, -1.003, -10.324)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.473, (-6.553, -1.003, -10.324)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.472, (-23.028, -11.941, -30.463)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.471, (2.476, 23.299, -26.23)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.47, (-22.072, -4.622, -41.473)), (' D  72 BLEU  N  ', ' D  72 BLEU HD12', -0.467, (-56.782, -1.955, -34.949)), (' D  72 ALEU  N  ', ' D  72 ALEU HD12', -0.467, (-56.782, -1.955, -34.949)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.462, (10.24, 18.16, -8.868)), (' D 206 BHIS  C  ', ' D 208 BASN  N  ', -0.459, (-44.332, 18.603, -33.402)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.459, (-40.583, 18.923, -40.746)), (' D 206 AHIS  C  ', ' D 208 AASN  N  ', -0.459, (-44.332, 18.603, -33.402)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.455, (8.278, 0.461, -14.871)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.452, (-43.303, 13.82, -42.927)), (' D  72 ELEU  CD1', ' D  72 ELEU  N  ', -0.448, (-56.794, -2.342, -35.066)), (' D  72 DLEU  CD1', ' D  72 DLEU  N  ', -0.448, (-56.794, -2.342, -35.066)), (' D  72 CLEU  CD1', ' D  72 CLEU  N  ', -0.448, (-56.794, -2.342, -35.066)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.447, (-50.318, 13.737, -46.5)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.445, (-56.49, -4.13, -43.902)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.445, (-5.665, 10.578, -22.827)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.439, (-27.728, 42.615, -65.829)), (' D 189 BGLU  O  ', ' D 190 BHIS  C  ', -0.429, (-24.008, 1.88, -42.843)), (' D 189 AGLU  O  ', ' D 190 AHIS  C  ', -0.429, (-24.008, 1.881, -42.843)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.428, (-47.616, 19.547, -49.856)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.428, (-33.976, 33.683, -49.122)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.424, (-54.685, -3.769, -44.352)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.418, (-10.68, 13.671, -22.271)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.411, (-48.499, 27.595, -35.288)), (' A 189 DGLU  HB3', ' A 191 DLEU HD13', -0.41, (-27.432, 3.016, -15.41)), (' A 189 CGLU  HB3', ' A 191 CLEU HD13', -0.41, (-27.432, 3.016, -15.41)), (' A 189 EGLU  HB3', ' A 191 ELEU HD13', -0.41, (-27.432, 3.016, -15.41)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.409, (-9.533, -4.841, 0.397)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.408, (-9.034, -1.783, -27.89)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.405, (-32.118, 14.431, -51.341)), (' A  70  ARG  CD ', ' A 409  HOH  O  ', -0.403, (-20.258, -5.03, -35.372)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.403, (-54.736, -3.388, -44.612))]
gui = coot_molprobity_todo_list_gui(data=data)
