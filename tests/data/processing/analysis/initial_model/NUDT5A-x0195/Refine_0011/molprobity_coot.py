# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  66 ', 'PRO', 0.04874310653240312, (-13.902999999999999, -7.748000000000001, -27.180999999999997)), ('B', '  66 ', 'PRO', 0.0825124810120158, (-1.462000000000001, 14.041999999999998, -17.067)), ('D', ' 190 ', 'HIS', 0.0066060664042885565, (-22.286999999999995, 2.156999999999999, -42.479)), ('D', ' 190 ', 'HIS', 0.0066060664042885565, (-22.286999999999995, 2.156999999999999, -42.479))]
data['omega'] = []
data['rota'] = [('A', '  14 ', 'LYS', 0.0, (15.76, -0.1870000000000001, -2.457)), ('A', '  33 ', 'LYS', 0.2718120295313602, (-0.4870000000000001, -6.715, 7.821)), ('A', '  33 ', 'LYS', 0.2718120295313602, (-0.4870000000000001, -6.715, 7.821)), ('A', '  33 ', 'LYS', 0.2718120295313602, (-0.4870000000000001, -6.715, 7.821)), ('A', '  38 ', 'ASP', 0.18738973851281682, (11.084999999999997, 2.1059999999999994, 3.210999999999999)), ('A', '  43 ', 'THR', 0.2568487585514901, (10.578999999999997, -0.369, 8.838)), ('A', '  70 ', 'ARG', 0.02415287368495346, (-19.034999999999993, -6.898, -38.856)), ('A', ' 189 ', 'GLU', 0.01666869315621567, (-29.529, 4.89, -14.774999999999999)), ('A', ' 189 ', 'GLU', 0.01666869315621567, (-29.529, 4.89, -14.774999999999999)), ('A', ' 189 ', 'GLU', 0.01666869315621567, (-29.529, 4.89, -14.774999999999999)), ('A', ' 191 ', 'LEU', 0.0, (-25.025999999999996, 2.351, -12.704)), ('A', ' 191 ', 'LEU', 0.0, (-25.025999999999996, 2.351, -12.704)), ('A', ' 191 ', 'LEU', 0.0036917486300168927, (-24.993, 2.2270000000000003, -12.338)), ('A', ' 191 ', 'LEU', 0.0036917486300168927, (-24.993, 2.2270000000000003, -12.338)), ('A', ' 191 ', 'LEU', 0.0036917486300168927, (-24.993, 2.2270000000000003, -12.338)), ('B', '  31 ', 'LEU', 0.0, (-13.510999999999997, -6.997999999999999, 5.150999999999998)), ('C', '  22 ', 'LEU', 0.2527596810511753, (-13.254000000000001, 12.276999999999997, -64.299)), ('C', '  31 ', 'LEU', 0.002752471863862844, (-19.064999999999998, 14.962, -63.39199999999999)), ('C', ' 164 ', 'ASP', 0.006924410581014381, (-22.651, 39.979, -53.14199999999999)), ('C', ' 189 ', 'GLU', 0.25233536552959795, (-46.91599999999998, 32.396, -58.608)), ('D', '  43 ', 'THR', 0.04201398624864673, (-24.931, 39.525, -65.749)), ('D', '  72 ', 'LEU', 0.10735308603172627, (-55.081999999999994, -2.3100000000000023, -33.987)), ('D', '  72 ', 'LEU', 0.10735308603172627, (-55.081999999999994, -2.3100000000000023, -33.987))]
data['cbeta'] = []
data['probe'] = [(' A 191 CLEU  O  ', ' A 191 CLEU HD22', -0.926, (-24.095, 4.498, -13.594)), (' A 191 ELEU  O  ', ' A 191 ELEU HD22', -0.926, (-24.095, 4.498, -13.594)), (' A 191 DLEU  O  ', ' A 191 DLEU HD22', -0.926, (-24.095, 4.498, -13.594)), (' C  54 DARG  NH2', ' F  59 DHOH  O  ', -0.898, (-16.875, 15.502, -52.811)), (' C  54 CARG  NH2', ' F  59 CHOH  O  ', -0.898, (-16.875, 15.502, -52.811)), (' C  54 EARG  NH2', ' F  59 EHOH  O  ', -0.898, (-16.875, 15.502, -52.811)), (' D 207 EALA  O  ', ' D 208 EASN  HB2', -0.871, (-46.853, 18.541, -31.838)), (' D 207 CALA  O  ', ' D 208 CASN  HB2', -0.871, (-46.853, 18.541, -31.838)), (' D 207 DALA  O  ', ' D 208 DASN  HB2', -0.871, (-46.853, 18.541, -31.838)), (' C 125  GLU  OE1', ' C 403  HOH  O  ', -0.815, (-34.807, 18.176, -33.441)), (' A 191 ELEU  C  ', ' A 191 ELEU  CD2', -0.779, (-23.636, 2.92, -14.166)), (' A 191 DLEU  C  ', ' A 191 DLEU  CD2', -0.779, (-23.636, 2.92, -14.166)), (' A 191 CLEU  C  ', ' A 191 CLEU  CD2', -0.779, (-23.636, 2.92, -14.166)), (' D 207 AALA  O  ', ' D 208 AASN  HB2', -0.767, (-46.72, 19.227, -32.031)), (' D 207 BALA  O  ', ' D 208 BASN  HB2', -0.767, (-46.72, 19.227, -32.031)), (' C  55 ELYS  CB ', ' C  57 EGLN  N  ', -0.76, (-14.407, 18.819, -45.661)), (' C  55 DLYS  CB ', ' C  57 DGLN  N  ', -0.76, (-14.407, 18.819, -45.661)), (' C  55 CLYS  CB ', ' C  57 CGLN  N  ', -0.76, (-14.407, 18.819, -45.661)), (' A  71  THR HG23', ' A 151  ASP  OD2', -0.752, (-18.427, -9.583, -42.295)), (' C 104  THR HG23', ' C 107  ALA  H  ', -0.723, (-20.783, 25.093, -36.724)), (' A 104  THR HG23', ' A 107  ALA  H  ', -0.715, (-5.928, -19.322, -22.718)), (' A 191 ELEU  C  ', ' A 191 ELEU HD22', -0.694, (-23.547, 3.334, -13.474)), (' A 191 CLEU  C  ', ' A 191 CLEU HD22', -0.694, (-23.547, 3.334, -13.474)), (' A 191 DLEU  C  ', ' A 191 DLEU HD22', -0.694, (-23.547, 3.334, -13.474)), (' A 189 EGLU  HB3', ' A 191 ELEU  CD1', -0.674, (-27.63, 2.81, -15.61)), (' A 189 DGLU  HB3', ' A 191 DLEU  CD1', -0.674, (-27.63, 2.81, -15.61)), (' A 189 CGLU  HB3', ' A 191 CLEU  CD1', -0.674, (-27.63, 2.81, -15.61)), (' D 120  LYS  H  ', ' D 155  ASN HD21', -0.656, (-49.62, -3.842, -52.0)), (' A 203  ALA  HB3', ' B 203  ALA  HB3', -0.644, (-7.514, 4.167, -25.237)), (' A 191 CLEU  CD2', ' A 191 CLEU  O  ', -0.642, (-23.528, 3.568, -14.296)), (' A 191 DLEU  CD2', ' A 191 DLEU  O  ', -0.642, (-23.528, 3.568, -14.296)), (' A 191 ELEU  CD2', ' A 191 ELEU  O  ', -0.642, (-23.528, 3.568, -14.296)), (' C 203  ALA  HB3', ' D 203  ALA  HB3', -0.614, (-42.38, 16.457, -41.095)), (' D 207 EALA  O  ', ' D 208 EASN  CB ', -0.598, (-47.035, 18.81, -32.288)), (' D 207 CALA  O  ', ' D 208 CASN  CB ', -0.598, (-47.035, 18.81, -32.288)), (' D 207 DALA  O  ', ' D 208 DASN  CB ', -0.598, (-47.035, 18.81, -32.288)), (' B 104  THR HG23', ' B 107  ALA  H  ', -0.586, (-11.512, 19.377, -7.122)), (' D 104  THR HG23', ' D 107  ALA  H  ', -0.558, (-49.728, 8.083, -62.555)), (' A 189 DGLU  HB3', ' A 191 DLEU HD12', -0.557, (-27.863, 2.125, -15.157)), (' A 189 EGLU  HB3', ' A 191 ELEU HD12', -0.557, (-27.863, 2.125, -15.157)), (' A 189 CGLU  HB3', ' A 191 CLEU HD12', -0.557, (-27.863, 2.125, -15.157)), (' C 132  MET  HE1', ' C 196  ARG  CZ ', -0.546, (-31.629, 20.28, -50.645)), (' D  72 BLEU  CD1', ' D  72 BLEU  N  ', -0.53, (-56.975, -2.723, -34.944)), (' B  58  THR  CB ', ' B 142  HIS  NE2', -0.53, (-16.624, 12.07, -7.202)), (' D  72 ALEU  CD1', ' D  72 ALEU  N  ', -0.53, (-56.975, -2.723, -34.944)), (' D 194  ASP  OD1', ' D 196 AARG  HD3', -0.529, (-34.152, 12.63, -50.052)), (' A 189 DGLU  HB3', ' A 191 DLEU HD13', -0.527, (-27.554, 3.541, -14.839)), (' A 189 CGLU  HB3', ' A 191 CLEU HD13', -0.527, (-27.554, 3.541, -14.839)), (' D  72 BLEU  N  ', ' D  72 BLEU HD12', -0.527, (-56.763, -2.024, -35.092)), (' A 189 EGLU  HB3', ' A 191 ELEU HD13', -0.527, (-27.554, 3.541, -14.839)), (' D  72 ALEU  N  ', ' D  72 ALEU HD12', -0.527, (-56.763, -2.024, -35.092)), (' D 194  ASP  OD1', ' D 196 EARG  HD3', -0.525, (-34.051, 12.293, -49.758)), (' C  15  GLN  N  ', ' C 404  HOH  O  ', -0.525, (-20.654, -5.672, -52.836)), (' D 194  ASP  OD1', ' D 196 CARG  HD3', -0.525, (-34.051, 12.293, -49.758)), (' D 207 BALA  O  ', ' D 208 BASN  CB ', -0.523, (-46.962, 18.785, -32.051)), (' D 207 AALA  O  ', ' D 208 AASN  CB ', -0.523, (-46.962, 18.785, -32.051)), (' A 191 DLEU  C  ', ' A 191 DLEU HD23', -0.522, (-23.272, 2.283, -14.019)), (' A 191 CLEU  C  ', ' A 191 CLEU HD23', -0.522, (-23.272, 2.283, -14.019)), (' A 191 ELEU  C  ', ' A 191 ELEU HD23', -0.522, (-23.272, 2.283, -14.019)), (' A 189 CGLU  CB ', ' A 191 CLEU  CD1', -0.514, (-28.107, 3.098, -15.85)), (' A 189 DGLU  CB ', ' A 191 DLEU  CD1', -0.514, (-28.107, 3.098, -15.85)), (' A 189 EGLU  CB ', ' A 191 ELEU  CD1', -0.514, (-28.107, 3.098, -15.85)), (' C  54 EARG  HB3', ' C  54 EARG  NH2', -0.509, (-16.114, 17.192, -51.141)), (' C  54 CARG  HB3', ' C  54 CARG  NH2', -0.509, (-16.114, 17.192, -51.141)), (' C  54 DARG  HB3', ' C  54 DARG  NH2', -0.509, (-16.114, 17.192, -51.141)), (' B 132  MET  HE1', ' B 196 EARG  CZ ', -0.507, (-6.788, 1.825, -10.082)), (' C  54 DARG  HB3', ' C  54 DARG HH21', -0.498, (-16.548, 17.383, -51.083)), (' C  54 EARG  HB3', ' C  54 EARG HH21', -0.498, (-16.548, 17.383, -51.083)), (' C  54 CARG  HB3', ' C  54 CARG HH21', -0.498, (-16.548, 17.383, -51.083)), (' A  70  ARG  HD3', ' A 409  HOH  O  ', -0.493, (-20.22, -4.576, -35.994)), (' A 125  GLU  OE1', ' B 206  HIS  HE1', -0.493, (-4.82, -4.113, -29.541)), (' A 132  MET  O  ', ' B 196 BARG  NH2', -0.49, (-6.4, -0.927, -10.828)), (' B  92  ILE HD11', ' B 191  LEU HD13', -0.489, (8.295, 0.457, -14.842)), (' A 203  ALA  HB2', ' B 200  TYR  CD1', -0.484, (-6.629, 6.737, -22.592)), (' A 132  MET  HE1', ' A 196  ARG  CZ ', -0.483, (-10.228, -3.94, -13.184)), (' A 104  THR  CG2', ' A 107  ALA  H  ', -0.479, (-5.568, -19.823, -22.389)), (' A 132  MET  O  ', ' B 196 AARG  NH2', -0.476, (-6.565, -0.992, -10.315)), (' A 119  TYR  CE1', ' A 158  PRO  HG3', -0.471, (-23.025, -11.965, -30.497)), (' A 132  MET  O  ', ' B 196 CARG  NH2', -0.471, (-6.556, -0.986, -10.313)), (' A 132  MET  O  ', ' B 196 DARG  NH2', -0.471, (-6.556, -0.986, -10.313)), (' D 149  ASN HD21', ' D 151  ASP  HB2', -0.47, (-56.434, -4.323, -44.084)), (' A  71  THR  O  ', ' A  73  HIS  HD2', -0.463, (-22.081, -4.632, -41.469)), (' C 203  ALA  HB2', ' D 200  TYR  CD1', -0.459, (-43.294, 13.825, -42.932)), (' D  72 ELEU  N  ', ' D  72 ELEU HD12', -0.457, (-57.238, -1.991, -34.911)), (' D  72 DLEU  N  ', ' D  72 DLEU HD12', -0.457, (-57.238, -1.991, -34.911)), (' D  72 CLEU  N  ', ' D  72 CLEU HD12', -0.457, (-57.238, -1.991, -34.911)), (' C 206  HIS  HE1', ' D 125  GLU  OE1', -0.455, (-50.305, 13.707, -46.493)), (' B 301  EDO  C2 ', ' B 404  HOH  O  ', -0.451, (2.231, 23.238, -26.252)), (' B 158  PRO  O  ', ' B 160  PRO  HD3', -0.449, (10.271, 18.113, -8.89)), (' C 200  TYR  CD1', ' D 203  ALA  HB2', -0.447, (-40.402, 18.734, -40.76)), (' A  22  LEU HD11', ' A  25  GLU  HB2', -0.445, (-6.31, -15.01, 6.214)), (' D 149  ASN  ND2', ' D 151  ASP  H  ', -0.438, (-54.643, -3.791, -44.341)), (' A 206  HIS  HE1', ' B 125  GLU  OE1', -0.438, (-10.679, 13.681, -22.268)), (' A 206  HIS  HD2', ' B 200  TYR  OH ', -0.435, (-6.155, 10.512, -22.695)), (' D 189 BGLU  O  ', ' D 190 BHIS  C  ', -0.43, (-24.07, 1.683, -43.014)), (' D 189 AGLU  O  ', ' D 190 AHIS  C  ', -0.43, (-24.07, 1.683, -43.014)), (' C 179  LEU HD11', ' C 198  TYR  CZ ', -0.427, (-47.617, 19.545, -49.859)), (' C  80  VAL  HB ', ' C 168  VAL HG13', -0.421, (-33.975, 33.684, -49.127)), (' A  49  VAL HG21', ' B  49  VAL HG11', -0.42, (-9.546, -4.86, 0.404)), (' C  74  TYR  HB3', ' C 426  HOH  O  ', -0.416, (-48.498, 27.584, -35.28)), (' D 149  ASN HD22', ' D 151  ASP  H  ', -0.414, (-54.704, -3.397, -44.601)), (' A 200  TYR  OH ', ' B 206  HIS  HD2', -0.413, (-9.029, -1.783, -27.892)), (' D  72 ELEU  CD1', ' D  72 ELEU  N  ', -0.411, (-56.695, -2.395, -34.852)), (' D  72 DLEU  CD1', ' D  72 DLEU  N  ', -0.411, (-56.695, -2.395, -34.852)), (' D  72 CLEU  CD1', ' D  72 CLEU  N  ', -0.411, (-56.695, -2.395, -34.852)), (' D 149  ASN  C  ', ' D 149  ASN HD22', -0.41, (-54.372, -3.019, -45.237)), (' D  37  MET  SD ', ' D  41  GLY  O  ', -0.41, (-27.928, 42.744, -65.814)), (' C 132  MET  O  ', ' D 196 BARG  NH1', -0.405, (-32.161, 14.686, -51.337)), (' C  54 DARG  CB ', ' C  54 DARG HH21', -0.403, (-16.802, 17.417, -51.081)), (' C  54 EARG  CB ', ' C  54 EARG HH21', -0.403, (-16.802, 17.417, -51.081)), (' C  54 CARG  CB ', ' C  54 CARG HH21', -0.403, (-16.802, 17.417, -51.081))]
gui = coot_molprobity_todo_list_gui(data=data)
